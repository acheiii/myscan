# coding=utf-8
# @Author   : zpchcbd HG team
# @Time     : 2021-09-08 16:30

from colorama import Fore
from tqdm import tqdm

from exploit.web import BaseScript
from core.MyEnums import *
from core.MyAsyncHttp import *


class Script(BaseScript):
    name = 'WEB NAME'

    def __init__(self, target, pbar, semaphore):
        super().__init__()
        # 漏洞目标
        self.target = target
        # 漏洞等级
        self.bugLevel = BugLevel.HIGH
        # 类型
        self.bugType = BugType.SQLINJECTION
        # 编号
        self.bugNumber = 'bugNumber'
        # 来源
        self.refer = 'refer'
        # 特定路径判断
        self.detectPathList = ['/Conf/images/user.gif']
        # exec
        self.execPathList = ['/Conf/jsp/systembulletin/bulletinAction.do']
        # 进度条
        self.pbar = pbar
        # 信号量
        self.semaphore = semaphore
        # 相关信息
        self.info = 'Version < 3000.2'

    async def detect(self):
        try:
            async with self.semaphore:
                async with aiohttp.ClientSession() as session:
                    for detectPath in self.detectPathList:
                        url = f'http://{self.target}{detectPath}' if self.target.startswith(
                            ('http:', 'https:')) is False else f'{self.target}{detectPath}'
                        async with session.get(url=url, timeout=10, verify_ssl=False) as response:
                            if response is not None:
                                text = await response.text()
                                if 'FineReport--Web Reporting Tool' in text:
                                    self.flag = True
                                    tqdm.write(Fore.RED + '[{}] {}'.format('FineReport Finger', url))
                                    return {'name': 'v2Conference Finger', 'url': url, 'software': 'FineReport'}
        except Exception:
            return None

    async def exec(self):
        try:
            async with self.semaphore:
                async with aiohttp.ClientSession() as session:
                    for execPath in self.execPathList:
                        url = f'http://{self.target}{execPath}' if self.target.startswith(
                            ('http:', 'https:')) is False else f'{self.target}{execPath}'
                        async with session.get(url=url, timeout=10, verify_ssl=False) as response:
                            if response is not None:
                                text = await response.text()
                                if 'It works!' in text:
                                    tqdm.write(Fore.RED + '[{}] {}'.format('FineReport Getshell', url))
                                    self.flag = True
                                    return {'name': 'FineReport Getshell', 'url': url, 'software': 'FineReport'}
        except Exception:
            return None

    async def attack(self):
        a = await self.detect()
        if a is not None:
            self.vulList.append(a)
        if self.flag:
            b = await self.exec()
            if b is not None:
                self.vulList.append(b)
        self.pbar.update(1)
        return self.vulList


if __name__ == '__main__':
    # import requests
    # import hashlib
    # resp = requests.get('http://61.150.65.205:9999/image/favicon.png')
    # if resp.status_code == 200:
    #     m1 = hashlib.md5()
    #     m1.update(resp.content)
    #     theMD5 = m1.hexdigest()
    #     print(theMD5)

    sem = asyncio.Semaphore(500)
    sc = Script('61.150.65.205:9999', 1, sem)
    l = asyncio.get_event_loop()
    l.run_until_complete(sc.attack())
