# coding=utf-8

# from Exploit.BaseExploit import *
from threading import Thread
import requests
requests.packages.urllib3.disable_warnings()
import os
import json
import difflib

abs_path = os.getcwd() + os.path.sep

class CmsScan(object):
    def __init__(self, domain, http):
        self.headers = {'User-Agent': 'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.1 (KHTML, like Gecko) Chrome/22.0.1207.1 Safari/537.1'}
        self._http = http.replace('\n', '') if http.startswith('http') else 'http://' + http.replace('\n', '')
        self.strutsTypes = ['VloginUser.action','Mail.action','code.action','reg.action','Address.action','!Index.action','login.action','Add.action','pageslist.action','.Action','Message.action','getMul.action','shouye.action','logout.action','Valid.action','search.action','Magazine.action','news.action','init.action','create.action','index2.action','default.action','welcome.action','Name.action','single.action','updateForm.action','SysStart.action','adminlogin.action','Offportal.action','Buying.action','Success.action','exchange.action','menu.action','airport.action','Email.action','On.action','show.action','tain.action','randomPicture.action','news.do']
        self.domain = domain
        self.cmsscanlist = list()
        with open(abs_path + 'body.txt', 'r', encoding='utf-8') as a, open(abs_path + 'head.txt', 'r', encoding='utf-8') as b, open(abs_path + 'robots.txt', 'r', encoding='utf-8') as d:
            self.body_content = eval(a.read())  # 已经完成
            self.head_content = eval(b.read())  # 已经完成
            self.robots_content = eval(d.read())  # 已经完成

    def header_index_content_scan(self):
        # 基于首页源代码中的特征寻找
        if self._http[-1] != '/':
            self._http = self._http + '/'
        try:
            resp = requests.get(url=self._http, headers=self.headers, allow_redirects=False, timeout=3, verify=False)

            # 迭代器迭代字典
            for keyword, cms in self.body_content.items():
                if keyword in resp.content.decode('utf-8'):
                    temp = {
                        'url': self._http,
                        'cms': cms
                    }
                    self.cmsscanlist.append(temp)
                    return
                else:
                    pass

            for keyword, cms in self.head_content.iteritems():
                if keyword in resp.headers:
                    print("[scan01_headers]: cms识别为 " + cms)
                    break
        except:
            pass

    def robot_scan(self):
        # 根目录robots.txt 文本中的特征判断
        if self._http[-1] != '/':
            self._http = self._http + '/'
        try:
            resp = requests.get(url=self._http + 'robots.txt', headers=self.headers, allow_redirects=False, timeout=3, verify=False)
            for robots in self.robots_content:
                if robots in resp.content.decode('utf-8'):
                    temp = {
                        'url': self._http,
                        'cms': robots
                    }
                    self.cmsscanlist.append(temp)
                    break
        except:
            pass

    def frame_scan(self):

        # struts框架的探测
        try:
            if self._http[-1] != '/':
                self._http = self._http + '/'
            for strutstype in self.strutsTypes:
                try:
                    UA = self.headers
                    headers = {'User-Agent': UA}
                    req1 = requests.head(url=self._http + strutstype, headers=headers, timeout=3, allow_redirects=False)
                    if req1.status_code == 200:
                        req1_2 = requests.get(url=self._http + strutstype, headers=headers, timeout=3, allow_redirects=False)
                        if '.action' in req1_2.content:
                            temp = {
                                'url': self._http,
                                'cms': 'struts框架'
                            }
                            self.cmsscanlist.append(temp)
                    else:
                        pass
                except:
                    pass
        except:
            pass

        # shiro框架的探测
        try:
            shiro_headers = self.headers
            shiro_headers['Cookie'] = "rememberMe=11;"
            resp = requests.get(self._http, headers=self.headers, allow_redirects=False)  # allow_redirects设置为False 要不然重定向的发包导致检测不到
            if 'rememberMe' in str(resp.headers):
                temp = {
                    'url': self._http,
                    'cms': 'shiro框架'
                }
                self.cmsscanlist.append(temp)
        except:
            pass

        # thinkphp框架的探测
        try:
            thinkphp_url = '1111111111111111111111111111111-index.html'
            resp = requests.get(self._http, headers=self.headers, allow_redirects=False)
            # print(resp.content)
            if 'ThinkPHP' or 'WE CAN DO IT JUST THINK' in resp.content:
                temp = {
                    'url': self._http,
                    'cms': 'thinkphp框架'
                }
                self.cmsscanlist.append(temp)
        except:
            pass

    def main(self):
        thread_list.append(Thread(target=self.header_index_content_scan))
        thread_list.append(Thread(target=self.robot_scan))
        thread_list.append(Thread(target=self.frame_scan))

        for t in thread_list:
            t.start()

        for t in thread_list:
            t.join()


if '__main__' == __name__:
    a = CmsScan('', 'http://tv.ncist.edu.cn/')
    thread_list = []
    thread_list.append(Thread(target=a.header_index_content_scan, args=()))
    thread_list.append(Thread(target=a.robot_scan, args=()))
    thread_list.append(Thread(target=a.frame_scan, args=()))
    # thread_list.append(Thread(target=a.sub_dir_content_scan, args=()))
    # thread_list.append(Thread(target=a.md5_scan, args=()))

    for t in thread_list:
        t.start()
    for t in thread_list:
        t.join()
    print(a.cmsscanlist)