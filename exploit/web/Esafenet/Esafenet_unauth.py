# coding=utf-8
# @Author   : zpchcbd HG team
# @Time     : 2021-09-11 13:01

# fofa: app="亿赛通DLP"

# coding=utf-8
# @Author   : zpchcbd HG team
# @Time     : 2021-09-10 14:14

from colorama import Fore
from tqdm import tqdm

from exploit.web import BaseScript
from core.MyEnums import BugType, BugLevel
from core.MyAsyncHttp import *


# python batch.py -m exploit.web.Solr.Solr_template_rce -fs "app=\"APACHE-Solr\" && country=\"CN\"" -cs

# class Script(BaseScript):
#     name = 'Solr'
#
#     def __init__(self, target, pbar, semaphore):
#         super().__init__()
#         # basic
#         self.target = target
#         self.bugLevel = BugLevel.MEDIUM
#         self.bugType = BugType.UNAUTH
#         self.bugNumber = ''
#         self.refer = ''
#         self.pbar = pbar
#         self.semaphore = semaphore
#         # main
#         self.detectList = ['/', '/solr']
#         self.payloadList = ['/solr/admin/cores?indexInfo=false&wt=json']
#
#     async def detect(self):
#         try:
#             async with self.semaphore:
#                 async with aiohttp.ClientSession(headers=self.headers) as session:
#                     for detectPath in self.detectList:
#                         url = f'http://{self.target}{detectPath}' if self.target.startswith(
#                             ('http:', 'https:')) is False else f'{self.target}{detectPath}'
#                         text = await AsyncFetcher.fetch(session=session, url=url)
#                         if 'Solr Admin' in text:
#                             self.flag = True
#                             tqdm.write(Fore.RED + '[{}] {}'.format('Solr Unauth', url))
#                             return {'name': 'Solr Unauth', 'url': url, 'software': 'Solr'}
#         except Exception:
#             return None
#
#     async def exploit(self):
#         try:
#             async with self.semaphore:
#                 async with aiohttp.ClientSession() as session:
#                     pass
#         except Exception:
#             return None
#
#     async def attack(self):
#         a = await self.detect()
#         if a is not None:
#             self.vulList.append(a)
#             if self.flag:
#                 b = await self.exploit()
#                 if b is not None:
#                     self.vulList.append(b)
#         self.pbar.update(1)
#         return self.vulList


if __name__ == '__main__':
    sem = asyncio.Semaphore(500)
    sc = Script('192.168.4.137:8983', 1, sem)
    l = asyncio.get_event_loop()
    l.run_until_complete(sc.attack())
