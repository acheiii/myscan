# coding=utf-8
# @Author   : zpchcbd HG team
# @Time     : 2021-09-08 16:30

import hashlib
from colorama import Fore
from tqdm import tqdm

from exploit.web import BaseScript
from core.MyEnums import *
from core.MyAsyncHttp import *


# fofa: app="ThinkPHP"
# python batch.py -m exploit.web.Thinkphp.unauth_rce -cs -fs "app=\"ThinkPHP\" && country=\"CN\""
class Script(BaseScript):
    name = 'ThinkPHP'

    def __init__(self, target, pbar):
        super().__init__()
        # 漏洞目标
        self.target = target
        # 漏洞等级
        self.bugLevel = BugLevel.HIGH
        # 类型
        self.bugType = BugType.SQLINJECTION
        # 编号
        self.bugNumber = ''
        # 来源
        self.refer = ''
        # 特定路径判断
        self.detech = {
            'ICO': '/favicon.ico',
            'ERROR': '/1111111111111111111111111111111-index.html',
            'X-Powered-By': '/',
            'CC': '/?c=4e5e5d7364f443e28fbf0d3ae744a59a',
        }
        self.detectPathList = ['/']
        # exec
        self.execPathList = ['/']
        # 进度条
        self.pbar = pbar
        # 相关信息
        self.info = ''

    async def detect(self):
        try:
            async with aiohttp.ClientSession() as session:
                # favicon.ico
                url = f'http://{self.target}{self.detech.get("ICO")}' if self.target.startswith(
                    ('http:', 'https:')) is False else f'{self.target}{self.detech.get("ICO")}'
                async with session.get(url=url, timeout=10, verify_ssl=False) as response:
                    if response is not None:
                        text = await response.read()
                        await asyncio.sleep(2)
                        m1 = hashlib.md5()
                        m1.update(text)
                        theMD5 = m1.hexdigest()
                        if theMD5 == 'f49c4a4bde1eec6c0b80c2277c76e3db':
                            self.flag = True
                            tqdm.write(Fore.RED + '[{}] {}'.format('Thinkphp Finger', url))
                            return {'name': 'Thinkphp Finger', 'url': url, 'software': 'Thinkphp'}

                # X-Powered-By
                url = f'http://{self.target}{self.detech.get("X-Powered-By")}' if self.target.startswith(
                    ('http:', 'https:')) is False else f'{self.target}{self.detech.get("X-Powered-By")}'
                async with session.get(url=url, timeout=10, verify_ssl=False) as response:
                    if response is not None:
                        header = response.headers
                        if header.get('X-Powered-By') == 'ThinkPHP':
                            self.flag = True
                            tqdm.write(Fore.RED + '[{}] {}'.format('Thinkphp Finger', url))
                            return {'name': 'Thinkphp Finger', 'url': url, 'software': 'Thinkphp'}

                # /1111111111111111111111111111111-index.html
                url = f'http://{self.target}{self.detech.get("ERROR")}' if self.target.startswith(
                    ('http:', 'https:')) is False else f'{self.target}{self.detech.get("ERROR")}'
                async with session.get(url=url, timeout=10, verify_ssl=False) as response:
                    if response is not None:
                        text = await response.text()
                        await asyncio.sleep(2)
                        if 'ThinkPHP' in text:
                            self.flag = True
                            tqdm.write(Fore.RED + '[{}] {}'.format('Thinkphp Finger', url))
                            return {'name': 'Thinkphp Finger', 'url': url, 'software': 'Thinkphp'}
                # CC a33d202b17b9b1a50e5ac54af6eff74e
                url = f'http://{self.target}{self.detech.get("CC")}' if self.target.startswith(
                    ('http:', 'https:')) is False else f'{self.target}{self.detech.get("CC")}'
                async with session.get(url=url, timeout=10, verify_ssl=False) as response:
                    if response is not None:
                        text = await response.read()
                        await asyncio.sleep(2)
                        m1 = hashlib.md5()
                        m1.update(text)
                        theMD5 = m1.hexdigest()
                        if theMD5 == 'a33d202b17b9b1a50e5ac54af6eff74e':
                            self.flag = True
                            tqdm.write(Fore.RED + '[{}] {}'.format('Thinkphp Finger', url))
                            return {'name': 'Thinkphp Finger', 'url': url, 'software': 'Thinkphp'}
        except Exception:
            return None

    # async def exec(self):
    #     try:
    #         async with aiohttp.ClientSession() as session:
    #             for execPath in self.execPathList:
    #                 url = f'http://{self.target}{execPath}' if self.target.startswith(
    #                     ('http:', 'https:')) is False else f'{self.target}{execPath}'
    #                 async with session.get(url=url, timeout=10, verify_ssl=False) as response:
    #                     if response is not None:
    #                         text = await response.text()
    #                         await asyncio.sleep(2)
    #                         if 'something about keywords in the web' in text:
    #                             tqdm.write(Fore.RED + '[{}] {}'.format('FineReport RCE', url))
    #                             return {'name': 'FineReport RCE', 'url': url, 'software': 'FineReport'}
    #     except Exception:
    #         return None

    async def attack(self, semaphore):
        async with semaphore:
            a = await self.detect()
            if a is not None:
                self.vulList.append(a)
            if self.flag:
                b = await self.exec()
                if b is not None:
                    self.vulList.append(b)
        self.pbar.update(1)
        return self.vulList


if __name__ == '__main__':
    import requests
    import hashlib

    resp = requests.get('https://50.84.113.154:8443/favicon.ico', verify=False)
    if resp.status_code == 200:
        m1 = hashlib.md5()
        m1.update(resp.content)
        theMD5 = m1.hexdigest()
        print(theMD5)
    #
    # semaphore = asyncio.Semaphore(500)
    # sc = Script('61.150.65.205:9999', 1)
    # l = asyncio.get_event_loop()
    # l.run_until_complete(sc.attack(semaphore))
