# coding=utf-8
# @Author   : zpchcbd HG team
# @Time     : 2021-09-08 0:30
import socket
from _ssl import SSLCertVerificationError

from async_timeout import timeout
from colorama import Fore
from tqdm import tqdm

from exploit.web import BaseScript
from core.MyEnums import BugType, BugLevel
from core.MyAsyncHttp import *


class Script(BaseScript):
    name = 'FineReport'

    def __init__(self, target, pbar, semaphore):
        super().__init__()
        # basic
        self.target = target
        self.bugType = BugType.READFILE
        self.bugLevel = BugLevel.HIGH
        self.bugRefer = ''
        self.pbar = pbar
        self.semaphore = semaphore
        # main
        self.detectList = ['/WebReport/ReportServer', '/seeyonreport/ReportServer', '/webroot/ReportServer',
                           '/decision/login']
        self.payloadList = []
        self.execList = []

    async def detect(self):
        try:
            async with self.semaphore:
                with timeout(15):
                    async with aiohttp.ClientSession(headers=self.headers) as session:
                        for detectPath in self.detectList:
                            url = f'http://{self.target}{detectPath}' if self.target.startswith(
                                ('http:', 'https:')) is False else f'{self.target}{detectPath}'
                            text = await AsyncFetcher.fetch(session=session, url=url)
                            if 'FineReport--Web Reporting Tool' in text:  # base on @ske 's exploit
                                self.flag = True
                                tqdm.write(Fore.RED + '[{}] {}'.format('FineReport', url))
                                return {'name': 'FineReport Finger', 'url': url, 'software': 'FineReport 8/9'}
                            if '/com/fr/web/ui/fineui.min.js' in text:
                                tqdm.write(Fore.RED + '[{}] {}'.format('FineReport', url))
                                return {'name': 'FineReport Finger', 'url': url, 'software': 'FineReport 10'}
        except TimeoutError:
            return None
        except SSLCertVerificationError:
            return None
        except socket.gaierror:
            return None
        except Exception:
            return None

    async def exploit(self):
        # for payload in self.payloadList:
        return None

    async def attack(self):
        a = await self.detect()
        if a is not None:
            self.vulList.append(a)
        if self.flag:
            b = await self.exploit()
            if b is not None:
                self.vulList.append(b)
        self.pbar.update(1)
        return self.vulList
