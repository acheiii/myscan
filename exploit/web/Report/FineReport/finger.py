# coding=utf-8
# @Author   : zpchcbd HG team
# @Time     : 2021-09-08 0:30
import socket
from _ssl import SSLCertVerificationError

from async_timeout import timeout
from colorama import Fore
from tqdm import tqdm

from exploit.web import BaseScript
from core.MyEnums import BugType, BugLevel
from core.MyAsyncHttp import *


class Script(BaseScript):
    name = 'FineReport'

    def __init__(self, target, pbar):
        super().__init__()
        # basic
        self.target = target
        self.bugType = BugType.READFILE
        self.bugLevel = BugLevel.HIGH
        self.bugNumber = ''
        self.bugRefer = ''
        # main
        self.detectList = ['/WebReport/ReportServer', '/seeyonreport/ReportServer', '/webroot/ReportServer',
                           '/decision/login']
        # self.execPathList = []
        # 进度条
        self.pbar = pbar
        # 相关信息
        self.info = ''

    async def detect(self):
        try:
            async with aiohttp.ClientSession() as session:
                for detectPath in self.detectList:
                    url = f'http://{self.target}{detectPath}' if self.target.startswith(
                        ('http:', 'https:')) is False else f'{self.target}{detectPath}'
                    async with session.get(url=url, headers=self.headers, timeout=self.reqTimeout,
                                           verify_ssl=False) as response:
                        if response is not None:
                            text = await response.text()
                            await asyncio.sleep(2)
                            if 'FineReport--Web Reporting Tool' in text:  # base on @ske 's exploit
                                self.flag = True
                                tqdm.write(Fore.RED + '[{}] {}'.format('FineReport', url))
                                return {'name': 'FineReport 8/9 Finger', 'url': url, 'software': 'FineReport'}
                            if '/com/fr/web/ui/fineui.min.js' in text:
                                self.flag = True
                                tqdm.write(Fore.RED + '[{}] {}'.format('FineReport', url))
                                return {'name': 'FineReport 10 Finger', 'url': url, 'software': 'FineReport'}
        except TimeoutError:
            return None
        except SSLCertVerificationError:
            return None
        except socket.gaierror:
            return None
        except Exception:
            return None

    async def attack(self, semaphore):
        async with semaphore:
            a = await self.detect()
            if a is not None:
                self.vulList.append(a)
            if self.flag:
                b = await self.exec()
                if b is not None:
                    self.vulList.append(b)
        self.pbar.update(1)
        return self.vulList


if __name__ == '__main__':
    semaphore = asyncio.Semaphore(500)
    sc = Script('oa.zjhu.edu.cn', 1)
    l = asyncio.get_event_loop()
    l.run_until_complete(sc.attack(semaphore))
