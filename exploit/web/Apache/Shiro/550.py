# coding=utf-8
# @Author   : zpchcbd HG team
# @Time     : 2021-09-08 16:30

from colorama import Fore
from tqdm import tqdm

from exploit.web import BaseScript
from core.MyEnums import *
from core.request.asynchttp import *


# fofa: app="APACHE-Shiro" && country="CN"
# python batch.py -m exploit.web.Apache.Shiro.550 -cs -fs "app=\"APACHE-Shiro\" && country=\"CN\""

class Script(BaseScript):
    name = 'Shiro'

    def __init__(self, target, session):
        super().__init__()
        # 漏洞目标
        self.target = target
        # 漏洞等级
        self.bugLevel = BugLevel.HIGH
        # 类型
        self.bugType = BugType.DESERIALIZE
        # 编号
        self.bugNumber = 'CVE-2016-4437'
        # 来源
        self.refer = ''
        # 特定路径判断
        self.detectPathList = ['/']
        # exec
        self.execPathList = ['/']
        # session
        self.session = session
        # 相关信息
        self.info = 'Shiro 550 deserialize'

    async def detect(self):
        headers = self.headers.copy()
        headers.update({'Cookie': 'rememberMe=1'})
        try:
            for detectPath in self.detectPathList:
                url = f'http://{self.target}{detectPath}' if self.target.startswith(
                    ('http:', 'https:')) is False else f'{self.target}{detectPath}'
                async with self.session.get(url=url, headers=headers, timeout=self.reqTimeout, verify_ssl=False,
                                            allow_redirects=False) as response:
                    if response is not None:
                        if response.status == 200:
                            if 'rememberMe=deleteMe' in response.headers.get('Set-Cookie', ''):
                                self.flag = True
                                tqdm.write(Fore.RED + '[{}] {}'.format('Shiro Finger', url))
                                return {'name': 'Shiro Finger', 'url': url, 'software': 'Shiro'}
                        elif response.status == 302 or response.status == 304 or response.status == 301:
                            # 实战中遇到了，多加一个301跳转的情况
                            async with self.session.get(url=url, verify_ssl=False, headers=headers,
                                                        timeout=self.reqTimeout,
                                                        allow_redirects=True) as response2:
                                header2 = response2.headers
                                if 'rememberMe=deleteMe' in header2.get('Set-Cookie', ''):
                                    self.flag = True
                                    tqdm.write(Fore.RED + '[{}] {}'.format('Shiro Finger', url))
        except Exception:
            return None

    # async def exec(self):
    #     try:
    #         async with aiohttp.ClientSession() as session:
    #             for execPath in self.execPathList:
    #                 url = f'http://{self.target}{execPath}' if self.target.startswith(
    #                     ('http:', 'https:')) is False else f'{self.target}{execPath}'
    #                 async with session.get(url=url, timeout=self.reqTimeout, verify_ssl=False) as response:
    #                     if response is not None:
    #                         text = await response.text()
    #                         await asyncio.sleep(2)
    #                         if 'It works!' in text:
    #                             tqdm.write(Fore.RED + '[{}] {}'.format('FineReport RCE', url))
    #                             return {'name': 'Shiro RCE', 'url': url, 'software': 'Shiro'}
    #     except Exception:
    #         return None

    async def attack(self, semaphore, pbar):
        async with semaphore:
            a = await self.detect()
            if a is not None:
                self.vulList.append(a)
            if self.flag:
                b = await self.exec()
                if b is not None:
                    self.vulList.append(b)
        pbar.update(1)
        return self.vulList


if __name__ == '__main__':
    # import requests
    # import hashlib
    #
    # resp = requests.get('https://50.84.113.154:8443/favicon.ico', verify=False)
    # if resp.status_code == 200:
    #     m1 = hashlib.md5()
    #     m1.update(resp.content)
    #     theMD5 = m1.hexdigest()
    #     print(theMD5)

    sem = asyncio.Semaphore(500)
    sc = Script('172-18-0-44-8080.webvpn.nbcc.cn', 1)
    l = asyncio.get_event_loop()
    l.run_until_complete(sc.attack(sem))
