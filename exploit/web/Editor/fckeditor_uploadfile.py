# coding=utf-8
# @Author   : zpchcbd HG team
# @Time     : 2021-09-11 15:33

from async_timeout import timeout
from colorama import Fore
from tqdm import tqdm

from exploit.web import BaseScript
from core.MyEnums import *
from core.MyAsyncHttp import *


# app=\"百度-UEditor\" && country=\"CN\"
# python batch.py -m exploit.web.Editor.ueditor -cs -fs "app=\"百度-UEditor\" && country=\"CN\""

class Script(BaseScript):
    name = 'FCKeditor'

    def __init__(self, target, pbar):
        super().__init__()
        # 漏洞目标
        self.target = target
        # 漏洞等级
        self.bugLevel = BugLevel.HIGH
        # 类型
        self.bugType = BugType.UPLOADFILE
        # 编号
        self.bugNumber = ''
        # 来源
        self.refer = ''
        # 特定路径判断
        self.detectPathList = ['/FCKeditor/editor/dialog/fck_about.html']
        # exec
        # self.execPathList = []
        # 进度条
        self.pbar = pbar
        # 相关信息
        self.info = 'PHP FCKEditor <= 2.6.4 / ASP.NET FCKEditor 2.6.8 '

    async def detect(self):
        try:
            async with aiohttp.ClientSession() as session:
                for detectPath in self.detectPathList:
                    url = f'http://{self.target}{detectPath}' if self.target.startswith(
                        ('http:', 'https:')) is False else f'{self.target}{detectPath}'
                    async with session.get(url=url, timeout=10, verify_ssl=False) as response:
                        if response is not None and response.status == 200:
                            text = await response.text()
                            if 'FCKeditor - The text editor for internet' in text:
                                self.flag = True
                                tqdm.write(Fore.RED + '[{}] {}'.format('FCKeditor', url))
                                return {'name': 'FCKeditor Finger', 'url': url, 'software': 'FCKeditor'}
        except Exception:
            return None

    # async def exec(self):
    #     try:
    #         async with self.semaphore:
    #             async with aiohttp.ClientSession() as session:
    #                 for execPath in self.execPathList:
    #                     url = f'http://{self.target}{execPath}' if self.target.startswith(
    #                         ('http:', 'https:')) is False else f'{self.target}{execPath}'
    #                     async with session.get(url=url, timeout=10, verify_ssl=False) as response:
    #                         if response is not None:
    #                             text = await response.text()
    #                             if 'It works!' in text:
    #                                 tqdm.write(Fore.RED + '[{}] {}'.format('FCKeditor', url))
    #                                 return {'name': 'FCKeditor Getshell', 'url': url, 'software': 'FCKeditor'}
    #     except Exception:
    #         return None

    async def attack(self, semaphore):
        async with semaphore:
            a = await self.detect()
            if a is not None:
                self.vulList.append(a)
            # if self.flag:
            #     b = await self.exec()
            #     if b is not None:
            #         self.vulList.append(b)
        self.pbar.update(1)
        return self.vulList


if __name__ == '__main__':
    pass
