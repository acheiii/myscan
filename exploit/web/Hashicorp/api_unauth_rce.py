# coding=utf-8
# @Author   : zpchcbd HG team
# @Time     : 2021-09-07 14:46

# Consul是HashiCorp公司推出的一款开源工具，用于实现分布式系统的服务发现与配置。与其他分布式服务注册与发现的方案相比，Consul提供的方案更为“一站式”。Consul内置了服务注册与发现框架、分布一致性协议实现、健康检查、Key/Value存储、多数据中心方案，不再需要依赖其他工具（例如ZooKeeper等），使用方式也相对简单。
# Consul使用Go语言编写，因此具有天然的可移植性（支持Linux、Windows和Mac OS X系统）；且安装包中仅包含一个可执行文件，便于部署，可与Docker等轻量级容器无缝配合。
# 在特定配置下，恶意攻击者可以通过发送精心构造的HTTP请求在未经授权的情况下在Consul服务端远程执行命令。
# fofa: app="HashiCorp" && country="CN"
# python batch.py -m exploit.web.Hashicorp.api_unauth_rce -fs "app=\"HashiCorp\" && country=\"CN\"" -cs

from colorama import Fore
from tqdm import tqdm

from exploit.web import BaseScript
from core.MyEnums import *
from core.MyAsyncHttp import *


class Script(BaseScript):
    name = 'Hashicorp'

    def __init__(self, target, pbar):
        super().__init__()
        # 漏洞目标
        self.target = target
        # 漏洞等级
        self.bugLevel = BugLevel.HIGH
        # 类型
        self.bugType = BugType.SQLINJECTION
        # 编号
        self.bugNumber = 'bugNumber'
        # 来源
        self.refer = 'refer'
        # 特定路径判断
        self.detectPathList = ['/']
        # exec
        self.execPathList = ['/v1/agent/self']
        # 进度条
        self.pbar = pbar
        # 相关信息
        self.info = 'Hashicorp'

    async def detect(self):
        try:
            async with aiohttp.ClientSession() as session:
                for detectPath in self.detectPathList:
                    url = f'http://{self.target}{detectPath}' if self.target.startswith(
                        ('http:', 'https:')) is False else f'{self.target}{detectPath}'
                    async with session.get(url=url, timeout=10, verify_ssl=False) as response:
                        if response is not None:
                            text = await response.text()
                            if 'Consul by HashiCorp' in text:
                                self.flag = True
                                tqdm.write(Fore.RED + '[{}] {}'.format('Hashicorp', url))
                                return {'name': 'Hashicorp Finger', 'url': url, 'software': 'Hashicorp'}
        except Exception:
            return None

    async def exec(self):
        try:
            async with aiohttp.ClientSession() as session:
                for execPath in self.execPathList:
                    url = f'http://{self.target}{execPath}' if self.target.startswith(
                        ('http:', 'https:')) is False else f'{self.target}{execPath}'
                    async with session.get(url=url, timeout=10, verify_ssl=False) as response:
                        if response is not None:
                            text = await response.json()
                            configFlag = text.get('DebugConfig')['EnableRemoteScriptChecks']
                            if configFlag:
                                tqdm.write(Fore.RED + '[{}] {}'.format('Hashicorp', url))
                                return {'name': 'Hashicorp API RCE', 'url': url, 'software': 'Hashicorp'}
        except Exception:
            return None

    async def attack(self, semaphore):
        async with semaphore:
            a = await self.detect()
            if a is not None:
                self.vulList.append(a)
            if self.flag:
                b = await self.exec()
                if b is not None:
                    self.vulList.append(b)
        self.pbar.update(1)
        return self.vulList


if __name__ == '__main__':
    pass
