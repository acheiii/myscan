# coding=utf-8
# @Author   : zpchcbd HG team
# @Time     : 2021-09-20 12:32

from colorama import Fore
from tqdm import tqdm

from exploit.web import BaseScript
from core.MyEnums import *
from core.MyAsyncHttp import *


class Script(BaseScript):
    name = 'Seeyon'

    def __init__(self, target, pbar):
        super().__init__()
        # 漏洞目标
        self.target = target
        # 漏洞等级
        self.bugLevel = BugLevel.HIGH
        # 类型
        self.bugType = BugType.READFILE
        # 编号
        self.bugNumber = ''
        # 来源
        self.refer = ''
        # 特定路径判断
        self.detectPathList = ['/favicon.ico']
        # exec
        self.execPathList = ['/']
        # 进度条
        self.pbar = pbar
        # 相关信息
        self.info = 'about version '
        self.favicon = ['cdc85452665e7708caed3009ecb7d4e2',
                        '17ac348fcce0b320e7bfab3fe2858dfa',
                        '57f307ad3764553df84e7b14b7a85432',
                        '3c8df395ec2cbd72782286d18a286a9a',
                        '2f761c27b6b7f9386bbd61403635dc42',
                        '055c3de1ef212cc16bec218c3ae08ca7']

    async def detect(self):
        try:
            async with aiohttp.ClientSession() as session:
                for detectPath in self.detectPathList:
                    url = f'http://{self.target}{detectPath}' if self.target.startswith(
                        ('http:', 'https:')) is False else f'{self.target}{detectPath}'
                    async with session.get(url=url, timeout=10, verify_ssl=False) as response:
                        if response is not None:
                            text = await response.read()
                            await asyncio.sleep(2)
                            m1 = hashlib.md5()
                            m1.update(text)
                            theMD5 = m1.hexdigest()
                            for _ in self.favicon:
                                if _ == theMD5:
                                    self.flag = True
                                tqdm.write(Fore.RED + '[{}] {}'.format('FineReport Finger', url))
                                return {'name': 'v2Conference Finger', 'url': url, 'software': 'FineReport'}
        except Exception:
            return None

    async def exec(self):
        try:
            async with aiohttp.ClientSession() as session:
                for execPath in self.execPathList:
                    url = f'http://{self.target}{execPath}' if self.target.startswith(
                        ('http:', 'https:')) is False else f'{self.target}{execPath}'
                    async with session.get(url=url, timeout=10, verify_ssl=False) as response:
                        if response is not None:
                            text = await response.text()
                            await asyncio.sleep(2)
                            if 'something about keywords in the web' in text:
                                tqdm.write(Fore.RED + '[{}] {}'.format('FineReport RCE', url))
                                return {'name': 'FineReport RCE', 'url': url, 'software': 'FineReport'}
        except Exception:
            return None

    async def attack(self, semaphore):
        async with semaphore:
            a = await self.detect()
            if a is not None:
                self.vulList.append(a)
            if self.flag:
                b = await self.exec()
                if b is not None:
                    self.vulList.append(b)
        self.pbar.update(1)
        return self.vulList


if __name__ == '__main__':
    import requests
    import hashlib

    resp = requests.get('https://50.84.113.154:8443/favicon.ico', verify=False)
    if resp.status_code == 200:
        m1 = hashlib.md5()
        m1.update(resp.content)
        theMD5 = m1.hexdigest()
        print(theMD5)
    #
    # semaphore = asyncio.Semaphore(500)
    # sc = Script('61.150.65.205:9999', 1)
    # l = asyncio.get_event_loop()
    # l.run_until_complete(sc.attack(semaphore))
