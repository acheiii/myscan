# coding=utf-8
# @Author   : zpchcbd HG team
# @Time     : 2021-09-11 12:27

# FOFA: "app=\"SALTSTACK-产品\" && country=\"CN\""
# python batch.py -m exploit.web.SaltStack.SaltStack_unauth_rce -fs "app=\"SALTSTACK-产品\" && country=\"CN\"" -cs

from async_timeout import timeout
from colorama import Fore
from tqdm import tqdm

from exploit.web import BaseScript
from core.MyEnums import *
from core.request.asynchttp import *


class Script(BaseScript):
    name = 'SaltStack'

    def __init__(self, target, session):
        super().__init__()
        # 漏洞目标
        self.target = target
        # 漏洞等级
        self.bugLevel = BugLevel.HIGH
        # 类型
        self.bugType = BugType.RCE
        # 编号
        self.bugNumber = 'CVE-2021-25281'
        # 来源
        self.refer = 'https://github.com/Immersive-Labs-Sec/CVE-2021-25281'
        # 特定路径判断
        self.detectPathList = ['/favicon.ico']
        # exec
        self.execPathList = ['/execPath']
        # session
        self.session = session
        # 相关信息
        self.info = 'Version < 3000.2'

    async def detect(self):
        try:
            for detectPath in self.detectPathList:
                url = f'https://{self.target}{detectPath}' if self.target.startswith(
                    ('http:', 'https:')) is False else f'{self.target}{detectPath}'
                async with self.session.get(url=url, headers=self.headers, timeout=self.reqTimeout, verify_ssl=False) as response:
                    if response is not None:
                        text = await response.text()
                        if 'Specified method is invalid for this resource' in text:
                            tqdm.write(Fore.RED + '[{}] {}'.format('SaltStack', url))
                            self.flag = True
                            return {'name': 'SaltStack Finger', 'url': url, 'software': 'SaltStack'}
        except Exception:
            pass

    # async def exec(self):
    #     try:
    #         for execPath in self.execPathList:
    #             url = f'https://{self.target}{execPath}' if self.target.startswith(
    #                 ('http:', 'https:')) is False else f'{self.target}{execPath}'
    #             async with self.semaphore:
    #                 with timeout(15):
    #                     async with aiohttp.ClientSession() as session:
    #                         async with session.get(url=url, verify_ssl=False) as response:
    #                             if response is not None:
    #                                 text = await response.text()
    #                                 if 'It works!' in text:
    #                                     tqdm.write(Fore.RED + '[{}] {}'.format('SaltStack', url))
    #                                     self.flag = True
    #                                     return {'name': 'SaltStack Getshell', 'url': url, 'software': 'SaltStack'}
    #     except Exception:
    #         pass

    async def attack(self, semaphore, pbar):
        async with semaphore:
            a = await self.detect()
            if a is not None:
                self.vulList.append(a)
            if self.flag:
                b = await self.exec()
                if b is not None:
                    self.vulList.append(b)
        pbar.update(1)
        return self.vulList


if __name__ == '__main__':
    semaphore = asyncio.Semaphore(500)
    sc = Script('192.168.4.137:8000', 1,)
    l = asyncio.get_event_loop()
    l.run_until_complete(sc.attack(semaphore))
