# coding=utf-8
# @Author   : zpchcbd HG team
# @Time     : 2021-09-08 16:30

from colorama import Fore
from tqdm import tqdm

from exploit.web import BaseScript
from core.MyEnums import *
from core.MyAsyncHttp import *


class Script(BaseScript):
    name = 'Quark'

    def __init__(self, target, pbar):
        super().__init__()
        # 漏洞目标
        self.target = target
        # 漏洞等级
        self.bugLevel = BugLevel.HIGH
        # 类型
        self.bugType = BugType.UPLOADFILE
        # 编号
        self.bugNumber = 'CVE-2021-21972'
        # 来源
        self.refer = ''
        # 特定路径判断
        self.detectPathList = ['/detectPath']
        # exec
        self.execPathList = ['/ui/vropspluginui/rest/services/uploadova']
        # 进度条
        self.pbar = pbar
        # 相关信息
        self.info = ''' about version
        VMware-VCSA-all-6.7.0-8217866、
        VMware-VIM-all-6.7.0-8217866、
        VMware-VCSA-all-6.5.0-16613358 
        '''

    async def detect(self):
        try:
            async with aiohttp.ClientSession() as session:
                for detectPath in self.detectPathList:
                    url = f'http://{self.target}{detectPath}' if self.target.startswith(
                        ('http:', 'https:')) is False else f'{self.target}{detectPath}'
                    async with session.get(url=url, timeout=10, verify_ssl=False) as response:
                        if response is not None:
                            text = await response.text()
                            await asyncio.sleep(2)
                            if 'something about keywords in the web' in text:
                                self.flag = True
                                tqdm.write(Fore.RED + '[{}] {}'.format('FineReport Finger', url))
                                return {'name': 'v2Conference Finger', 'url': url, 'software': 'FineReport'}
        except Exception:
            return None

    async def exec(self):
        try:
            async with aiohttp.ClientSession() as session:
                for execPath in self.execPathList:
                    url = f'http://{self.target}{execPath}' if self.target.startswith(
                        ('http:', 'https:')) is False else f'{self.target}{execPath}'
                    async with session.get(url=url, timeout=10, verify_ssl=False) as response:
                        if response is not None:
                            text = await response.text()
                            await asyncio.sleep(2)
                            if 'something about keywords in the web' in text:
                                tqdm.write(Fore.RED + '[{}] {}'.format('FineReport RCE', url))
                                return {'name': 'FineReport RCE', 'url': url, 'software': 'FineReport'}
        except Exception:
            return None

    async def attack(self, semaphore):
        async with semaphore:
            a = await self.detect()
            if a is not None:
                self.vulList.append(a)
            if self.flag:
                b = await self.exec()
                if b is not None:
                    self.vulList.append(b)
        self.pbar.update(1)
        return self.vulList


if __name__ == '__main__':
    import requests
    import hashlib
    resp = requests.get('https://50.84.113.154:8443/favicon.ico', verify=False)
    if resp.status_code == 200:
        m1 = hashlib.md5()
        m1.update(resp.content)
        theMD5 = m1.hexdigest()
        print(theMD5)
    #
    # semaphore = asyncio.Semaphore(500)
    # sc = Script('61.150.65.205:9999', 1)
    # l = asyncio.get_event_loop()
    # l.run_until_complete(sc.attack(semaphore))


# 模板
class Detect(threading.Thread):
    '''
    CVE-2021-21972 vCenter 6.5-7.0 RCE 漏洞为任意文件上传
    存在问题的接口为/ui/vropspluginui/rest/services/uploadova，完整路径（https://domain.com/ui/vropspluginui/rest/services/uploadova）
    仓库内的payload文件夹内的tar文件为默认冰蝎3 webshell
    https://github.com/NS-Sp4ce/CVE-2021-21972
    '''

    name = 'CVE-2021-21972'

    def __init__(self, alive_Web_queue, pbar, vul_list, requests_proxies):
        threading.Thread.__init__(self)
        self.alive_Web_queue = alive_Web_queue  # 存活web的队列
        self.pbar = pbar  # 进度条
        self.vul_list = vul_list  # 存储漏洞的名字和url
        self.proxies = requests_proxies  # 代理
        self.headers = {
            "User-Agent": "Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/55.0.2883.75 Safari/537.36"}

    def run(self):
        while not self.alive_Web_queue.empty():
            alive_web = self.alive_Web_queue.get()
            self.pbar.set_postfix(url=alive_web, vul=self.name)  # 进度条的显示
            self.run_detect(alive_web.rstrip('/'))
            self.pbar.update(1)  # 每完成一个任务，进度条也加+1
            self.alive_Web_queue.task_done()

    # 调用各种漏洞检测方法
    def run_detect(self, url):
        # 检测
        self.check(url)

    def check(self, url):
        upload_url = url + '/ui/vropspluginui/rest/services/uploadova'
        try:
            res = requests.get(url=upload_url, headers=self.headers, proxies=self.proxies, timeout=20, verify=False,
                               allow_redirects=False)
            status_code = res.status_code
            if status_code == 405:
                tqdm.write(Fore.RED + '[{}] {}'.format('vCenter', url))
                self.vul_list.append(['vCenter', url, 'Yes'])
                return True
            else:
                return False
        except Exception as e:
            return False


if __name__ == '__main__':
    from queue import Queue

    alive_web = ['']
    vul_list = []
    # proxy = r''
    # requests_proxies = {"http": "socks5://{}".format(proxy), "https": "socks5://{}".format(proxy)}
    requests_proxies = None
    alive_Web_queue = Queue(-1)  # 将存活的web存入队列里
    for _ in alive_web:
        alive_Web_queue.put(_)

    threads = []
    thread_num = 1  # 漏洞检测的线程数目

    pbar = tqdm(total=alive_Web_queue.qsize(), desc="检测漏洞", ncols=150)  # total是总数

    for num in range(1, thread_num + 1):
        t = Detect(alive_Web_queue, pbar, vul_list, requests_proxies)  # 实例化漏洞类，传递参数：存活web的队列，  存储漏洞的列表
        threads.append(t)
        t.start()
    for t in threads:
        t.join()

    pbar.close()  # 关闭进度条

    tqdm.write(Fore.BLACK + '-' * 50 + '结果' + '-' * 50)
    for vul in vul_list:
        tqdm.write(Fore.BLACK + str(vul))
