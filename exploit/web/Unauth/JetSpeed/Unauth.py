# coding=utf-8
# @Author   : zpchcbd HG team
# @Time     : 2021-08-27 0:49

# ico: 23e8c7bd78e8cd826c5a6073b15068b1

from colorama import Fore
from tqdm import tqdm

from exploit.web import BaseScript
from core.MyEnums import *
from core.MyAsyncHttp import *


# fofa: app="docker-产品"
# python batch.py -m exploit.web.Unauth.Jenkins.Unauth -cs -fs "app=\"docker-产品\""

class Script(BaseScript):
    name = 'JetSpeed'

    def __init__(self, target, pbar):
        super().__init__()
        # 漏洞目标
        self.target = target
        # 漏洞等级
        self.bugLevel = BugLevel.HIGH
        # 类型
        self.bugType = BugType.UNAUTH
        # 编号
        self.bugNumber = 'CVE-2016-0710'
        # 来源
        self.refer = ''
        # 特定路径判断
        self.detectPathList = ['/ws/v1/cluster/apps/new-application']
        # exec
        # self.execPathList = ['/execPath']
        # 进度条
        self.pbar = pbar
        # 相关信息
        self.info = ''

    async def detect(self):
        try:
            async with aiohttp.ClientSession() as session:
                urlLen = len(f'http://{self.target}'.split(':'))
                if urlLen == 2:
                    url = f'http://{self.target}{self.detectPathList[0]}' if self.target.startswith(
                        ('http:', 'https:')) is False else f'{self.target}{self.detectPathList[0]}'
                elif urlLen == 3:
                    url = f'http://{self.target}{self.detectPathList[1]}' if self.target.startswith(
                        ('http:', 'https:')) is False else f'{self.target}{self.detectPathList[1]}'
                async with session.get(url=url, timeout=10, verify_ssl=False) as response:
                    if response is not None and response.status == 200:
                        res = await response.json()
                        await asyncio.sleep(2)
                        if res.get('application-id'):
                            self.flag = True
                            tqdm.write(Fore.RED + '[{}] {}'.format('JetSpeed Unauth', url))
                            return {'name': 'JetSpeed Unauth', 'url': url, 'software': 'JetSpeed'}
        except Exception:
            return None

    # async def exec(self):
    #     try:
    #         async with aiohttp.ClientSession() as session:
    #             for execPath in self.execPathList:
    #                 url = f'http://{self.target}{execPath}' if self.target.startswith(
    #                     ('http:', 'https:')) is False else f'{self.target}{execPath}'
    #                 async with session.get(url=url, timeout=10, verify_ssl=False) as response:
    #                     if response is not None:
    #                         text = await response.text()
    #                         await asyncio.sleep(2)
    #                         if 'something about keywords in the web' in text:
    #                             tqdm.write(Fore.RED + '[{}] {}'.format('Couchdb Unauth', url))
    #                             return {'name': 'Couchdb Unauth', 'url': url, 'software': 'Couchdb'}
    #     except Exception:
    #         return None

    async def attack(self, semaphore):
        async with semaphore:
            a = await self.detect()
            if a is not None:
                self.vulList.append(a)
            if self.flag:
                b = await self.exec()
                if b is not None:
                    self.vulList.append(b)
        self.pbar.update(1)
        return self.vulList


if __name__ == '__main__':
    pass
    # import requests
    # import hashlib
    #
    # resp = requests.get('https://50.84.113.154:8443/favicon.ico', verify=False)
    # if resp.status_code == 200:
    #     m1 = hashlib.md5()
    #     m1.update(resp.content)
    #     theMD5 = m1.hexdigest()
    #     print(theMD5)
    #
    # semaphore = asyncio.Semaphore(500)
    # sc = Script('61.150.65.205:9999', 1)
    # l = asyncio.get_event_loop()
    # l.run_until_complete(sc.attack(semaphore))
