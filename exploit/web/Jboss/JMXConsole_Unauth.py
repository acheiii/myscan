# coding=utf-8
# @Author   : zpchcbd HG team
# @Time     : 2021-09-14 22:56

import hashlib
from colorama import Fore
from tqdm import tqdm

from core.variablemanager import GlobalVariableManager

from exploit.web import BaseScript
from core.MyEnums import *
from core.request.asynchttp import *


# python batch.py -m exploit.web.Jboss.JMXConsole_Unauth -cs -fs "app=\"JBoss\" && country=\"CN\""

class Script(BaseScript):
    name = 'JBoss'

    def __init__(self, target, session):
        super().__init__()
        # 漏洞目标
        self.target = target
        # 漏洞等级
        self.bugLevel = BugLevel.HIGH
        # 类型
        self.bugType = BugType.FINGER and BugType.UNAUTH
        # 编号
        self.bugNumber = ''
        # 来源
        self.refer = ''
        # 特定路径判断
        self.detectPathList = ['/favicon.ico']
        # exec
        self.execPathList = ['/jmx-console/']
        # session
        self.session = session
        # 相关信息
        self.info = ''
        self.favicon = ['799f70b71314a7508326d1d2f68f7519', '1b24a7a916a0e0901e381a0d6131b28d']

    async def detect(self):
        for detectPath in self.detectPathList:
            try:
                url = f'http://{self.target}{detectPath}' if self.target.startswith(
                    ('http:', 'https:')) is False else f'{self.target}{detectPath}'
                async with self.session.get(url=url, headers=self.headers, timeout=self.reqTimeout, verify_ssl=False) as response:
                    if response is not None:
                        text = await response.read()
                        m1 = hashlib.md5()
                        m1.update(text)
                        theMD5 = m1.hexdigest()
                        for _ in self.favicon:
                            if _ == theMD5:
                                self.flag = True
                                self.addInGlobalVariable(self.name)
                                tqdm.write(Fore.RED + '[{}] {}'.format('JBoss Finger', url))
                                return {'name': 'JBoss Finger', 'url': url, 'software': 'JBoss'}
            except Exception:
                return None

    async def exec(self):
        try:
            for execPath in self.execPathList:
                # JMXInvokerServlet反序列化
                # if execPath == '/invoker/JMXInvokerServlet':
                #     url = f'http://{self.target}{execPath}' if self.target.startswith(
                #         ('http:', 'https:')) is False else f'{self.target}{execPath}'
                #     async with session.get(url=url, timeout=self.reqTimeout, verify_ssl=False) as response:
                #         await asyncio.sleep(2)
                #         if response is not None and response.status == 200:
                #             if response.headers['content-type'].count('serialized') \
                #                     or response.headers['Content-Type'].count('serialized'):
                #                 tqdm.write(Fore.RED + '[{}] {}'.format('JBoss CVE-2017-12149', url))
                #                 return {'name': 'JBoss CVE-2017-12149', 'url': url, 'software': 'JBoss'}
                # Console未授权
                url = f'http://{self.target}{execPath}' if self.target.startswith(
                    ('http:', 'https:')) is False else f'{self.target}{execPath}'
                async with self.session.get(url=url, headers=self.headers, timeout=self.reqTimeout, verify_ssl=False) as response:
                    if response is not None and response.status == 200:
                        text = await response.text()
                        await asyncio.sleep(2)
                        # 控制台未授权，可以部署war 拿shell @ske@ske@ske@ske@ske@ske
                        if 'Management Console' in text:
                            tqdm.write(Fore.RED + '[{}] {}'.format('JBoss JMX-Console Unauth', url))
                            return {'name': 'JBoss JMX-Console Unauth', 'url': url, 'software': 'JBoss'}
                # if execPath == '/jmx-console/':
                #     url = f'http://{self.target}{execPath}' if self.target.startswith(
                #         ('http:', 'https:')) is False else f'{self.target}{execPath}'
                #     async with session.get(url=url, timeout=self.reqTimeout, verify_ssl=False) as response:
                #         if response is not None and response.status == 200:
                #             text = await response.text()
                #             await asyncio.sleep(2)
                #             # 控制台未授权，可以部署war 拿shell @ske@ske@ske@ske@ske@ske
                #             if 'Management Console' in text:
                #                 tqdm.write(Fore.RED + '[{}] {}'.format('JBoss JMX-Console Unauth', url))
                #                 return {'name': 'JBoss JMX-Console Unauth', 'url': url, 'software': 'JBoss'}
        except Exception:
            return None

    async def attack(self, semaphore, pbar):
        async with semaphore:
            a = await self.detect()
            if a is not None:
                self.vulList.append(a)
            if self.flag:
                b = await self.exec()
                if b is not None:
                    self.vulList.append(b)
        pbar.update(1)
        return self.vulList


if __name__ == '__main__':
    pass
    # import requests
    # import hashlib
    # resp = requests.get('https://50.84.113.154:8443/favicon.ico', verify=False)
    # if resp.status_code == 200:
    #     m1 = hashlib.md5()
    #     m1.update(resp.content)
    #     theMD5 = m1.hexdigest()
    #     print(theMD5)

    # sem = asyncio.Semaphore(500)
    # sc = Script('61.150.65.205:9999', 1, sem)
    # l = asyncio.get_event_loop()
    # l.run_until_complete(sc.attack())
