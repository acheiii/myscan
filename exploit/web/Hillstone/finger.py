# coding=utf-8
# @Author   : zpchcbd HG team
# @Time     : 2021-09-08 16:30
import hashlib

from colorama import Fore
from tqdm import tqdm

from exploit.web import BaseScript
from core.MyEnums import *
from core.MyAsyncHttp import *


# fofa: app="Hillstone-流量管理"
# python batch.py -m exploit.web.Hillstone.HILLSTONE -cs -fs "app=""Hillstone-流量管理\""

class Script(BaseScript):
    name = 'HillStone'

    def __init__(self, target, pbar):
        super().__init__()
        # 漏洞目标
        self.target = target
        # 漏洞等级
        self.bugLevel = BugLevel.HIGH
        # 类型
        self.bugType = BugType.RCE
        # 编号
        self.bugNumber = ''
        # 来源
        self.refer = ''
        # 特定路径判断
        self.detectPathList = ['/resources/images/favicon.ico']
        # exec
        # self.execPathList = ['']
        # 进度条
        self.pbar = pbar
        # 相关信息
        self.info = 'version V5.5'
        self.favicon = ['5e445d9b8a8b8c4d27db013f7e3f3716']

    async def detect(self):
        try:
            async with aiohttp.ClientSession() as session:
                for detectPath in self.detectPathList:
                    url = f'http://{self.target}{detectPath}' if self.target.startswith(
                        ('http:', 'https:')) is False else f'{self.target}{detectPath}'
                    async with session.get(url=url, headers=self.headers, timeout=self.reqTimeout, verify_ssl=False) as response:
                        if response is not None:
                            text = await response.read()
                            m1 = hashlib.md5()
                            m1.update(text)
                            theMD5 = m1.hexdigest()
                            for _ in self.favicon:
                                if _ == theMD5:
                                    self.flag = True
                                    tqdm.write(Fore.RED + '[{}] {}'.format('HillStone Finger', url))
                                    return {'name': 'HillStone Finger', 'url': url, 'software': 'HillStone'}
        except Exception:
            return None

    async def exec(self):
        pass
        # try:
        #     async with aiohttp.ClientSession() as session:
        #         for execPath in self.execPathList:
        #             url = f'http://{self.target}{execPath}' if self.target.startswith(
        #                 ('http:', 'https:')) is False else f'{self.target}{execPath}'
        #             async with session.get(url=url, timeout=self.reqTimeout, verify_ssl=False) as response:
        #                 if response is not None:
        #                     text = await response.text()
        #                     if 'It works!' in text:
        #                         tqdm.write(Fore.RED + '[{}] {}'.format('FineReport Getshell', url))
        #                         self.flag = True
        #                         return {'name': 'FineReport Getshell', 'url': url, 'software': 'FineReport'}
        # except Exception:
        #     return None

    async def attack(self, semaphore):
        async with semaphore:
            a = await self.detect()
            if a is not None:
                self.vulList.append(a)
            if self.flag:
                b = await self.exec()
                if b is not None:
                    self.vulList.append(b)
        self.pbar.update(1)
        return self.vulList


if __name__ == '__main__':
    import requests
    import hashlib
    resp = requests.get('https://182.48.107.194/resources/images/favicon.ico', verify=False)
    if resp.status_code == 200:
        m1 = hashlib.md5()
        m1.update(resp.content)
        theMD5 = m1.hexdigest()
        print(theMD5)

    sem = asyncio.Semaphore(500)
    sc = Script('182.48.107.194', 1)
    l = asyncio.get_event_loop()
    l.run_until_complete(sc.attack(sem))
