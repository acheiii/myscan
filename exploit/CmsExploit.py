# coding=utf-8
# @Author   : zpchcbd HG team
# @Time     : 2021-09-02 22:30


from core.public import *
from core.variablemanager import GlobalVariableManager
from exploit import BaseExploit
import aiohttp


class CmsScan(BaseExploit):
    def __init__(self, domain, domainList, moduleList):
        super().__init__()
        self.source = 'CmsScan'
        self.domain = domain
        self.domainList = domainList
        self.moduleList = moduleList

    async def exploit(self):
        semaphore = asyncio.Semaphore(500)
        taskList = []
        try:
            """第一次完全扫描"""
            async with aiohttp.ClientSession(timeout=len(self.domainList)/2*len(self.moduleList)) as session:
                for module in self.moduleList:
                    pbar = tqdm(total=len(self.domainList), desc='[{}]'.format(module.name), ncols=100)  # total是总数
                    for domain in self.domainList:
                        aObject = module(domain, session)
                        taskList.append(asyncio.create_task(aObject.attack(semaphore, pbar)))
                result = await asyncio.gather(*taskList)
                for r in result:
                    for _ in r:
                        self.resList.append(_)

            """第二次复查扫描
            1、扫描的是 同类型多模块中除了其中的一个的其他以外的模块
            2、这里取的模块是从全局变量表中进行取出，因为第一次完全扫描要复查的结果已经放到全局变量表中去了
            """
            GlobalVariableManager.getValue('')
            checkModuleList = []
            async with aiohttp.ClientSession(timeout=len(self.domainList)/2*len(self.moduleList)) as session:
                for module in self.moduleList:
                    pbar = tqdm(total=len(self.domainList), desc='[{}]'.format(module.name), ncols=100)  # total是总数
                    for domain in self.domainList:
                        aObject = module(domain, session)
                        taskList.append(asyncio.create_task(aObject.attack(semaphore, pbar)))
                result = await asyncio.gather(*taskList)
                for r in result:
                    for _ in r:
                        self.resList.append(_)

            print('[+] [{}] {}'.format(len(self.resList), self.resList))
            self.writeFile(self.resList, 15)
        except Exception as e:
            print('[-] error is {}, module name is {}'.format(e.args, module.name))

    async def main(self):
        await self.exploit()


if '__main__' == __name__:
    pass
    # a = CmsScan('', 'http://www.zjhu.edu.cn/')
