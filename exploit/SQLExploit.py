# coding=utf-8
# @Author   : zpchcbd HG team
# @Time     : 2021-09-06 23:27

from core.MyConstant import ProgramPath
from core.utils.InformationProvider import InformationProvider
from exploit.public import *
from exploit import BaseExploit

import subprocess
import time

os_run = ProgramPath.PYTHON + ' ' + ProgramPath.SQLMAP


class SqlScan(BaseExploit):

    def __init__(self, domain, webParamsList):
        super().__init__()
        self.source = 'SqlScan'
        self.domain = domain
        self.webParamsList = webParamsList
        self.detectParam = ['/list.php?k=1?aspx?id=1?"download.asp=manage.mdb" and 1=1 union select user from admin%23<script>alert(1)</script>']
        self._initWafRule()

    def _getWafRule(self):
        return eval(InformationProvider.readFile(os.path.join(InformationProvider.dictPath, 'rule.txt')))

    # detect waf
    def _scanWaf(self, uul):
        for url in self.webParamsList:
            try:
                r = requests.get(url=urls, timeout=5)
                # encoding = requests.utils.get_encodings_from_content(r.text)[0]
                # page_get = r.content.decode(encoding, 'replace')
                page_get = r.content
                headers_get = str(r.headers)
            except Exception as e:
                print(e)
            waf_dic = self._getWafRule()
            for k, v in waf_dic.items():
                for x in v:
                    try:
                        res = eval(x)
                        if res:
                            return k
                    except:
                        pass

    def paramScan(self, url):
        # 转义
        url = url.replace('&', '^&')
        comm = 'python2 sqlmap.py -u {} --technique B --batch --thread=10 --random-agent'.format(url)
        print('Level 0 : ' + url.replace('^', '').replace('*', ''))
        try:
            res = subprocess.Popen(comm, shell=True, stdout=subprocess.PIPE)
            result = res.stdout.read().decode()
            inj = self.check(result, url=url)
        except Exception:
            pass
        finally:
            res.terminate()
            return inj

    def check(self, result, url):
        url = url.replace('^', '')
        if '---' in result:
            domain_values = "1111"
            if 'sqlmap was not able to fingerprint the back-end database management syste' not in result:
                try:
                    result_info = re.search('---(.*?)---.*?\[INFO\] (the back-end DBMS is .*?)\[', result, re.S)
                    inj = result_info.group(1)
                    dbs = result_info.group(2)
                    # ae.write(inj.replace('Parameter: ', '<tr><td>注入参数(方式)</td><td> ').replace('Type: ',
                    #                                                                           '</td></tr><tr class="active"><td>&nbsp;&nbsp;&nbsp;&nbsp;注入方式</td><td>').replace
                    #          ('Title: ', '</td></tr><tr><td>&nbsp;&nbsp;&nbsp;&nbsp;注入标题</td><td>').replace(
                    #     'Payload: ', '</td></tr><tr><td>&nbsp;&nbsp;&nbsp;&nbsp;注入攻击</td><td>') + '</td></tr>')

                    if 'back-end DBMS' in dbs:
                        pass
                        # ae.write(dbs.replace('the back-end DBMS is ', '<tr><td>数据库类型</td><td> ').replace(
                        #     'web server operating system: ', '</td></tr><tr><td>服务器版本</td><td>').replace(
                        #     'web application technology: ', '</td></tr><tr><td>服务器语言</td><td>').replace(
                        #     'back-end DBMS: ', '</td></tr><tr><td>数据库版本</td><td>') + '</td></tr>')


                    else:
                        pass
                    #     ae.write('''
                    #  <tr>
                    #     <td>出现拦截</td>
                    #     <td>可能存在注入但被拦截,或者无法识别数据库版本</td>
                    # </tr>
                    #     ''')
                    return 'INJ'
                except Exception:
                    pass
            else:
                try:
                    result_info = re.search('---(.*?)---.*?INFO\] (.*?)\[', result, re.S)
                    inj = result_info.group(1)
                    with open('report.html', 'a+', encoding='utf-8') as ae:
                        ae.write('''
                                <div class="col-md-12 font-weight-bold"><br>
                                <div class="panel panel-primary">
                                    <div class="panel-heading">
                                        网站漏洞报表
                                    </div>
                                    <div class="panel-body">
                                        <table class="table">

                                            <tr>
                                                <td>发现时间</td>
                                <td>{}</td>
                            </tr>


                            <tr>
                                <td>网站标题</td>
                                <td>{}</td>
                            </tr>


                            <tr>
                                <td>注入网址</td>
                                <td>{}</td>
                            </tr>
                            <tr>
                                <td>执行命令</td>
                                <td>{}</td>
                            </tr>
                            '''.format(str(time.strftime('%Y-%m-%d:%H:%M:%S', time.localtime())),
                                       domain_values.get('网站标题'), url))
                        ae.write(inj.replace('Parameter: ', '<tr><td>注入参数(方式)</td><td> ').replace('Type: ',
                                                                                                  '</td></tr><tr class="active"><td>注入方式</td><td>').replace
                                 ('Title: ', '</td></tr><tr><td>注入标题</td><td>').replace(
                            'Payload: ', '</td></tr><tr><td>注入攻击</td><td>') + '</td></tr>')

                        ae.write('''
                         <tr>
                            <td>出现拦截</td>
                            <td>可能存在注入但被拦截,或者无法识别数据库版本</td>
                        </tr>
                            ''')
                        # with open('result.txt', 'a+', encoding='utf-8') as ae:
                        #     ae.write('-------------------------------------------------\n')
                        #     ae.write('发现时间 : ' + str(time.strftime('%Y-%m-%d:%H:%M:%S', time.localtime())) + '\n')
                        #     ae.write('网站标题 : ' + title + '\n')
                        #     ae.write('注入网址 : ' + url + '\n')
                        #     ae.write('执行命令 : ' + common + '\n')
                        #     ae.write(inj.replace('Parameter: ', '注入参数(方式) : ').replace('Type: ', '注入方式 : ').replace('Title: ',
                        #                                                                                             '注入标题 : ').replace(
                        #         'Payload: ', '注入攻击 : ') + '\n')
                        #     ae.write('\n' + '存在注入但无法识别数据库版本' + '\n')
                        return 'INJ'
                except Exception:
                    pass

    def exploit(self):
        for _ in self.webParamsList:
            self.paramScan(_)

    def main(self):
        self.exploit()


if __name__ == '__main__':
    pass
