# coding=utf-8
# @Author   : zpchcbd HG team
# @Time     : 2021-09-02 22:30


from core.utils.InformationProvider import InformationProvider
from exploit.public import *
from exploit import BaseExploit

from exploit.service.dubbo import dubboScan
from exploit.service.ftp import ftpScan
from exploit.service.ldap import ldapScan
from exploit.service.jdwp import jdwpScan
from exploit.service.log4j import log4jScan
from exploit.service.memcache import memcacheScan
from exploit.service.mongodb import mongodbScan
from exploit.service.mssql import mssqlScan
from exploit.service.mysql import mysqlScan
from exploit.service.postgresql import postgresqlScan
from exploit.service.rdp import rdpScan
from exploit.service.redis import redisScan
from exploit.service.rmi import rmiScan
from exploit.service.rsync import rsyncScan
from exploit.service.smb import smbScan
from exploit.service.ssh import sshScan
from exploit.service.proxy import proxyScan
# from exploit.service.vnc import vncScan
from exploit.service.zookeeper import zookeeperScan
from exploit.service.null import nullScan


class PortServiceScan(BaseExploit):

    def __init__(self, domain, portServiceList, pbar):
        super().__init__()
        self.source = 'PortServiceScan'
        self.domain = domain
        self.portServiceList = portServiceList
        self.pbar = pbar

    def scan(self):
        pass

    async def exploit(self):
        #     # self.portServiceList = [
        #     # {'service': 'redis', 'ip': ['1.1.1.1:6379','2.2.2.2:9874']},
        #     # {'service': 'rsync', 'ip': ['3.3.3.3:873','4.4.4.4:783'], }
        #     # ]
        redisPasswordList = InformationProvider.readFile(
            os.path.join(InformationProvider.dictPath, 'redis_passwords.txt'))

        ftpUsernameList = InformationProvider.readFile(
            os.path.join(InformationProvider.dictPath, 'ftp_usernames.txt'))
        ftpPasswordList = InformationProvider.readFile(
            os.path.join(InformationProvider.dictPath, 'ftp_passwords.txt'))
        ftpUPList = InformationProvider.generate(ftpUsernameList, ftpPasswordList)

        mysqlUsernameList = InformationProvider.readFile(
            os.path.join(InformationProvider.dictPath, 'mysql_usernames.txt'))
        mysqlPasswordList = InformationProvider.readFile(
            os.path.join(InformationProvider.dictPath, 'mysql_passwords.txt'))
        mysqlUPList = InformationProvider.generate(mysqlUsernameList, mysqlPasswordList)

        mssqlUsernameList = InformationProvider.readFile(
            os.path.join(InformationProvider.dictPath, 'sqlserver_usernames.txt'))
        mssqlPasswordList = InformationProvider.readFile(
            os.path.join(InformationProvider.dictPath, 'sqlserver_passwords.txt'))
        mssqlUPList = InformationProvider.generate(mssqlUsernameList, mssqlPasswordList)

        postgreUsernameList = InformationProvider.readFile(
            os.path.join(InformationProvider.dictPath, 'postgresql_usernames.txt'))
        postgrePasswordList = InformationProvider.readFile(
            os.path.join(InformationProvider.dictPath, 'postgresql_passwords.txt'))
        postgreUPList = InformationProvider.generate(postgreUsernameList, postgrePasswordList)

        rsyncUsernameList = InformationProvider.readFile(
            os.path.join(InformationProvider.dictPath, 'rsync_usernames.txt'))
        rsyncPasswordList = InformationProvider.readFile(
            os.path.join(InformationProvider.dictPath, 'rsync_passwords.txt'))
        rsyncUPList = InformationProvider.generate(rsyncUsernameList, rsyncPasswordList)

        sshUsernameList = InformationProvider.readFile(
            os.path.join(InformationProvider.dictPath, 'ssh_usernames.txt'))
        sshPasswordList = InformationProvider.readFile(
            os.path.join(InformationProvider.dictPath, 'ssh_passwords.txt'))
        sshUPList = InformationProvider.generate(sshUsernameList, sshPasswordList)

        # semaphore = asyncio.Semaphore(500)

        serviceTaskList = []
        for target in self.portServiceList:
            targetService = target['service']
            # textui == dubbo
            if 'textui' in targetService:
                for _ in target['ip']:
                    serviceTaskList.append(asyncio.create_task(dubboScan(_, self.pbar)))
            elif 'ftp' in targetService:
                for _ in target['ip']:
                    serviceTaskList.append(asyncio.create_task(ftpScan(_, ftpUPList, self.pbar)))
            elif 'jdwp' in targetService:
                for _ in target['ip']:
                    serviceTaskList.append(asyncio.create_task(jdwpScan(_, self.pbar)))
            elif 'log4j' in targetService:
                for _ in target['ip']:
                    serviceTaskList.append(asyncio.create_task(log4jScan(_, self.pbar)))
            elif 'memcache' in targetService:
                for _ in target['ip']:
                    serviceTaskList.append(asyncio.create_task(memcacheScan(_, self.pbar)))
            elif 'mongodb' in targetService:
                for _ in target['ip']:
                    serviceTaskList.append(asyncio.create_task(mongodbScan(_, self.pbar)))
            elif 'ms-sql-s' in targetService:
                # mssql
                for _ in target['ip']:
                    serviceTaskList.append(asyncio.create_task(mssqlScan(_, mssqlUPList, self.pbar)))
            elif 'mysql' in targetService:
                for _ in target['ip']:
                    serviceTaskList.append(asyncio.create_task(mysqlScan(_, mysqlUPList, self.pbar)))
            elif 'postgresql' in targetService:
                for _ in target['ip']:
                    serviceTaskList.append(asyncio.create_task(postgresqlScan(_, postgreUPList, self.pbar)))
            # rdp
            elif 'ms-wbt-server' in targetService:
                for _ in target['ip']:
                    serviceTaskList.append(asyncio.create_task(rdpScan(_, self.pbar)))
            elif 'ldap' in targetService:
                for _ in target['ip']:
                    serviceTaskList.append(asyncio.create_task(ldapScan(_, self.pbar)))
            elif 'redis' in targetService:
                for _ in target['ip']:
                    serviceTaskList.append(asyncio.create_task(redisScan(_, redisPasswordList, self.pbar)))
            elif 'rmi' in targetService:
                for _ in target['ip']:
                    serviceTaskList.append(asyncio.create_task(rmiScan(_, self.pbar)))
            # smb
            elif 'microsoft-ds' in targetService:
                for _ in target['ip']:
                    serviceTaskList.append(asyncio.create_task(smbScan(_, self.pbar)))
            elif 'rsync' in targetService:
                for _ in target['ip']:
                    serviceTaskList.append(asyncio.create_task(rsyncScan(_, rsyncUPList, self.pbar)))
            elif 'ssh' in targetService:
                for _ in target['ip']:
                    serviceTaskList.append(asyncio.create_task(sshScan(_, sshUPList, self.pbar)))
            elif 'zookeeper' in targetService:
                for _ in target['ip']:
                    serviceTaskList.append(asyncio.create_task(zookeeperScan(_, self.pbar)))
            elif 'proxy' in targetService:  # http-proxy 这种服务是代理服务，不是HTTP服务
                for _ in target['ip']:
                    serviceTaskList.append(asyncio.create_task(proxyScan(_, self.pbar)))
            # elif 'http' in targetService:
                # http的处理已经在前面portSpider中进行处理了，全部重新放到self.domainList中去进行CmsScan利用
                # for _ in target['ip']:
                #     serviceTaskList.append(asyncio.create_task(nullScan(_, self.pbar)))
            else:
                # NULL SCAN 满足pbar
                for _ in target['ip']:
                    serviceTaskList.append(asyncio.create_task(nullScan(_, self.pbar)))
        # 数据处理
        result = await asyncio.gather(*serviceTaskList)  # [[{}],[{}]]
        for i in result:
            for _ in i:
                self.resList.append(_)
        print('[+] [{}] [{}] {}'.format(self.source, len(self.resList), self.resList))
        self.writeFile(self.resList, 15)

    async def main(self):
        await self.exploit()


if __name__ == '__main__':
    pass
    # portServiceList = [{'service': 'microsoft-ds', 'ip': ['127.0.0.1:445']}]
    # total = 0
    # for targetService in portServiceList:
    #     total += len(targetService['ip'])
    # pbar = tqdm(total=total, desc="ServiceScan", ncols=100)  # total是总数
    # p = PortServiceScan('asd', portServiceList, pbar)
    # loop = asyncio.get_event_loop()
    # loop.run_until_complete(p.main())

    # starttime = time.time()
    # list_ = ['172.30.212.58']
    # queue = asyncio.Queue(-1)
    # xxx = IpUnauth('nbcc.cn', queue)
    #
    # print(time.time() - starttime)
