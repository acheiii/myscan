# coding=utf-8
# @Author   : zpchcbd HG team
# @Time     : 2021-08-27 18:35
from async_timeout import timeout

from exploit.service.base import *
from core.utils.InformationProvider import *


# unauth
async def checkUnauth(addr):
    try:
        with timeout(5):
            reader, writer = await asyncio.open_connection(addr.split(':')[0], int(addr.split(':')[1]))
            writer.write(b'INFO\n')
            await writer.drain()
            result = await reader.read(1024)
            if b"redis_version" in result:
                print('[+] redis unauth, {}'.format(addr))
                return {'name': 'unauth', 'url': addr, 'software': 'redis'}
    except:
        pass
    finally:
        try:
            writer.close()
        except NameError:
            pass


# weakpass
async def checkWeakpass(addr, passwordList):
    try:
        with timeout(5):
            reader, writer = await asyncio.open_connection(addr.split(':')[0], int(addr.split(':')[1]))
            writer.write(b'INFO\n')
            await writer.drain()
            result = await reader.read(1024)
            if b"Authentication" in result:
                for _pass in passwordList:
                    password = _pass.replace('\r', '').replace('\n', '')
                    message = 'AUTH {}\r\n'.format(password)
                    writer.write(message.encode())
                    await writer.drain()
                    result = await reader.read(1024)
                    if '+OK' in result.decode('utf-8'):
                        print('[+] redis weakpass, {}'.format(str(addr + ' | ' + str(password))))
                        return {'name': 'weakpass', 'url': str(addr + ' | ' + str(password)), 'software': 'redis'}
    except:
        pass
    finally:
        try:
            writer.close()
        except NameError:
            pass


async def redisScan(addr, passwordList, pbar):
    vulList = []
    a = await checkUnauth(addr)
    if a is not None:
        vulList.append(a)
    b = await checkWeakpass(addr, passwordList)
    if b is not None:
        vulList.append(b)
    return vulList


if __name__ == '__main__':
    redisPasswordList = InformationProvider.readFile(os.path.join(InformationProvider.dictPath, 'redis_passwords.txt'))
    loop = asyncio.get_event_loop()
    loop.run_until_complete(redisScan('127.0.0.1:6377', redisPasswordList))